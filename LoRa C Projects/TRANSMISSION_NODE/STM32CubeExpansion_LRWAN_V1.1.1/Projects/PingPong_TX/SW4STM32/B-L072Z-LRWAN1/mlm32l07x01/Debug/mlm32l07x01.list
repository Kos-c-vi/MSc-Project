
mlm32l07x01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007b04  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003ec  08007bc8  08007bc8  00017bc8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08007fb4  08007fb4  00017fb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08007fbc  08007fbc  00017fbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08007fc0  08007fc0  00017fc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000000f4  20000000  08007fc4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000005a8  200000f4  080080b8  000200f4  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  2000069c  080080b8  0002069c  2**0
                  ALLOC
  9 .ARM.attributes 00000028  00000000  00000000  000200f4  2**0
                  CONTENTS, READONLY
 10 .debug_info   00024bad  00000000  00000000  0002011c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000546e  00000000  00000000  00044cc9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00008f67  00000000  00000000  0004a137  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000f80  00000000  00000000  000530a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000011c8  00000000  00000000  00054020  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_macro  0001d1a9  00000000  00000000  000551e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   000149af  00000000  00000000  00072391  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00097538  00000000  00000000  00086d40  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  0011e278  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00003110  00000000  00000000  0011e2f4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200000f4 	.word	0x200000f4
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08007bac 	.word	0x08007bac

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200000f8 	.word	0x200000f8
 8000104:	08007bac 	.word	0x08007bac

08000108 <__gnu_thumb1_case_uqi>:
 8000108:	b402      	push	{r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0049      	lsls	r1, r1, #1
 8000110:	5c09      	ldrb	r1, [r1, r0]
 8000112:	0049      	lsls	r1, r1, #1
 8000114:	448e      	add	lr, r1
 8000116:	bc02      	pop	{r1}
 8000118:	4770      	bx	lr
 800011a:	46c0      	nop			; (mov r8, r8)

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f8f0 	bl	8000404 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__divsi3>:
 8000230:	4603      	mov	r3, r0
 8000232:	430b      	orrs	r3, r1
 8000234:	d47f      	bmi.n	8000336 <__divsi3+0x106>
 8000236:	2200      	movs	r2, #0
 8000238:	0843      	lsrs	r3, r0, #1
 800023a:	428b      	cmp	r3, r1
 800023c:	d374      	bcc.n	8000328 <__divsi3+0xf8>
 800023e:	0903      	lsrs	r3, r0, #4
 8000240:	428b      	cmp	r3, r1
 8000242:	d35f      	bcc.n	8000304 <__divsi3+0xd4>
 8000244:	0a03      	lsrs	r3, r0, #8
 8000246:	428b      	cmp	r3, r1
 8000248:	d344      	bcc.n	80002d4 <__divsi3+0xa4>
 800024a:	0b03      	lsrs	r3, r0, #12
 800024c:	428b      	cmp	r3, r1
 800024e:	d328      	bcc.n	80002a2 <__divsi3+0x72>
 8000250:	0c03      	lsrs	r3, r0, #16
 8000252:	428b      	cmp	r3, r1
 8000254:	d30d      	bcc.n	8000272 <__divsi3+0x42>
 8000256:	22ff      	movs	r2, #255	; 0xff
 8000258:	0209      	lsls	r1, r1, #8
 800025a:	ba12      	rev	r2, r2
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d302      	bcc.n	8000268 <__divsi3+0x38>
 8000262:	1212      	asrs	r2, r2, #8
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	d065      	beq.n	8000334 <__divsi3+0x104>
 8000268:	0b03      	lsrs	r3, r0, #12
 800026a:	428b      	cmp	r3, r1
 800026c:	d319      	bcc.n	80002a2 <__divsi3+0x72>
 800026e:	e000      	b.n	8000272 <__divsi3+0x42>
 8000270:	0a09      	lsrs	r1, r1, #8
 8000272:	0bc3      	lsrs	r3, r0, #15
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x4c>
 8000278:	03cb      	lsls	r3, r1, #15
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b83      	lsrs	r3, r0, #14
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x58>
 8000284:	038b      	lsls	r3, r1, #14
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b43      	lsrs	r3, r0, #13
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x64>
 8000290:	034b      	lsls	r3, r1, #13
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b03      	lsrs	r3, r0, #12
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x70>
 800029c:	030b      	lsls	r3, r1, #12
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0ac3      	lsrs	r3, r0, #11
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x7c>
 80002a8:	02cb      	lsls	r3, r1, #11
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a83      	lsrs	r3, r0, #10
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x88>
 80002b4:	028b      	lsls	r3, r1, #10
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a43      	lsrs	r3, r0, #9
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x94>
 80002c0:	024b      	lsls	r3, r1, #9
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a03      	lsrs	r3, r0, #8
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0xa0>
 80002cc:	020b      	lsls	r3, r1, #8
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	d2cd      	bcs.n	8000270 <__divsi3+0x40>
 80002d4:	09c3      	lsrs	r3, r0, #7
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xae>
 80002da:	01cb      	lsls	r3, r1, #7
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0983      	lsrs	r3, r0, #6
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xba>
 80002e6:	018b      	lsls	r3, r1, #6
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0943      	lsrs	r3, r0, #5
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xc6>
 80002f2:	014b      	lsls	r3, r1, #5
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0903      	lsrs	r3, r0, #4
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xd2>
 80002fe:	010b      	lsls	r3, r1, #4
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	08c3      	lsrs	r3, r0, #3
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xde>
 800030a:	00cb      	lsls	r3, r1, #3
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0883      	lsrs	r3, r0, #2
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xea>
 8000316:	008b      	lsls	r3, r1, #2
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0843      	lsrs	r3, r0, #1
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xf6>
 8000322:	004b      	lsls	r3, r1, #1
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	1a41      	subs	r1, r0, r1
 800032a:	d200      	bcs.n	800032e <__divsi3+0xfe>
 800032c:	4601      	mov	r1, r0
 800032e:	4152      	adcs	r2, r2
 8000330:	4610      	mov	r0, r2
 8000332:	4770      	bx	lr
 8000334:	e05d      	b.n	80003f2 <__divsi3+0x1c2>
 8000336:	0fca      	lsrs	r2, r1, #31
 8000338:	d000      	beq.n	800033c <__divsi3+0x10c>
 800033a:	4249      	negs	r1, r1
 800033c:	1003      	asrs	r3, r0, #32
 800033e:	d300      	bcc.n	8000342 <__divsi3+0x112>
 8000340:	4240      	negs	r0, r0
 8000342:	4053      	eors	r3, r2
 8000344:	2200      	movs	r2, #0
 8000346:	469c      	mov	ip, r3
 8000348:	0903      	lsrs	r3, r0, #4
 800034a:	428b      	cmp	r3, r1
 800034c:	d32d      	bcc.n	80003aa <__divsi3+0x17a>
 800034e:	0a03      	lsrs	r3, r0, #8
 8000350:	428b      	cmp	r3, r1
 8000352:	d312      	bcc.n	800037a <__divsi3+0x14a>
 8000354:	22fc      	movs	r2, #252	; 0xfc
 8000356:	0189      	lsls	r1, r1, #6
 8000358:	ba12      	rev	r2, r2
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d30c      	bcc.n	800037a <__divsi3+0x14a>
 8000360:	0189      	lsls	r1, r1, #6
 8000362:	1192      	asrs	r2, r2, #6
 8000364:	428b      	cmp	r3, r1
 8000366:	d308      	bcc.n	800037a <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	1192      	asrs	r2, r2, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d304      	bcc.n	800037a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	d03a      	beq.n	80003ea <__divsi3+0x1ba>
 8000374:	1192      	asrs	r2, r2, #6
 8000376:	e000      	b.n	800037a <__divsi3+0x14a>
 8000378:	0989      	lsrs	r1, r1, #6
 800037a:	09c3      	lsrs	r3, r0, #7
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x154>
 8000380:	01cb      	lsls	r3, r1, #7
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0983      	lsrs	r3, r0, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x160>
 800038c:	018b      	lsls	r3, r1, #6
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0943      	lsrs	r3, r0, #5
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x16c>
 8000398:	014b      	lsls	r3, r1, #5
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0903      	lsrs	r3, r0, #4
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x178>
 80003a4:	010b      	lsls	r3, r1, #4
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	08c3      	lsrs	r3, r0, #3
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x184>
 80003b0:	00cb      	lsls	r3, r1, #3
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0883      	lsrs	r3, r0, #2
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x190>
 80003bc:	008b      	lsls	r3, r1, #2
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	d2d9      	bcs.n	8000378 <__divsi3+0x148>
 80003c4:	0843      	lsrs	r3, r0, #1
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d301      	bcc.n	80003ce <__divsi3+0x19e>
 80003ca:	004b      	lsls	r3, r1, #1
 80003cc:	1ac0      	subs	r0, r0, r3
 80003ce:	4152      	adcs	r2, r2
 80003d0:	1a41      	subs	r1, r0, r1
 80003d2:	d200      	bcs.n	80003d6 <__divsi3+0x1a6>
 80003d4:	4601      	mov	r1, r0
 80003d6:	4663      	mov	r3, ip
 80003d8:	4152      	adcs	r2, r2
 80003da:	105b      	asrs	r3, r3, #1
 80003dc:	4610      	mov	r0, r2
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x1b4>
 80003e0:	4240      	negs	r0, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d500      	bpl.n	80003e8 <__divsi3+0x1b8>
 80003e6:	4249      	negs	r1, r1
 80003e8:	4770      	bx	lr
 80003ea:	4663      	mov	r3, ip
 80003ec:	105b      	asrs	r3, r3, #1
 80003ee:	d300      	bcc.n	80003f2 <__divsi3+0x1c2>
 80003f0:	4240      	negs	r0, r0
 80003f2:	b501      	push	{r0, lr}
 80003f4:	2000      	movs	r0, #0
 80003f6:	f000 f805 	bl	8000404 <__aeabi_idiv0>
 80003fa:	bd02      	pop	{r1, pc}

080003fc <__aeabi_idivmod>:
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d0f8      	beq.n	80003f2 <__divsi3+0x1c2>
 8000400:	e716      	b.n	8000230 <__divsi3>
 8000402:	4770      	bx	lr

08000404 <__aeabi_idiv0>:
 8000404:	4770      	bx	lr
 8000406:	46c0      	nop			; (mov r8, r8)

08000408 <__aeabi_cdrcmple>:
 8000408:	4684      	mov	ip, r0
 800040a:	1c10      	adds	r0, r2, #0
 800040c:	4662      	mov	r2, ip
 800040e:	468c      	mov	ip, r1
 8000410:	1c19      	adds	r1, r3, #0
 8000412:	4663      	mov	r3, ip
 8000414:	e000      	b.n	8000418 <__aeabi_cdcmpeq>
 8000416:	46c0      	nop			; (mov r8, r8)

08000418 <__aeabi_cdcmpeq>:
 8000418:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800041a:	f001 f83d 	bl	8001498 <__ledf2>
 800041e:	2800      	cmp	r0, #0
 8000420:	d401      	bmi.n	8000426 <__aeabi_cdcmpeq+0xe>
 8000422:	2100      	movs	r1, #0
 8000424:	42c8      	cmn	r0, r1
 8000426:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000428 <__aeabi_dcmpeq>:
 8000428:	b510      	push	{r4, lr}
 800042a:	f000 ff97 	bl	800135c <__eqdf2>
 800042e:	4240      	negs	r0, r0
 8000430:	3001      	adds	r0, #1
 8000432:	bd10      	pop	{r4, pc}

08000434 <__aeabi_dcmplt>:
 8000434:	b510      	push	{r4, lr}
 8000436:	f001 f82f 	bl	8001498 <__ledf2>
 800043a:	2800      	cmp	r0, #0
 800043c:	db01      	blt.n	8000442 <__aeabi_dcmplt+0xe>
 800043e:	2000      	movs	r0, #0
 8000440:	bd10      	pop	{r4, pc}
 8000442:	2001      	movs	r0, #1
 8000444:	bd10      	pop	{r4, pc}
 8000446:	46c0      	nop			; (mov r8, r8)

08000448 <__aeabi_dcmple>:
 8000448:	b510      	push	{r4, lr}
 800044a:	f001 f825 	bl	8001498 <__ledf2>
 800044e:	2800      	cmp	r0, #0
 8000450:	dd01      	ble.n	8000456 <__aeabi_dcmple+0xe>
 8000452:	2000      	movs	r0, #0
 8000454:	bd10      	pop	{r4, pc}
 8000456:	2001      	movs	r0, #1
 8000458:	bd10      	pop	{r4, pc}
 800045a:	46c0      	nop			; (mov r8, r8)

0800045c <__aeabi_dcmpgt>:
 800045c:	b510      	push	{r4, lr}
 800045e:	f000 ffb7 	bl	80013d0 <__gedf2>
 8000462:	2800      	cmp	r0, #0
 8000464:	dc01      	bgt.n	800046a <__aeabi_dcmpgt+0xe>
 8000466:	2000      	movs	r0, #0
 8000468:	bd10      	pop	{r4, pc}
 800046a:	2001      	movs	r0, #1
 800046c:	bd10      	pop	{r4, pc}
 800046e:	46c0      	nop			; (mov r8, r8)

08000470 <__aeabi_dcmpge>:
 8000470:	b510      	push	{r4, lr}
 8000472:	f000 ffad 	bl	80013d0 <__gedf2>
 8000476:	2800      	cmp	r0, #0
 8000478:	da01      	bge.n	800047e <__aeabi_dcmpge+0xe>
 800047a:	2000      	movs	r0, #0
 800047c:	bd10      	pop	{r4, pc}
 800047e:	2001      	movs	r0, #1
 8000480:	bd10      	pop	{r4, pc}
 8000482:	46c0      	nop			; (mov r8, r8)

08000484 <__aeabi_uldivmod>:
 8000484:	2b00      	cmp	r3, #0
 8000486:	d111      	bne.n	80004ac <__aeabi_uldivmod+0x28>
 8000488:	2a00      	cmp	r2, #0
 800048a:	d10f      	bne.n	80004ac <__aeabi_uldivmod+0x28>
 800048c:	2900      	cmp	r1, #0
 800048e:	d100      	bne.n	8000492 <__aeabi_uldivmod+0xe>
 8000490:	2800      	cmp	r0, #0
 8000492:	d002      	beq.n	800049a <__aeabi_uldivmod+0x16>
 8000494:	2100      	movs	r1, #0
 8000496:	43c9      	mvns	r1, r1
 8000498:	1c08      	adds	r0, r1, #0
 800049a:	b407      	push	{r0, r1, r2}
 800049c:	4802      	ldr	r0, [pc, #8]	; (80004a8 <__aeabi_uldivmod+0x24>)
 800049e:	a102      	add	r1, pc, #8	; (adr r1, 80004a8 <__aeabi_uldivmod+0x24>)
 80004a0:	1840      	adds	r0, r0, r1
 80004a2:	9002      	str	r0, [sp, #8]
 80004a4:	bd03      	pop	{r0, r1, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)
 80004a8:	ffffff5d 	.word	0xffffff5d
 80004ac:	b403      	push	{r0, r1}
 80004ae:	4668      	mov	r0, sp
 80004b0:	b501      	push	{r0, lr}
 80004b2:	9802      	ldr	r0, [sp, #8]
 80004b4:	f000 f84e 	bl	8000554 <__udivmoddi4>
 80004b8:	9b01      	ldr	r3, [sp, #4]
 80004ba:	469e      	mov	lr, r3
 80004bc:	b002      	add	sp, #8
 80004be:	bc0c      	pop	{r2, r3}
 80004c0:	4770      	bx	lr
 80004c2:	46c0      	nop			; (mov r8, r8)

080004c4 <__aeabi_lmul>:
 80004c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004c6:	46ce      	mov	lr, r9
 80004c8:	4647      	mov	r7, r8
 80004ca:	0415      	lsls	r5, r2, #16
 80004cc:	0c2d      	lsrs	r5, r5, #16
 80004ce:	002e      	movs	r6, r5
 80004d0:	b580      	push	{r7, lr}
 80004d2:	0407      	lsls	r7, r0, #16
 80004d4:	0c14      	lsrs	r4, r2, #16
 80004d6:	0c3f      	lsrs	r7, r7, #16
 80004d8:	4699      	mov	r9, r3
 80004da:	0c03      	lsrs	r3, r0, #16
 80004dc:	437e      	muls	r6, r7
 80004de:	435d      	muls	r5, r3
 80004e0:	4367      	muls	r7, r4
 80004e2:	4363      	muls	r3, r4
 80004e4:	197f      	adds	r7, r7, r5
 80004e6:	0c34      	lsrs	r4, r6, #16
 80004e8:	19e4      	adds	r4, r4, r7
 80004ea:	469c      	mov	ip, r3
 80004ec:	42a5      	cmp	r5, r4
 80004ee:	d903      	bls.n	80004f8 <__aeabi_lmul+0x34>
 80004f0:	2380      	movs	r3, #128	; 0x80
 80004f2:	025b      	lsls	r3, r3, #9
 80004f4:	4698      	mov	r8, r3
 80004f6:	44c4      	add	ip, r8
 80004f8:	464b      	mov	r3, r9
 80004fa:	4351      	muls	r1, r2
 80004fc:	4343      	muls	r3, r0
 80004fe:	0436      	lsls	r6, r6, #16
 8000500:	0c36      	lsrs	r6, r6, #16
 8000502:	0c25      	lsrs	r5, r4, #16
 8000504:	0424      	lsls	r4, r4, #16
 8000506:	4465      	add	r5, ip
 8000508:	19a4      	adds	r4, r4, r6
 800050a:	1859      	adds	r1, r3, r1
 800050c:	1949      	adds	r1, r1, r5
 800050e:	0020      	movs	r0, r4
 8000510:	bc0c      	pop	{r2, r3}
 8000512:	4690      	mov	r8, r2
 8000514:	4699      	mov	r9, r3
 8000516:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000518 <__aeabi_d2uiz>:
 8000518:	b570      	push	{r4, r5, r6, lr}
 800051a:	2200      	movs	r2, #0
 800051c:	4b0c      	ldr	r3, [pc, #48]	; (8000550 <__aeabi_d2uiz+0x38>)
 800051e:	0004      	movs	r4, r0
 8000520:	000d      	movs	r5, r1
 8000522:	f7ff ffa5 	bl	8000470 <__aeabi_dcmpge>
 8000526:	2800      	cmp	r0, #0
 8000528:	d104      	bne.n	8000534 <__aeabi_d2uiz+0x1c>
 800052a:	0020      	movs	r0, r4
 800052c:	0029      	movs	r1, r5
 800052e:	f001 fdab 	bl	8002088 <__aeabi_d2iz>
 8000532:	bd70      	pop	{r4, r5, r6, pc}
 8000534:	4b06      	ldr	r3, [pc, #24]	; (8000550 <__aeabi_d2uiz+0x38>)
 8000536:	2200      	movs	r2, #0
 8000538:	0020      	movs	r0, r4
 800053a:	0029      	movs	r1, r5
 800053c:	f001 fa8e 	bl	8001a5c <__aeabi_dsub>
 8000540:	f001 fda2 	bl	8002088 <__aeabi_d2iz>
 8000544:	2380      	movs	r3, #128	; 0x80
 8000546:	061b      	lsls	r3, r3, #24
 8000548:	469c      	mov	ip, r3
 800054a:	4460      	add	r0, ip
 800054c:	e7f1      	b.n	8000532 <__aeabi_d2uiz+0x1a>
 800054e:	46c0      	nop			; (mov r8, r8)
 8000550:	41e00000 	.word	0x41e00000

08000554 <__udivmoddi4>:
 8000554:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000556:	4657      	mov	r7, sl
 8000558:	464e      	mov	r6, r9
 800055a:	4645      	mov	r5, r8
 800055c:	46de      	mov	lr, fp
 800055e:	b5e0      	push	{r5, r6, r7, lr}
 8000560:	0004      	movs	r4, r0
 8000562:	b083      	sub	sp, #12
 8000564:	000d      	movs	r5, r1
 8000566:	4692      	mov	sl, r2
 8000568:	4699      	mov	r9, r3
 800056a:	428b      	cmp	r3, r1
 800056c:	d82f      	bhi.n	80005ce <__udivmoddi4+0x7a>
 800056e:	d02c      	beq.n	80005ca <__udivmoddi4+0x76>
 8000570:	4649      	mov	r1, r9
 8000572:	4650      	mov	r0, sl
 8000574:	f001 fe54 	bl	8002220 <__clzdi2>
 8000578:	0029      	movs	r1, r5
 800057a:	0006      	movs	r6, r0
 800057c:	0020      	movs	r0, r4
 800057e:	f001 fe4f 	bl	8002220 <__clzdi2>
 8000582:	1a33      	subs	r3, r6, r0
 8000584:	4698      	mov	r8, r3
 8000586:	3b20      	subs	r3, #32
 8000588:	469b      	mov	fp, r3
 800058a:	d500      	bpl.n	800058e <__udivmoddi4+0x3a>
 800058c:	e074      	b.n	8000678 <__udivmoddi4+0x124>
 800058e:	4653      	mov	r3, sl
 8000590:	465a      	mov	r2, fp
 8000592:	4093      	lsls	r3, r2
 8000594:	001f      	movs	r7, r3
 8000596:	4653      	mov	r3, sl
 8000598:	4642      	mov	r2, r8
 800059a:	4093      	lsls	r3, r2
 800059c:	001e      	movs	r6, r3
 800059e:	42af      	cmp	r7, r5
 80005a0:	d829      	bhi.n	80005f6 <__udivmoddi4+0xa2>
 80005a2:	d026      	beq.n	80005f2 <__udivmoddi4+0x9e>
 80005a4:	465b      	mov	r3, fp
 80005a6:	1ba4      	subs	r4, r4, r6
 80005a8:	41bd      	sbcs	r5, r7
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	da00      	bge.n	80005b0 <__udivmoddi4+0x5c>
 80005ae:	e079      	b.n	80006a4 <__udivmoddi4+0x150>
 80005b0:	2200      	movs	r2, #0
 80005b2:	2300      	movs	r3, #0
 80005b4:	9200      	str	r2, [sp, #0]
 80005b6:	9301      	str	r3, [sp, #4]
 80005b8:	2301      	movs	r3, #1
 80005ba:	465a      	mov	r2, fp
 80005bc:	4093      	lsls	r3, r2
 80005be:	9301      	str	r3, [sp, #4]
 80005c0:	2301      	movs	r3, #1
 80005c2:	4642      	mov	r2, r8
 80005c4:	4093      	lsls	r3, r2
 80005c6:	9300      	str	r3, [sp, #0]
 80005c8:	e019      	b.n	80005fe <__udivmoddi4+0xaa>
 80005ca:	4282      	cmp	r2, r0
 80005cc:	d9d0      	bls.n	8000570 <__udivmoddi4+0x1c>
 80005ce:	2200      	movs	r2, #0
 80005d0:	2300      	movs	r3, #0
 80005d2:	9200      	str	r2, [sp, #0]
 80005d4:	9301      	str	r3, [sp, #4]
 80005d6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d001      	beq.n	80005e0 <__udivmoddi4+0x8c>
 80005dc:	601c      	str	r4, [r3, #0]
 80005de:	605d      	str	r5, [r3, #4]
 80005e0:	9800      	ldr	r0, [sp, #0]
 80005e2:	9901      	ldr	r1, [sp, #4]
 80005e4:	b003      	add	sp, #12
 80005e6:	bc3c      	pop	{r2, r3, r4, r5}
 80005e8:	4690      	mov	r8, r2
 80005ea:	4699      	mov	r9, r3
 80005ec:	46a2      	mov	sl, r4
 80005ee:	46ab      	mov	fp, r5
 80005f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005f2:	42a3      	cmp	r3, r4
 80005f4:	d9d6      	bls.n	80005a4 <__udivmoddi4+0x50>
 80005f6:	2200      	movs	r2, #0
 80005f8:	2300      	movs	r3, #0
 80005fa:	9200      	str	r2, [sp, #0]
 80005fc:	9301      	str	r3, [sp, #4]
 80005fe:	4643      	mov	r3, r8
 8000600:	2b00      	cmp	r3, #0
 8000602:	d0e8      	beq.n	80005d6 <__udivmoddi4+0x82>
 8000604:	07fb      	lsls	r3, r7, #31
 8000606:	0872      	lsrs	r2, r6, #1
 8000608:	431a      	orrs	r2, r3
 800060a:	4646      	mov	r6, r8
 800060c:	087b      	lsrs	r3, r7, #1
 800060e:	e00e      	b.n	800062e <__udivmoddi4+0xda>
 8000610:	42ab      	cmp	r3, r5
 8000612:	d101      	bne.n	8000618 <__udivmoddi4+0xc4>
 8000614:	42a2      	cmp	r2, r4
 8000616:	d80c      	bhi.n	8000632 <__udivmoddi4+0xde>
 8000618:	1aa4      	subs	r4, r4, r2
 800061a:	419d      	sbcs	r5, r3
 800061c:	2001      	movs	r0, #1
 800061e:	1924      	adds	r4, r4, r4
 8000620:	416d      	adcs	r5, r5
 8000622:	2100      	movs	r1, #0
 8000624:	3e01      	subs	r6, #1
 8000626:	1824      	adds	r4, r4, r0
 8000628:	414d      	adcs	r5, r1
 800062a:	2e00      	cmp	r6, #0
 800062c:	d006      	beq.n	800063c <__udivmoddi4+0xe8>
 800062e:	42ab      	cmp	r3, r5
 8000630:	d9ee      	bls.n	8000610 <__udivmoddi4+0xbc>
 8000632:	3e01      	subs	r6, #1
 8000634:	1924      	adds	r4, r4, r4
 8000636:	416d      	adcs	r5, r5
 8000638:	2e00      	cmp	r6, #0
 800063a:	d1f8      	bne.n	800062e <__udivmoddi4+0xda>
 800063c:	465b      	mov	r3, fp
 800063e:	9800      	ldr	r0, [sp, #0]
 8000640:	9901      	ldr	r1, [sp, #4]
 8000642:	1900      	adds	r0, r0, r4
 8000644:	4169      	adcs	r1, r5
 8000646:	2b00      	cmp	r3, #0
 8000648:	db22      	blt.n	8000690 <__udivmoddi4+0x13c>
 800064a:	002b      	movs	r3, r5
 800064c:	465a      	mov	r2, fp
 800064e:	40d3      	lsrs	r3, r2
 8000650:	002a      	movs	r2, r5
 8000652:	4644      	mov	r4, r8
 8000654:	40e2      	lsrs	r2, r4
 8000656:	001c      	movs	r4, r3
 8000658:	465b      	mov	r3, fp
 800065a:	0015      	movs	r5, r2
 800065c:	2b00      	cmp	r3, #0
 800065e:	db2c      	blt.n	80006ba <__udivmoddi4+0x166>
 8000660:	0026      	movs	r6, r4
 8000662:	409e      	lsls	r6, r3
 8000664:	0033      	movs	r3, r6
 8000666:	0026      	movs	r6, r4
 8000668:	4647      	mov	r7, r8
 800066a:	40be      	lsls	r6, r7
 800066c:	0032      	movs	r2, r6
 800066e:	1a80      	subs	r0, r0, r2
 8000670:	4199      	sbcs	r1, r3
 8000672:	9000      	str	r0, [sp, #0]
 8000674:	9101      	str	r1, [sp, #4]
 8000676:	e7ae      	b.n	80005d6 <__udivmoddi4+0x82>
 8000678:	4642      	mov	r2, r8
 800067a:	2320      	movs	r3, #32
 800067c:	1a9b      	subs	r3, r3, r2
 800067e:	4652      	mov	r2, sl
 8000680:	40da      	lsrs	r2, r3
 8000682:	4641      	mov	r1, r8
 8000684:	0013      	movs	r3, r2
 8000686:	464a      	mov	r2, r9
 8000688:	408a      	lsls	r2, r1
 800068a:	0017      	movs	r7, r2
 800068c:	431f      	orrs	r7, r3
 800068e:	e782      	b.n	8000596 <__udivmoddi4+0x42>
 8000690:	4642      	mov	r2, r8
 8000692:	2320      	movs	r3, #32
 8000694:	1a9b      	subs	r3, r3, r2
 8000696:	002a      	movs	r2, r5
 8000698:	4646      	mov	r6, r8
 800069a:	409a      	lsls	r2, r3
 800069c:	0023      	movs	r3, r4
 800069e:	40f3      	lsrs	r3, r6
 80006a0:	4313      	orrs	r3, r2
 80006a2:	e7d5      	b.n	8000650 <__udivmoddi4+0xfc>
 80006a4:	4642      	mov	r2, r8
 80006a6:	2320      	movs	r3, #32
 80006a8:	2100      	movs	r1, #0
 80006aa:	1a9b      	subs	r3, r3, r2
 80006ac:	2200      	movs	r2, #0
 80006ae:	9100      	str	r1, [sp, #0]
 80006b0:	9201      	str	r2, [sp, #4]
 80006b2:	2201      	movs	r2, #1
 80006b4:	40da      	lsrs	r2, r3
 80006b6:	9201      	str	r2, [sp, #4]
 80006b8:	e782      	b.n	80005c0 <__udivmoddi4+0x6c>
 80006ba:	4642      	mov	r2, r8
 80006bc:	2320      	movs	r3, #32
 80006be:	0026      	movs	r6, r4
 80006c0:	1a9b      	subs	r3, r3, r2
 80006c2:	40de      	lsrs	r6, r3
 80006c4:	002f      	movs	r7, r5
 80006c6:	46b4      	mov	ip, r6
 80006c8:	4097      	lsls	r7, r2
 80006ca:	4666      	mov	r6, ip
 80006cc:	003b      	movs	r3, r7
 80006ce:	4333      	orrs	r3, r6
 80006d0:	e7c9      	b.n	8000666 <__udivmoddi4+0x112>
 80006d2:	46c0      	nop			; (mov r8, r8)

080006d4 <__aeabi_dadd>:
 80006d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006d6:	4645      	mov	r5, r8
 80006d8:	46de      	mov	lr, fp
 80006da:	4657      	mov	r7, sl
 80006dc:	464e      	mov	r6, r9
 80006de:	030c      	lsls	r4, r1, #12
 80006e0:	b5e0      	push	{r5, r6, r7, lr}
 80006e2:	004e      	lsls	r6, r1, #1
 80006e4:	0fc9      	lsrs	r1, r1, #31
 80006e6:	4688      	mov	r8, r1
 80006e8:	000d      	movs	r5, r1
 80006ea:	0a61      	lsrs	r1, r4, #9
 80006ec:	0f44      	lsrs	r4, r0, #29
 80006ee:	430c      	orrs	r4, r1
 80006f0:	00c7      	lsls	r7, r0, #3
 80006f2:	0319      	lsls	r1, r3, #12
 80006f4:	0058      	lsls	r0, r3, #1
 80006f6:	0fdb      	lsrs	r3, r3, #31
 80006f8:	469b      	mov	fp, r3
 80006fa:	0a4b      	lsrs	r3, r1, #9
 80006fc:	0f51      	lsrs	r1, r2, #29
 80006fe:	430b      	orrs	r3, r1
 8000700:	0d76      	lsrs	r6, r6, #21
 8000702:	0d40      	lsrs	r0, r0, #21
 8000704:	0019      	movs	r1, r3
 8000706:	00d2      	lsls	r2, r2, #3
 8000708:	45d8      	cmp	r8, fp
 800070a:	d100      	bne.n	800070e <__aeabi_dadd+0x3a>
 800070c:	e0ae      	b.n	800086c <__aeabi_dadd+0x198>
 800070e:	1a35      	subs	r5, r6, r0
 8000710:	2d00      	cmp	r5, #0
 8000712:	dc00      	bgt.n	8000716 <__aeabi_dadd+0x42>
 8000714:	e0f6      	b.n	8000904 <__aeabi_dadd+0x230>
 8000716:	2800      	cmp	r0, #0
 8000718:	d10f      	bne.n	800073a <__aeabi_dadd+0x66>
 800071a:	4313      	orrs	r3, r2
 800071c:	d100      	bne.n	8000720 <__aeabi_dadd+0x4c>
 800071e:	e0db      	b.n	80008d8 <__aeabi_dadd+0x204>
 8000720:	1e6b      	subs	r3, r5, #1
 8000722:	2b00      	cmp	r3, #0
 8000724:	d000      	beq.n	8000728 <__aeabi_dadd+0x54>
 8000726:	e137      	b.n	8000998 <__aeabi_dadd+0x2c4>
 8000728:	1aba      	subs	r2, r7, r2
 800072a:	4297      	cmp	r7, r2
 800072c:	41bf      	sbcs	r7, r7
 800072e:	1a64      	subs	r4, r4, r1
 8000730:	427f      	negs	r7, r7
 8000732:	1be4      	subs	r4, r4, r7
 8000734:	2601      	movs	r6, #1
 8000736:	0017      	movs	r7, r2
 8000738:	e024      	b.n	8000784 <__aeabi_dadd+0xb0>
 800073a:	4bc6      	ldr	r3, [pc, #792]	; (8000a54 <__aeabi_dadd+0x380>)
 800073c:	429e      	cmp	r6, r3
 800073e:	d04d      	beq.n	80007dc <__aeabi_dadd+0x108>
 8000740:	2380      	movs	r3, #128	; 0x80
 8000742:	041b      	lsls	r3, r3, #16
 8000744:	4319      	orrs	r1, r3
 8000746:	2d38      	cmp	r5, #56	; 0x38
 8000748:	dd00      	ble.n	800074c <__aeabi_dadd+0x78>
 800074a:	e107      	b.n	800095c <__aeabi_dadd+0x288>
 800074c:	2d1f      	cmp	r5, #31
 800074e:	dd00      	ble.n	8000752 <__aeabi_dadd+0x7e>
 8000750:	e138      	b.n	80009c4 <__aeabi_dadd+0x2f0>
 8000752:	2020      	movs	r0, #32
 8000754:	1b43      	subs	r3, r0, r5
 8000756:	469a      	mov	sl, r3
 8000758:	000b      	movs	r3, r1
 800075a:	4650      	mov	r0, sl
 800075c:	4083      	lsls	r3, r0
 800075e:	4699      	mov	r9, r3
 8000760:	0013      	movs	r3, r2
 8000762:	4648      	mov	r0, r9
 8000764:	40eb      	lsrs	r3, r5
 8000766:	4318      	orrs	r0, r3
 8000768:	0003      	movs	r3, r0
 800076a:	4650      	mov	r0, sl
 800076c:	4082      	lsls	r2, r0
 800076e:	1e50      	subs	r0, r2, #1
 8000770:	4182      	sbcs	r2, r0
 8000772:	40e9      	lsrs	r1, r5
 8000774:	431a      	orrs	r2, r3
 8000776:	1aba      	subs	r2, r7, r2
 8000778:	1a61      	subs	r1, r4, r1
 800077a:	4297      	cmp	r7, r2
 800077c:	41a4      	sbcs	r4, r4
 800077e:	0017      	movs	r7, r2
 8000780:	4264      	negs	r4, r4
 8000782:	1b0c      	subs	r4, r1, r4
 8000784:	0223      	lsls	r3, r4, #8
 8000786:	d562      	bpl.n	800084e <__aeabi_dadd+0x17a>
 8000788:	0264      	lsls	r4, r4, #9
 800078a:	0a65      	lsrs	r5, r4, #9
 800078c:	2d00      	cmp	r5, #0
 800078e:	d100      	bne.n	8000792 <__aeabi_dadd+0xbe>
 8000790:	e0df      	b.n	8000952 <__aeabi_dadd+0x27e>
 8000792:	0028      	movs	r0, r5
 8000794:	f001 fd26 	bl	80021e4 <__clzsi2>
 8000798:	0003      	movs	r3, r0
 800079a:	3b08      	subs	r3, #8
 800079c:	2b1f      	cmp	r3, #31
 800079e:	dd00      	ble.n	80007a2 <__aeabi_dadd+0xce>
 80007a0:	e0d2      	b.n	8000948 <__aeabi_dadd+0x274>
 80007a2:	2220      	movs	r2, #32
 80007a4:	003c      	movs	r4, r7
 80007a6:	1ad2      	subs	r2, r2, r3
 80007a8:	409d      	lsls	r5, r3
 80007aa:	40d4      	lsrs	r4, r2
 80007ac:	409f      	lsls	r7, r3
 80007ae:	4325      	orrs	r5, r4
 80007b0:	429e      	cmp	r6, r3
 80007b2:	dd00      	ble.n	80007b6 <__aeabi_dadd+0xe2>
 80007b4:	e0c4      	b.n	8000940 <__aeabi_dadd+0x26c>
 80007b6:	1b9e      	subs	r6, r3, r6
 80007b8:	1c73      	adds	r3, r6, #1
 80007ba:	2b1f      	cmp	r3, #31
 80007bc:	dd00      	ble.n	80007c0 <__aeabi_dadd+0xec>
 80007be:	e0f1      	b.n	80009a4 <__aeabi_dadd+0x2d0>
 80007c0:	2220      	movs	r2, #32
 80007c2:	0038      	movs	r0, r7
 80007c4:	0029      	movs	r1, r5
 80007c6:	1ad2      	subs	r2, r2, r3
 80007c8:	40d8      	lsrs	r0, r3
 80007ca:	4091      	lsls	r1, r2
 80007cc:	4097      	lsls	r7, r2
 80007ce:	002c      	movs	r4, r5
 80007d0:	4301      	orrs	r1, r0
 80007d2:	1e78      	subs	r0, r7, #1
 80007d4:	4187      	sbcs	r7, r0
 80007d6:	40dc      	lsrs	r4, r3
 80007d8:	2600      	movs	r6, #0
 80007da:	430f      	orrs	r7, r1
 80007dc:	077b      	lsls	r3, r7, #29
 80007de:	d009      	beq.n	80007f4 <__aeabi_dadd+0x120>
 80007e0:	230f      	movs	r3, #15
 80007e2:	403b      	ands	r3, r7
 80007e4:	2b04      	cmp	r3, #4
 80007e6:	d005      	beq.n	80007f4 <__aeabi_dadd+0x120>
 80007e8:	1d3b      	adds	r3, r7, #4
 80007ea:	42bb      	cmp	r3, r7
 80007ec:	41bf      	sbcs	r7, r7
 80007ee:	427f      	negs	r7, r7
 80007f0:	19e4      	adds	r4, r4, r7
 80007f2:	001f      	movs	r7, r3
 80007f4:	0223      	lsls	r3, r4, #8
 80007f6:	d52c      	bpl.n	8000852 <__aeabi_dadd+0x17e>
 80007f8:	4b96      	ldr	r3, [pc, #600]	; (8000a54 <__aeabi_dadd+0x380>)
 80007fa:	3601      	adds	r6, #1
 80007fc:	429e      	cmp	r6, r3
 80007fe:	d100      	bne.n	8000802 <__aeabi_dadd+0x12e>
 8000800:	e09a      	b.n	8000938 <__aeabi_dadd+0x264>
 8000802:	4645      	mov	r5, r8
 8000804:	4b94      	ldr	r3, [pc, #592]	; (8000a58 <__aeabi_dadd+0x384>)
 8000806:	08ff      	lsrs	r7, r7, #3
 8000808:	401c      	ands	r4, r3
 800080a:	0760      	lsls	r0, r4, #29
 800080c:	0576      	lsls	r6, r6, #21
 800080e:	0264      	lsls	r4, r4, #9
 8000810:	4307      	orrs	r7, r0
 8000812:	0b24      	lsrs	r4, r4, #12
 8000814:	0d76      	lsrs	r6, r6, #21
 8000816:	2100      	movs	r1, #0
 8000818:	0324      	lsls	r4, r4, #12
 800081a:	0b23      	lsrs	r3, r4, #12
 800081c:	0d0c      	lsrs	r4, r1, #20
 800081e:	4a8f      	ldr	r2, [pc, #572]	; (8000a5c <__aeabi_dadd+0x388>)
 8000820:	0524      	lsls	r4, r4, #20
 8000822:	431c      	orrs	r4, r3
 8000824:	4014      	ands	r4, r2
 8000826:	0533      	lsls	r3, r6, #20
 8000828:	4323      	orrs	r3, r4
 800082a:	005b      	lsls	r3, r3, #1
 800082c:	07ed      	lsls	r5, r5, #31
 800082e:	085b      	lsrs	r3, r3, #1
 8000830:	432b      	orrs	r3, r5
 8000832:	0038      	movs	r0, r7
 8000834:	0019      	movs	r1, r3
 8000836:	bc3c      	pop	{r2, r3, r4, r5}
 8000838:	4690      	mov	r8, r2
 800083a:	4699      	mov	r9, r3
 800083c:	46a2      	mov	sl, r4
 800083e:	46ab      	mov	fp, r5
 8000840:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000842:	4664      	mov	r4, ip
 8000844:	4304      	orrs	r4, r0
 8000846:	d100      	bne.n	800084a <__aeabi_dadd+0x176>
 8000848:	e211      	b.n	8000c6e <__aeabi_dadd+0x59a>
 800084a:	0004      	movs	r4, r0
 800084c:	4667      	mov	r7, ip
 800084e:	077b      	lsls	r3, r7, #29
 8000850:	d1c6      	bne.n	80007e0 <__aeabi_dadd+0x10c>
 8000852:	4645      	mov	r5, r8
 8000854:	0760      	lsls	r0, r4, #29
 8000856:	08ff      	lsrs	r7, r7, #3
 8000858:	4307      	orrs	r7, r0
 800085a:	08e4      	lsrs	r4, r4, #3
 800085c:	4b7d      	ldr	r3, [pc, #500]	; (8000a54 <__aeabi_dadd+0x380>)
 800085e:	429e      	cmp	r6, r3
 8000860:	d030      	beq.n	80008c4 <__aeabi_dadd+0x1f0>
 8000862:	0324      	lsls	r4, r4, #12
 8000864:	0576      	lsls	r6, r6, #21
 8000866:	0b24      	lsrs	r4, r4, #12
 8000868:	0d76      	lsrs	r6, r6, #21
 800086a:	e7d4      	b.n	8000816 <__aeabi_dadd+0x142>
 800086c:	1a33      	subs	r3, r6, r0
 800086e:	469a      	mov	sl, r3
 8000870:	2b00      	cmp	r3, #0
 8000872:	dd78      	ble.n	8000966 <__aeabi_dadd+0x292>
 8000874:	2800      	cmp	r0, #0
 8000876:	d031      	beq.n	80008dc <__aeabi_dadd+0x208>
 8000878:	4876      	ldr	r0, [pc, #472]	; (8000a54 <__aeabi_dadd+0x380>)
 800087a:	4286      	cmp	r6, r0
 800087c:	d0ae      	beq.n	80007dc <__aeabi_dadd+0x108>
 800087e:	2080      	movs	r0, #128	; 0x80
 8000880:	0400      	lsls	r0, r0, #16
 8000882:	4301      	orrs	r1, r0
 8000884:	4653      	mov	r3, sl
 8000886:	2b38      	cmp	r3, #56	; 0x38
 8000888:	dc00      	bgt.n	800088c <__aeabi_dadd+0x1b8>
 800088a:	e0e9      	b.n	8000a60 <__aeabi_dadd+0x38c>
 800088c:	430a      	orrs	r2, r1
 800088e:	1e51      	subs	r1, r2, #1
 8000890:	418a      	sbcs	r2, r1
 8000892:	2100      	movs	r1, #0
 8000894:	19d2      	adds	r2, r2, r7
 8000896:	42ba      	cmp	r2, r7
 8000898:	41bf      	sbcs	r7, r7
 800089a:	1909      	adds	r1, r1, r4
 800089c:	427c      	negs	r4, r7
 800089e:	0017      	movs	r7, r2
 80008a0:	190c      	adds	r4, r1, r4
 80008a2:	0223      	lsls	r3, r4, #8
 80008a4:	d5d3      	bpl.n	800084e <__aeabi_dadd+0x17a>
 80008a6:	4b6b      	ldr	r3, [pc, #428]	; (8000a54 <__aeabi_dadd+0x380>)
 80008a8:	3601      	adds	r6, #1
 80008aa:	429e      	cmp	r6, r3
 80008ac:	d100      	bne.n	80008b0 <__aeabi_dadd+0x1dc>
 80008ae:	e13a      	b.n	8000b26 <__aeabi_dadd+0x452>
 80008b0:	2001      	movs	r0, #1
 80008b2:	4b69      	ldr	r3, [pc, #420]	; (8000a58 <__aeabi_dadd+0x384>)
 80008b4:	401c      	ands	r4, r3
 80008b6:	087b      	lsrs	r3, r7, #1
 80008b8:	4007      	ands	r7, r0
 80008ba:	431f      	orrs	r7, r3
 80008bc:	07e0      	lsls	r0, r4, #31
 80008be:	4307      	orrs	r7, r0
 80008c0:	0864      	lsrs	r4, r4, #1
 80008c2:	e78b      	b.n	80007dc <__aeabi_dadd+0x108>
 80008c4:	0023      	movs	r3, r4
 80008c6:	433b      	orrs	r3, r7
 80008c8:	d100      	bne.n	80008cc <__aeabi_dadd+0x1f8>
 80008ca:	e1cb      	b.n	8000c64 <__aeabi_dadd+0x590>
 80008cc:	2280      	movs	r2, #128	; 0x80
 80008ce:	0312      	lsls	r2, r2, #12
 80008d0:	4314      	orrs	r4, r2
 80008d2:	0324      	lsls	r4, r4, #12
 80008d4:	0b24      	lsrs	r4, r4, #12
 80008d6:	e79e      	b.n	8000816 <__aeabi_dadd+0x142>
 80008d8:	002e      	movs	r6, r5
 80008da:	e77f      	b.n	80007dc <__aeabi_dadd+0x108>
 80008dc:	0008      	movs	r0, r1
 80008de:	4310      	orrs	r0, r2
 80008e0:	d100      	bne.n	80008e4 <__aeabi_dadd+0x210>
 80008e2:	e0b4      	b.n	8000a4e <__aeabi_dadd+0x37a>
 80008e4:	1e58      	subs	r0, r3, #1
 80008e6:	2800      	cmp	r0, #0
 80008e8:	d000      	beq.n	80008ec <__aeabi_dadd+0x218>
 80008ea:	e0de      	b.n	8000aaa <__aeabi_dadd+0x3d6>
 80008ec:	18ba      	adds	r2, r7, r2
 80008ee:	42ba      	cmp	r2, r7
 80008f0:	419b      	sbcs	r3, r3
 80008f2:	1864      	adds	r4, r4, r1
 80008f4:	425b      	negs	r3, r3
 80008f6:	18e4      	adds	r4, r4, r3
 80008f8:	0017      	movs	r7, r2
 80008fa:	2601      	movs	r6, #1
 80008fc:	0223      	lsls	r3, r4, #8
 80008fe:	d5a6      	bpl.n	800084e <__aeabi_dadd+0x17a>
 8000900:	2602      	movs	r6, #2
 8000902:	e7d5      	b.n	80008b0 <__aeabi_dadd+0x1dc>
 8000904:	2d00      	cmp	r5, #0
 8000906:	d16e      	bne.n	80009e6 <__aeabi_dadd+0x312>
 8000908:	1c70      	adds	r0, r6, #1
 800090a:	0540      	lsls	r0, r0, #21
 800090c:	0d40      	lsrs	r0, r0, #21
 800090e:	2801      	cmp	r0, #1
 8000910:	dc00      	bgt.n	8000914 <__aeabi_dadd+0x240>
 8000912:	e0f9      	b.n	8000b08 <__aeabi_dadd+0x434>
 8000914:	1ab8      	subs	r0, r7, r2
 8000916:	4684      	mov	ip, r0
 8000918:	4287      	cmp	r7, r0
 800091a:	4180      	sbcs	r0, r0
 800091c:	1ae5      	subs	r5, r4, r3
 800091e:	4240      	negs	r0, r0
 8000920:	1a2d      	subs	r5, r5, r0
 8000922:	0228      	lsls	r0, r5, #8
 8000924:	d400      	bmi.n	8000928 <__aeabi_dadd+0x254>
 8000926:	e089      	b.n	8000a3c <__aeabi_dadd+0x368>
 8000928:	1bd7      	subs	r7, r2, r7
 800092a:	42ba      	cmp	r2, r7
 800092c:	4192      	sbcs	r2, r2
 800092e:	1b1c      	subs	r4, r3, r4
 8000930:	4252      	negs	r2, r2
 8000932:	1aa5      	subs	r5, r4, r2
 8000934:	46d8      	mov	r8, fp
 8000936:	e729      	b.n	800078c <__aeabi_dadd+0xb8>
 8000938:	4645      	mov	r5, r8
 800093a:	2400      	movs	r4, #0
 800093c:	2700      	movs	r7, #0
 800093e:	e76a      	b.n	8000816 <__aeabi_dadd+0x142>
 8000940:	4c45      	ldr	r4, [pc, #276]	; (8000a58 <__aeabi_dadd+0x384>)
 8000942:	1af6      	subs	r6, r6, r3
 8000944:	402c      	ands	r4, r5
 8000946:	e749      	b.n	80007dc <__aeabi_dadd+0x108>
 8000948:	003d      	movs	r5, r7
 800094a:	3828      	subs	r0, #40	; 0x28
 800094c:	4085      	lsls	r5, r0
 800094e:	2700      	movs	r7, #0
 8000950:	e72e      	b.n	80007b0 <__aeabi_dadd+0xdc>
 8000952:	0038      	movs	r0, r7
 8000954:	f001 fc46 	bl	80021e4 <__clzsi2>
 8000958:	3020      	adds	r0, #32
 800095a:	e71d      	b.n	8000798 <__aeabi_dadd+0xc4>
 800095c:	430a      	orrs	r2, r1
 800095e:	1e51      	subs	r1, r2, #1
 8000960:	418a      	sbcs	r2, r1
 8000962:	2100      	movs	r1, #0
 8000964:	e707      	b.n	8000776 <__aeabi_dadd+0xa2>
 8000966:	2b00      	cmp	r3, #0
 8000968:	d000      	beq.n	800096c <__aeabi_dadd+0x298>
 800096a:	e0f3      	b.n	8000b54 <__aeabi_dadd+0x480>
 800096c:	1c70      	adds	r0, r6, #1
 800096e:	0543      	lsls	r3, r0, #21
 8000970:	0d5b      	lsrs	r3, r3, #21
 8000972:	2b01      	cmp	r3, #1
 8000974:	dc00      	bgt.n	8000978 <__aeabi_dadd+0x2a4>
 8000976:	e0ad      	b.n	8000ad4 <__aeabi_dadd+0x400>
 8000978:	4b36      	ldr	r3, [pc, #216]	; (8000a54 <__aeabi_dadd+0x380>)
 800097a:	4298      	cmp	r0, r3
 800097c:	d100      	bne.n	8000980 <__aeabi_dadd+0x2ac>
 800097e:	e0d1      	b.n	8000b24 <__aeabi_dadd+0x450>
 8000980:	18ba      	adds	r2, r7, r2
 8000982:	42ba      	cmp	r2, r7
 8000984:	41bf      	sbcs	r7, r7
 8000986:	1864      	adds	r4, r4, r1
 8000988:	427f      	negs	r7, r7
 800098a:	19e4      	adds	r4, r4, r7
 800098c:	07e7      	lsls	r7, r4, #31
 800098e:	0852      	lsrs	r2, r2, #1
 8000990:	4317      	orrs	r7, r2
 8000992:	0864      	lsrs	r4, r4, #1
 8000994:	0006      	movs	r6, r0
 8000996:	e721      	b.n	80007dc <__aeabi_dadd+0x108>
 8000998:	482e      	ldr	r0, [pc, #184]	; (8000a54 <__aeabi_dadd+0x380>)
 800099a:	4285      	cmp	r5, r0
 800099c:	d100      	bne.n	80009a0 <__aeabi_dadd+0x2cc>
 800099e:	e093      	b.n	8000ac8 <__aeabi_dadd+0x3f4>
 80009a0:	001d      	movs	r5, r3
 80009a2:	e6d0      	b.n	8000746 <__aeabi_dadd+0x72>
 80009a4:	0029      	movs	r1, r5
 80009a6:	3e1f      	subs	r6, #31
 80009a8:	40f1      	lsrs	r1, r6
 80009aa:	2b20      	cmp	r3, #32
 80009ac:	d100      	bne.n	80009b0 <__aeabi_dadd+0x2dc>
 80009ae:	e08d      	b.n	8000acc <__aeabi_dadd+0x3f8>
 80009b0:	2240      	movs	r2, #64	; 0x40
 80009b2:	1ad3      	subs	r3, r2, r3
 80009b4:	409d      	lsls	r5, r3
 80009b6:	432f      	orrs	r7, r5
 80009b8:	1e7d      	subs	r5, r7, #1
 80009ba:	41af      	sbcs	r7, r5
 80009bc:	2400      	movs	r4, #0
 80009be:	430f      	orrs	r7, r1
 80009c0:	2600      	movs	r6, #0
 80009c2:	e744      	b.n	800084e <__aeabi_dadd+0x17a>
 80009c4:	002b      	movs	r3, r5
 80009c6:	0008      	movs	r0, r1
 80009c8:	3b20      	subs	r3, #32
 80009ca:	40d8      	lsrs	r0, r3
 80009cc:	0003      	movs	r3, r0
 80009ce:	2d20      	cmp	r5, #32
 80009d0:	d100      	bne.n	80009d4 <__aeabi_dadd+0x300>
 80009d2:	e07d      	b.n	8000ad0 <__aeabi_dadd+0x3fc>
 80009d4:	2040      	movs	r0, #64	; 0x40
 80009d6:	1b45      	subs	r5, r0, r5
 80009d8:	40a9      	lsls	r1, r5
 80009da:	430a      	orrs	r2, r1
 80009dc:	1e51      	subs	r1, r2, #1
 80009de:	418a      	sbcs	r2, r1
 80009e0:	2100      	movs	r1, #0
 80009e2:	431a      	orrs	r2, r3
 80009e4:	e6c7      	b.n	8000776 <__aeabi_dadd+0xa2>
 80009e6:	2e00      	cmp	r6, #0
 80009e8:	d050      	beq.n	8000a8c <__aeabi_dadd+0x3b8>
 80009ea:	4e1a      	ldr	r6, [pc, #104]	; (8000a54 <__aeabi_dadd+0x380>)
 80009ec:	42b0      	cmp	r0, r6
 80009ee:	d057      	beq.n	8000aa0 <__aeabi_dadd+0x3cc>
 80009f0:	2680      	movs	r6, #128	; 0x80
 80009f2:	426b      	negs	r3, r5
 80009f4:	4699      	mov	r9, r3
 80009f6:	0436      	lsls	r6, r6, #16
 80009f8:	4334      	orrs	r4, r6
 80009fa:	464b      	mov	r3, r9
 80009fc:	2b38      	cmp	r3, #56	; 0x38
 80009fe:	dd00      	ble.n	8000a02 <__aeabi_dadd+0x32e>
 8000a00:	e0d6      	b.n	8000bb0 <__aeabi_dadd+0x4dc>
 8000a02:	2b1f      	cmp	r3, #31
 8000a04:	dd00      	ble.n	8000a08 <__aeabi_dadd+0x334>
 8000a06:	e135      	b.n	8000c74 <__aeabi_dadd+0x5a0>
 8000a08:	2620      	movs	r6, #32
 8000a0a:	1af5      	subs	r5, r6, r3
 8000a0c:	0026      	movs	r6, r4
 8000a0e:	40ae      	lsls	r6, r5
 8000a10:	46b2      	mov	sl, r6
 8000a12:	003e      	movs	r6, r7
 8000a14:	40de      	lsrs	r6, r3
 8000a16:	46ac      	mov	ip, r5
 8000a18:	0035      	movs	r5, r6
 8000a1a:	4656      	mov	r6, sl
 8000a1c:	432e      	orrs	r6, r5
 8000a1e:	4665      	mov	r5, ip
 8000a20:	40af      	lsls	r7, r5
 8000a22:	1e7d      	subs	r5, r7, #1
 8000a24:	41af      	sbcs	r7, r5
 8000a26:	40dc      	lsrs	r4, r3
 8000a28:	4337      	orrs	r7, r6
 8000a2a:	1bd7      	subs	r7, r2, r7
 8000a2c:	42ba      	cmp	r2, r7
 8000a2e:	4192      	sbcs	r2, r2
 8000a30:	1b0c      	subs	r4, r1, r4
 8000a32:	4252      	negs	r2, r2
 8000a34:	1aa4      	subs	r4, r4, r2
 8000a36:	0006      	movs	r6, r0
 8000a38:	46d8      	mov	r8, fp
 8000a3a:	e6a3      	b.n	8000784 <__aeabi_dadd+0xb0>
 8000a3c:	4664      	mov	r4, ip
 8000a3e:	4667      	mov	r7, ip
 8000a40:	432c      	orrs	r4, r5
 8000a42:	d000      	beq.n	8000a46 <__aeabi_dadd+0x372>
 8000a44:	e6a2      	b.n	800078c <__aeabi_dadd+0xb8>
 8000a46:	2500      	movs	r5, #0
 8000a48:	2600      	movs	r6, #0
 8000a4a:	2700      	movs	r7, #0
 8000a4c:	e706      	b.n	800085c <__aeabi_dadd+0x188>
 8000a4e:	001e      	movs	r6, r3
 8000a50:	e6c4      	b.n	80007dc <__aeabi_dadd+0x108>
 8000a52:	46c0      	nop			; (mov r8, r8)
 8000a54:	000007ff 	.word	0x000007ff
 8000a58:	ff7fffff 	.word	0xff7fffff
 8000a5c:	800fffff 	.word	0x800fffff
 8000a60:	2b1f      	cmp	r3, #31
 8000a62:	dc63      	bgt.n	8000b2c <__aeabi_dadd+0x458>
 8000a64:	2020      	movs	r0, #32
 8000a66:	1ac3      	subs	r3, r0, r3
 8000a68:	0008      	movs	r0, r1
 8000a6a:	4098      	lsls	r0, r3
 8000a6c:	469c      	mov	ip, r3
 8000a6e:	4683      	mov	fp, r0
 8000a70:	4653      	mov	r3, sl
 8000a72:	0010      	movs	r0, r2
 8000a74:	40d8      	lsrs	r0, r3
 8000a76:	0003      	movs	r3, r0
 8000a78:	4658      	mov	r0, fp
 8000a7a:	4318      	orrs	r0, r3
 8000a7c:	4663      	mov	r3, ip
 8000a7e:	409a      	lsls	r2, r3
 8000a80:	1e53      	subs	r3, r2, #1
 8000a82:	419a      	sbcs	r2, r3
 8000a84:	4653      	mov	r3, sl
 8000a86:	4302      	orrs	r2, r0
 8000a88:	40d9      	lsrs	r1, r3
 8000a8a:	e703      	b.n	8000894 <__aeabi_dadd+0x1c0>
 8000a8c:	0026      	movs	r6, r4
 8000a8e:	433e      	orrs	r6, r7
 8000a90:	d006      	beq.n	8000aa0 <__aeabi_dadd+0x3cc>
 8000a92:	43eb      	mvns	r3, r5
 8000a94:	4699      	mov	r9, r3
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d0c7      	beq.n	8000a2a <__aeabi_dadd+0x356>
 8000a9a:	4e94      	ldr	r6, [pc, #592]	; (8000cec <__aeabi_dadd+0x618>)
 8000a9c:	42b0      	cmp	r0, r6
 8000a9e:	d1ac      	bne.n	80009fa <__aeabi_dadd+0x326>
 8000aa0:	000c      	movs	r4, r1
 8000aa2:	0017      	movs	r7, r2
 8000aa4:	0006      	movs	r6, r0
 8000aa6:	46d8      	mov	r8, fp
 8000aa8:	e698      	b.n	80007dc <__aeabi_dadd+0x108>
 8000aaa:	4b90      	ldr	r3, [pc, #576]	; (8000cec <__aeabi_dadd+0x618>)
 8000aac:	459a      	cmp	sl, r3
 8000aae:	d00b      	beq.n	8000ac8 <__aeabi_dadd+0x3f4>
 8000ab0:	4682      	mov	sl, r0
 8000ab2:	e6e7      	b.n	8000884 <__aeabi_dadd+0x1b0>
 8000ab4:	2800      	cmp	r0, #0
 8000ab6:	d000      	beq.n	8000aba <__aeabi_dadd+0x3e6>
 8000ab8:	e09e      	b.n	8000bf8 <__aeabi_dadd+0x524>
 8000aba:	0018      	movs	r0, r3
 8000abc:	4310      	orrs	r0, r2
 8000abe:	d100      	bne.n	8000ac2 <__aeabi_dadd+0x3ee>
 8000ac0:	e0e9      	b.n	8000c96 <__aeabi_dadd+0x5c2>
 8000ac2:	001c      	movs	r4, r3
 8000ac4:	0017      	movs	r7, r2
 8000ac6:	46d8      	mov	r8, fp
 8000ac8:	4e88      	ldr	r6, [pc, #544]	; (8000cec <__aeabi_dadd+0x618>)
 8000aca:	e687      	b.n	80007dc <__aeabi_dadd+0x108>
 8000acc:	2500      	movs	r5, #0
 8000ace:	e772      	b.n	80009b6 <__aeabi_dadd+0x2e2>
 8000ad0:	2100      	movs	r1, #0
 8000ad2:	e782      	b.n	80009da <__aeabi_dadd+0x306>
 8000ad4:	0023      	movs	r3, r4
 8000ad6:	433b      	orrs	r3, r7
 8000ad8:	2e00      	cmp	r6, #0
 8000ada:	d000      	beq.n	8000ade <__aeabi_dadd+0x40a>
 8000adc:	e0ab      	b.n	8000c36 <__aeabi_dadd+0x562>
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d100      	bne.n	8000ae4 <__aeabi_dadd+0x410>
 8000ae2:	e0e7      	b.n	8000cb4 <__aeabi_dadd+0x5e0>
 8000ae4:	000b      	movs	r3, r1
 8000ae6:	4313      	orrs	r3, r2
 8000ae8:	d100      	bne.n	8000aec <__aeabi_dadd+0x418>
 8000aea:	e677      	b.n	80007dc <__aeabi_dadd+0x108>
 8000aec:	18ba      	adds	r2, r7, r2
 8000aee:	42ba      	cmp	r2, r7
 8000af0:	41bf      	sbcs	r7, r7
 8000af2:	1864      	adds	r4, r4, r1
 8000af4:	427f      	negs	r7, r7
 8000af6:	19e4      	adds	r4, r4, r7
 8000af8:	0223      	lsls	r3, r4, #8
 8000afa:	d400      	bmi.n	8000afe <__aeabi_dadd+0x42a>
 8000afc:	e0f2      	b.n	8000ce4 <__aeabi_dadd+0x610>
 8000afe:	4b7c      	ldr	r3, [pc, #496]	; (8000cf0 <__aeabi_dadd+0x61c>)
 8000b00:	0017      	movs	r7, r2
 8000b02:	401c      	ands	r4, r3
 8000b04:	0006      	movs	r6, r0
 8000b06:	e669      	b.n	80007dc <__aeabi_dadd+0x108>
 8000b08:	0020      	movs	r0, r4
 8000b0a:	4338      	orrs	r0, r7
 8000b0c:	2e00      	cmp	r6, #0
 8000b0e:	d1d1      	bne.n	8000ab4 <__aeabi_dadd+0x3e0>
 8000b10:	2800      	cmp	r0, #0
 8000b12:	d15b      	bne.n	8000bcc <__aeabi_dadd+0x4f8>
 8000b14:	001c      	movs	r4, r3
 8000b16:	4314      	orrs	r4, r2
 8000b18:	d100      	bne.n	8000b1c <__aeabi_dadd+0x448>
 8000b1a:	e0a8      	b.n	8000c6e <__aeabi_dadd+0x59a>
 8000b1c:	001c      	movs	r4, r3
 8000b1e:	0017      	movs	r7, r2
 8000b20:	46d8      	mov	r8, fp
 8000b22:	e65b      	b.n	80007dc <__aeabi_dadd+0x108>
 8000b24:	0006      	movs	r6, r0
 8000b26:	2400      	movs	r4, #0
 8000b28:	2700      	movs	r7, #0
 8000b2a:	e697      	b.n	800085c <__aeabi_dadd+0x188>
 8000b2c:	4650      	mov	r0, sl
 8000b2e:	000b      	movs	r3, r1
 8000b30:	3820      	subs	r0, #32
 8000b32:	40c3      	lsrs	r3, r0
 8000b34:	4699      	mov	r9, r3
 8000b36:	4653      	mov	r3, sl
 8000b38:	2b20      	cmp	r3, #32
 8000b3a:	d100      	bne.n	8000b3e <__aeabi_dadd+0x46a>
 8000b3c:	e095      	b.n	8000c6a <__aeabi_dadd+0x596>
 8000b3e:	2340      	movs	r3, #64	; 0x40
 8000b40:	4650      	mov	r0, sl
 8000b42:	1a1b      	subs	r3, r3, r0
 8000b44:	4099      	lsls	r1, r3
 8000b46:	430a      	orrs	r2, r1
 8000b48:	1e51      	subs	r1, r2, #1
 8000b4a:	418a      	sbcs	r2, r1
 8000b4c:	464b      	mov	r3, r9
 8000b4e:	2100      	movs	r1, #0
 8000b50:	431a      	orrs	r2, r3
 8000b52:	e69f      	b.n	8000894 <__aeabi_dadd+0x1c0>
 8000b54:	2e00      	cmp	r6, #0
 8000b56:	d130      	bne.n	8000bba <__aeabi_dadd+0x4e6>
 8000b58:	0026      	movs	r6, r4
 8000b5a:	433e      	orrs	r6, r7
 8000b5c:	d067      	beq.n	8000c2e <__aeabi_dadd+0x55a>
 8000b5e:	43db      	mvns	r3, r3
 8000b60:	469a      	mov	sl, r3
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d01c      	beq.n	8000ba0 <__aeabi_dadd+0x4cc>
 8000b66:	4e61      	ldr	r6, [pc, #388]	; (8000cec <__aeabi_dadd+0x618>)
 8000b68:	42b0      	cmp	r0, r6
 8000b6a:	d060      	beq.n	8000c2e <__aeabi_dadd+0x55a>
 8000b6c:	4653      	mov	r3, sl
 8000b6e:	2b38      	cmp	r3, #56	; 0x38
 8000b70:	dd00      	ble.n	8000b74 <__aeabi_dadd+0x4a0>
 8000b72:	e096      	b.n	8000ca2 <__aeabi_dadd+0x5ce>
 8000b74:	2b1f      	cmp	r3, #31
 8000b76:	dd00      	ble.n	8000b7a <__aeabi_dadd+0x4a6>
 8000b78:	e09f      	b.n	8000cba <__aeabi_dadd+0x5e6>
 8000b7a:	2620      	movs	r6, #32
 8000b7c:	1af3      	subs	r3, r6, r3
 8000b7e:	0026      	movs	r6, r4
 8000b80:	409e      	lsls	r6, r3
 8000b82:	469c      	mov	ip, r3
 8000b84:	46b3      	mov	fp, r6
 8000b86:	4653      	mov	r3, sl
 8000b88:	003e      	movs	r6, r7
 8000b8a:	40de      	lsrs	r6, r3
 8000b8c:	0033      	movs	r3, r6
 8000b8e:	465e      	mov	r6, fp
 8000b90:	431e      	orrs	r6, r3
 8000b92:	4663      	mov	r3, ip
 8000b94:	409f      	lsls	r7, r3
 8000b96:	1e7b      	subs	r3, r7, #1
 8000b98:	419f      	sbcs	r7, r3
 8000b9a:	4653      	mov	r3, sl
 8000b9c:	40dc      	lsrs	r4, r3
 8000b9e:	4337      	orrs	r7, r6
 8000ba0:	18bf      	adds	r7, r7, r2
 8000ba2:	4297      	cmp	r7, r2
 8000ba4:	4192      	sbcs	r2, r2
 8000ba6:	1864      	adds	r4, r4, r1
 8000ba8:	4252      	negs	r2, r2
 8000baa:	18a4      	adds	r4, r4, r2
 8000bac:	0006      	movs	r6, r0
 8000bae:	e678      	b.n	80008a2 <__aeabi_dadd+0x1ce>
 8000bb0:	4327      	orrs	r7, r4
 8000bb2:	1e7c      	subs	r4, r7, #1
 8000bb4:	41a7      	sbcs	r7, r4
 8000bb6:	2400      	movs	r4, #0
 8000bb8:	e737      	b.n	8000a2a <__aeabi_dadd+0x356>
 8000bba:	4e4c      	ldr	r6, [pc, #304]	; (8000cec <__aeabi_dadd+0x618>)
 8000bbc:	42b0      	cmp	r0, r6
 8000bbe:	d036      	beq.n	8000c2e <__aeabi_dadd+0x55a>
 8000bc0:	2680      	movs	r6, #128	; 0x80
 8000bc2:	425b      	negs	r3, r3
 8000bc4:	0436      	lsls	r6, r6, #16
 8000bc6:	469a      	mov	sl, r3
 8000bc8:	4334      	orrs	r4, r6
 8000bca:	e7cf      	b.n	8000b6c <__aeabi_dadd+0x498>
 8000bcc:	0018      	movs	r0, r3
 8000bce:	4310      	orrs	r0, r2
 8000bd0:	d100      	bne.n	8000bd4 <__aeabi_dadd+0x500>
 8000bd2:	e603      	b.n	80007dc <__aeabi_dadd+0x108>
 8000bd4:	1ab8      	subs	r0, r7, r2
 8000bd6:	4684      	mov	ip, r0
 8000bd8:	4567      	cmp	r7, ip
 8000bda:	41ad      	sbcs	r5, r5
 8000bdc:	1ae0      	subs	r0, r4, r3
 8000bde:	426d      	negs	r5, r5
 8000be0:	1b40      	subs	r0, r0, r5
 8000be2:	0205      	lsls	r5, r0, #8
 8000be4:	d400      	bmi.n	8000be8 <__aeabi_dadd+0x514>
 8000be6:	e62c      	b.n	8000842 <__aeabi_dadd+0x16e>
 8000be8:	1bd7      	subs	r7, r2, r7
 8000bea:	42ba      	cmp	r2, r7
 8000bec:	4192      	sbcs	r2, r2
 8000bee:	1b1c      	subs	r4, r3, r4
 8000bf0:	4252      	negs	r2, r2
 8000bf2:	1aa4      	subs	r4, r4, r2
 8000bf4:	46d8      	mov	r8, fp
 8000bf6:	e5f1      	b.n	80007dc <__aeabi_dadd+0x108>
 8000bf8:	0018      	movs	r0, r3
 8000bfa:	4310      	orrs	r0, r2
 8000bfc:	d100      	bne.n	8000c00 <__aeabi_dadd+0x52c>
 8000bfe:	e763      	b.n	8000ac8 <__aeabi_dadd+0x3f4>
 8000c00:	08f8      	lsrs	r0, r7, #3
 8000c02:	0767      	lsls	r7, r4, #29
 8000c04:	4307      	orrs	r7, r0
 8000c06:	2080      	movs	r0, #128	; 0x80
 8000c08:	08e4      	lsrs	r4, r4, #3
 8000c0a:	0300      	lsls	r0, r0, #12
 8000c0c:	4204      	tst	r4, r0
 8000c0e:	d008      	beq.n	8000c22 <__aeabi_dadd+0x54e>
 8000c10:	08dd      	lsrs	r5, r3, #3
 8000c12:	4205      	tst	r5, r0
 8000c14:	d105      	bne.n	8000c22 <__aeabi_dadd+0x54e>
 8000c16:	08d2      	lsrs	r2, r2, #3
 8000c18:	0759      	lsls	r1, r3, #29
 8000c1a:	4311      	orrs	r1, r2
 8000c1c:	000f      	movs	r7, r1
 8000c1e:	002c      	movs	r4, r5
 8000c20:	46d8      	mov	r8, fp
 8000c22:	0f7b      	lsrs	r3, r7, #29
 8000c24:	00e4      	lsls	r4, r4, #3
 8000c26:	431c      	orrs	r4, r3
 8000c28:	00ff      	lsls	r7, r7, #3
 8000c2a:	4e30      	ldr	r6, [pc, #192]	; (8000cec <__aeabi_dadd+0x618>)
 8000c2c:	e5d6      	b.n	80007dc <__aeabi_dadd+0x108>
 8000c2e:	000c      	movs	r4, r1
 8000c30:	0017      	movs	r7, r2
 8000c32:	0006      	movs	r6, r0
 8000c34:	e5d2      	b.n	80007dc <__aeabi_dadd+0x108>
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d038      	beq.n	8000cac <__aeabi_dadd+0x5d8>
 8000c3a:	000b      	movs	r3, r1
 8000c3c:	4313      	orrs	r3, r2
 8000c3e:	d100      	bne.n	8000c42 <__aeabi_dadd+0x56e>
 8000c40:	e742      	b.n	8000ac8 <__aeabi_dadd+0x3f4>
 8000c42:	08f8      	lsrs	r0, r7, #3
 8000c44:	0767      	lsls	r7, r4, #29
 8000c46:	4307      	orrs	r7, r0
 8000c48:	2080      	movs	r0, #128	; 0x80
 8000c4a:	08e4      	lsrs	r4, r4, #3
 8000c4c:	0300      	lsls	r0, r0, #12
 8000c4e:	4204      	tst	r4, r0
 8000c50:	d0e7      	beq.n	8000c22 <__aeabi_dadd+0x54e>
 8000c52:	08cb      	lsrs	r3, r1, #3
 8000c54:	4203      	tst	r3, r0
 8000c56:	d1e4      	bne.n	8000c22 <__aeabi_dadd+0x54e>
 8000c58:	08d2      	lsrs	r2, r2, #3
 8000c5a:	0749      	lsls	r1, r1, #29
 8000c5c:	4311      	orrs	r1, r2
 8000c5e:	000f      	movs	r7, r1
 8000c60:	001c      	movs	r4, r3
 8000c62:	e7de      	b.n	8000c22 <__aeabi_dadd+0x54e>
 8000c64:	2700      	movs	r7, #0
 8000c66:	2400      	movs	r4, #0
 8000c68:	e5d5      	b.n	8000816 <__aeabi_dadd+0x142>
 8000c6a:	2100      	movs	r1, #0
 8000c6c:	e76b      	b.n	8000b46 <__aeabi_dadd+0x472>
 8000c6e:	2500      	movs	r5, #0
 8000c70:	2700      	movs	r7, #0
 8000c72:	e5f3      	b.n	800085c <__aeabi_dadd+0x188>
 8000c74:	464e      	mov	r6, r9
 8000c76:	0025      	movs	r5, r4
 8000c78:	3e20      	subs	r6, #32
 8000c7a:	40f5      	lsrs	r5, r6
 8000c7c:	464b      	mov	r3, r9
 8000c7e:	002e      	movs	r6, r5
 8000c80:	2b20      	cmp	r3, #32
 8000c82:	d02d      	beq.n	8000ce0 <__aeabi_dadd+0x60c>
 8000c84:	2540      	movs	r5, #64	; 0x40
 8000c86:	1aed      	subs	r5, r5, r3
 8000c88:	40ac      	lsls	r4, r5
 8000c8a:	4327      	orrs	r7, r4
 8000c8c:	1e7c      	subs	r4, r7, #1
 8000c8e:	41a7      	sbcs	r7, r4
 8000c90:	2400      	movs	r4, #0
 8000c92:	4337      	orrs	r7, r6
 8000c94:	e6c9      	b.n	8000a2a <__aeabi_dadd+0x356>
 8000c96:	2480      	movs	r4, #128	; 0x80
 8000c98:	2500      	movs	r5, #0
 8000c9a:	0324      	lsls	r4, r4, #12
 8000c9c:	4e13      	ldr	r6, [pc, #76]	; (8000cec <__aeabi_dadd+0x618>)
 8000c9e:	2700      	movs	r7, #0
 8000ca0:	e5dc      	b.n	800085c <__aeabi_dadd+0x188>
 8000ca2:	4327      	orrs	r7, r4
 8000ca4:	1e7c      	subs	r4, r7, #1
 8000ca6:	41a7      	sbcs	r7, r4
 8000ca8:	2400      	movs	r4, #0
 8000caa:	e779      	b.n	8000ba0 <__aeabi_dadd+0x4cc>
 8000cac:	000c      	movs	r4, r1
 8000cae:	0017      	movs	r7, r2
 8000cb0:	4e0e      	ldr	r6, [pc, #56]	; (8000cec <__aeabi_dadd+0x618>)
 8000cb2:	e593      	b.n	80007dc <__aeabi_dadd+0x108>
 8000cb4:	000c      	movs	r4, r1
 8000cb6:	0017      	movs	r7, r2
 8000cb8:	e590      	b.n	80007dc <__aeabi_dadd+0x108>
 8000cba:	4656      	mov	r6, sl
 8000cbc:	0023      	movs	r3, r4
 8000cbe:	3e20      	subs	r6, #32
 8000cc0:	40f3      	lsrs	r3, r6
 8000cc2:	4699      	mov	r9, r3
 8000cc4:	4653      	mov	r3, sl
 8000cc6:	2b20      	cmp	r3, #32
 8000cc8:	d00e      	beq.n	8000ce8 <__aeabi_dadd+0x614>
 8000cca:	2340      	movs	r3, #64	; 0x40
 8000ccc:	4656      	mov	r6, sl
 8000cce:	1b9b      	subs	r3, r3, r6
 8000cd0:	409c      	lsls	r4, r3
 8000cd2:	4327      	orrs	r7, r4
 8000cd4:	1e7c      	subs	r4, r7, #1
 8000cd6:	41a7      	sbcs	r7, r4
 8000cd8:	464b      	mov	r3, r9
 8000cda:	2400      	movs	r4, #0
 8000cdc:	431f      	orrs	r7, r3
 8000cde:	e75f      	b.n	8000ba0 <__aeabi_dadd+0x4cc>
 8000ce0:	2400      	movs	r4, #0
 8000ce2:	e7d2      	b.n	8000c8a <__aeabi_dadd+0x5b6>
 8000ce4:	0017      	movs	r7, r2
 8000ce6:	e5b2      	b.n	800084e <__aeabi_dadd+0x17a>
 8000ce8:	2400      	movs	r4, #0
 8000cea:	e7f2      	b.n	8000cd2 <__aeabi_dadd+0x5fe>
 8000cec:	000007ff 	.word	0x000007ff
 8000cf0:	ff7fffff 	.word	0xff7fffff

08000cf4 <__aeabi_ddiv>:
 8000cf4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000cf6:	4657      	mov	r7, sl
 8000cf8:	4645      	mov	r5, r8
 8000cfa:	46de      	mov	lr, fp
 8000cfc:	464e      	mov	r6, r9
 8000cfe:	b5e0      	push	{r5, r6, r7, lr}
 8000d00:	004c      	lsls	r4, r1, #1
 8000d02:	030e      	lsls	r6, r1, #12
 8000d04:	b087      	sub	sp, #28
 8000d06:	4683      	mov	fp, r0
 8000d08:	4692      	mov	sl, r2
 8000d0a:	001d      	movs	r5, r3
 8000d0c:	4680      	mov	r8, r0
 8000d0e:	0b36      	lsrs	r6, r6, #12
 8000d10:	0d64      	lsrs	r4, r4, #21
 8000d12:	0fcf      	lsrs	r7, r1, #31
 8000d14:	2c00      	cmp	r4, #0
 8000d16:	d04f      	beq.n	8000db8 <__aeabi_ddiv+0xc4>
 8000d18:	4b6f      	ldr	r3, [pc, #444]	; (8000ed8 <__aeabi_ddiv+0x1e4>)
 8000d1a:	429c      	cmp	r4, r3
 8000d1c:	d035      	beq.n	8000d8a <__aeabi_ddiv+0x96>
 8000d1e:	2380      	movs	r3, #128	; 0x80
 8000d20:	0f42      	lsrs	r2, r0, #29
 8000d22:	041b      	lsls	r3, r3, #16
 8000d24:	00f6      	lsls	r6, r6, #3
 8000d26:	4313      	orrs	r3, r2
 8000d28:	4333      	orrs	r3, r6
 8000d2a:	4699      	mov	r9, r3
 8000d2c:	00c3      	lsls	r3, r0, #3
 8000d2e:	4698      	mov	r8, r3
 8000d30:	4b6a      	ldr	r3, [pc, #424]	; (8000edc <__aeabi_ddiv+0x1e8>)
 8000d32:	2600      	movs	r6, #0
 8000d34:	469c      	mov	ip, r3
 8000d36:	2300      	movs	r3, #0
 8000d38:	4464      	add	r4, ip
 8000d3a:	9303      	str	r3, [sp, #12]
 8000d3c:	032b      	lsls	r3, r5, #12
 8000d3e:	0b1b      	lsrs	r3, r3, #12
 8000d40:	469b      	mov	fp, r3
 8000d42:	006b      	lsls	r3, r5, #1
 8000d44:	0fed      	lsrs	r5, r5, #31
 8000d46:	4650      	mov	r0, sl
 8000d48:	0d5b      	lsrs	r3, r3, #21
 8000d4a:	9501      	str	r5, [sp, #4]
 8000d4c:	d05e      	beq.n	8000e0c <__aeabi_ddiv+0x118>
 8000d4e:	4a62      	ldr	r2, [pc, #392]	; (8000ed8 <__aeabi_ddiv+0x1e4>)
 8000d50:	4293      	cmp	r3, r2
 8000d52:	d053      	beq.n	8000dfc <__aeabi_ddiv+0x108>
 8000d54:	465a      	mov	r2, fp
 8000d56:	00d1      	lsls	r1, r2, #3
 8000d58:	2280      	movs	r2, #128	; 0x80
 8000d5a:	0f40      	lsrs	r0, r0, #29
 8000d5c:	0412      	lsls	r2, r2, #16
 8000d5e:	4302      	orrs	r2, r0
 8000d60:	430a      	orrs	r2, r1
 8000d62:	4693      	mov	fp, r2
 8000d64:	4652      	mov	r2, sl
 8000d66:	00d1      	lsls	r1, r2, #3
 8000d68:	4a5c      	ldr	r2, [pc, #368]	; (8000edc <__aeabi_ddiv+0x1e8>)
 8000d6a:	4694      	mov	ip, r2
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	4463      	add	r3, ip
 8000d70:	0038      	movs	r0, r7
 8000d72:	4068      	eors	r0, r5
 8000d74:	4684      	mov	ip, r0
 8000d76:	9002      	str	r0, [sp, #8]
 8000d78:	1ae4      	subs	r4, r4, r3
 8000d7a:	4316      	orrs	r6, r2
 8000d7c:	2e0f      	cmp	r6, #15
 8000d7e:	d900      	bls.n	8000d82 <__aeabi_ddiv+0x8e>
 8000d80:	e0b4      	b.n	8000eec <__aeabi_ddiv+0x1f8>
 8000d82:	4b57      	ldr	r3, [pc, #348]	; (8000ee0 <__aeabi_ddiv+0x1ec>)
 8000d84:	00b6      	lsls	r6, r6, #2
 8000d86:	599b      	ldr	r3, [r3, r6]
 8000d88:	469f      	mov	pc, r3
 8000d8a:	0003      	movs	r3, r0
 8000d8c:	4333      	orrs	r3, r6
 8000d8e:	4699      	mov	r9, r3
 8000d90:	d16c      	bne.n	8000e6c <__aeabi_ddiv+0x178>
 8000d92:	2300      	movs	r3, #0
 8000d94:	4698      	mov	r8, r3
 8000d96:	3302      	adds	r3, #2
 8000d98:	2608      	movs	r6, #8
 8000d9a:	9303      	str	r3, [sp, #12]
 8000d9c:	e7ce      	b.n	8000d3c <__aeabi_ddiv+0x48>
 8000d9e:	46cb      	mov	fp, r9
 8000da0:	4641      	mov	r1, r8
 8000da2:	9a03      	ldr	r2, [sp, #12]
 8000da4:	9701      	str	r7, [sp, #4]
 8000da6:	2a02      	cmp	r2, #2
 8000da8:	d165      	bne.n	8000e76 <__aeabi_ddiv+0x182>
 8000daa:	9b01      	ldr	r3, [sp, #4]
 8000dac:	4c4a      	ldr	r4, [pc, #296]	; (8000ed8 <__aeabi_ddiv+0x1e4>)
 8000dae:	469c      	mov	ip, r3
 8000db0:	2300      	movs	r3, #0
 8000db2:	2200      	movs	r2, #0
 8000db4:	4698      	mov	r8, r3
 8000db6:	e06b      	b.n	8000e90 <__aeabi_ddiv+0x19c>
 8000db8:	0003      	movs	r3, r0
 8000dba:	4333      	orrs	r3, r6
 8000dbc:	4699      	mov	r9, r3
 8000dbe:	d04e      	beq.n	8000e5e <__aeabi_ddiv+0x16a>
 8000dc0:	2e00      	cmp	r6, #0
 8000dc2:	d100      	bne.n	8000dc6 <__aeabi_ddiv+0xd2>
 8000dc4:	e1bc      	b.n	8001140 <__aeabi_ddiv+0x44c>
 8000dc6:	0030      	movs	r0, r6
 8000dc8:	f001 fa0c 	bl	80021e4 <__clzsi2>
 8000dcc:	0003      	movs	r3, r0
 8000dce:	3b0b      	subs	r3, #11
 8000dd0:	2b1c      	cmp	r3, #28
 8000dd2:	dd00      	ble.n	8000dd6 <__aeabi_ddiv+0xe2>
 8000dd4:	e1ac      	b.n	8001130 <__aeabi_ddiv+0x43c>
 8000dd6:	221d      	movs	r2, #29
 8000dd8:	1ad3      	subs	r3, r2, r3
 8000dda:	465a      	mov	r2, fp
 8000ddc:	0001      	movs	r1, r0
 8000dde:	40da      	lsrs	r2, r3
 8000de0:	3908      	subs	r1, #8
 8000de2:	408e      	lsls	r6, r1
 8000de4:	0013      	movs	r3, r2
 8000de6:	4333      	orrs	r3, r6
 8000de8:	4699      	mov	r9, r3
 8000dea:	465b      	mov	r3, fp
 8000dec:	408b      	lsls	r3, r1
 8000dee:	4698      	mov	r8, r3
 8000df0:	2300      	movs	r3, #0
 8000df2:	4c3c      	ldr	r4, [pc, #240]	; (8000ee4 <__aeabi_ddiv+0x1f0>)
 8000df4:	2600      	movs	r6, #0
 8000df6:	1a24      	subs	r4, r4, r0
 8000df8:	9303      	str	r3, [sp, #12]
 8000dfa:	e79f      	b.n	8000d3c <__aeabi_ddiv+0x48>
 8000dfc:	4651      	mov	r1, sl
 8000dfe:	465a      	mov	r2, fp
 8000e00:	4311      	orrs	r1, r2
 8000e02:	d129      	bne.n	8000e58 <__aeabi_ddiv+0x164>
 8000e04:	2200      	movs	r2, #0
 8000e06:	4693      	mov	fp, r2
 8000e08:	3202      	adds	r2, #2
 8000e0a:	e7b1      	b.n	8000d70 <__aeabi_ddiv+0x7c>
 8000e0c:	4659      	mov	r1, fp
 8000e0e:	4301      	orrs	r1, r0
 8000e10:	d01e      	beq.n	8000e50 <__aeabi_ddiv+0x15c>
 8000e12:	465b      	mov	r3, fp
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d100      	bne.n	8000e1a <__aeabi_ddiv+0x126>
 8000e18:	e19e      	b.n	8001158 <__aeabi_ddiv+0x464>
 8000e1a:	4658      	mov	r0, fp
 8000e1c:	f001 f9e2 	bl	80021e4 <__clzsi2>
 8000e20:	0003      	movs	r3, r0
 8000e22:	3b0b      	subs	r3, #11
 8000e24:	2b1c      	cmp	r3, #28
 8000e26:	dd00      	ble.n	8000e2a <__aeabi_ddiv+0x136>
 8000e28:	e18f      	b.n	800114a <__aeabi_ddiv+0x456>
 8000e2a:	0002      	movs	r2, r0
 8000e2c:	4659      	mov	r1, fp
 8000e2e:	3a08      	subs	r2, #8
 8000e30:	4091      	lsls	r1, r2
 8000e32:	468b      	mov	fp, r1
 8000e34:	211d      	movs	r1, #29
 8000e36:	1acb      	subs	r3, r1, r3
 8000e38:	4651      	mov	r1, sl
 8000e3a:	40d9      	lsrs	r1, r3
 8000e3c:	000b      	movs	r3, r1
 8000e3e:	4659      	mov	r1, fp
 8000e40:	430b      	orrs	r3, r1
 8000e42:	4651      	mov	r1, sl
 8000e44:	469b      	mov	fp, r3
 8000e46:	4091      	lsls	r1, r2
 8000e48:	4b26      	ldr	r3, [pc, #152]	; (8000ee4 <__aeabi_ddiv+0x1f0>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	1a1b      	subs	r3, r3, r0
 8000e4e:	e78f      	b.n	8000d70 <__aeabi_ddiv+0x7c>
 8000e50:	2300      	movs	r3, #0
 8000e52:	2201      	movs	r2, #1
 8000e54:	469b      	mov	fp, r3
 8000e56:	e78b      	b.n	8000d70 <__aeabi_ddiv+0x7c>
 8000e58:	4651      	mov	r1, sl
 8000e5a:	2203      	movs	r2, #3
 8000e5c:	e788      	b.n	8000d70 <__aeabi_ddiv+0x7c>
 8000e5e:	2300      	movs	r3, #0
 8000e60:	4698      	mov	r8, r3
 8000e62:	3301      	adds	r3, #1
 8000e64:	2604      	movs	r6, #4
 8000e66:	2400      	movs	r4, #0
 8000e68:	9303      	str	r3, [sp, #12]
 8000e6a:	e767      	b.n	8000d3c <__aeabi_ddiv+0x48>
 8000e6c:	2303      	movs	r3, #3
 8000e6e:	46b1      	mov	r9, r6
 8000e70:	9303      	str	r3, [sp, #12]
 8000e72:	260c      	movs	r6, #12
 8000e74:	e762      	b.n	8000d3c <__aeabi_ddiv+0x48>
 8000e76:	2a03      	cmp	r2, #3
 8000e78:	d100      	bne.n	8000e7c <__aeabi_ddiv+0x188>
 8000e7a:	e25c      	b.n	8001336 <__aeabi_ddiv+0x642>
 8000e7c:	9b01      	ldr	r3, [sp, #4]
 8000e7e:	2a01      	cmp	r2, #1
 8000e80:	d000      	beq.n	8000e84 <__aeabi_ddiv+0x190>
 8000e82:	e1e4      	b.n	800124e <__aeabi_ddiv+0x55a>
 8000e84:	4013      	ands	r3, r2
 8000e86:	469c      	mov	ip, r3
 8000e88:	2300      	movs	r3, #0
 8000e8a:	2400      	movs	r4, #0
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	4698      	mov	r8, r3
 8000e90:	2100      	movs	r1, #0
 8000e92:	0312      	lsls	r2, r2, #12
 8000e94:	0b13      	lsrs	r3, r2, #12
 8000e96:	0d0a      	lsrs	r2, r1, #20
 8000e98:	0512      	lsls	r2, r2, #20
 8000e9a:	431a      	orrs	r2, r3
 8000e9c:	0523      	lsls	r3, r4, #20
 8000e9e:	4c12      	ldr	r4, [pc, #72]	; (8000ee8 <__aeabi_ddiv+0x1f4>)
 8000ea0:	4640      	mov	r0, r8
 8000ea2:	4022      	ands	r2, r4
 8000ea4:	4313      	orrs	r3, r2
 8000ea6:	4662      	mov	r2, ip
 8000ea8:	005b      	lsls	r3, r3, #1
 8000eaa:	07d2      	lsls	r2, r2, #31
 8000eac:	085b      	lsrs	r3, r3, #1
 8000eae:	4313      	orrs	r3, r2
 8000eb0:	0019      	movs	r1, r3
 8000eb2:	b007      	add	sp, #28
 8000eb4:	bc3c      	pop	{r2, r3, r4, r5}
 8000eb6:	4690      	mov	r8, r2
 8000eb8:	4699      	mov	r9, r3
 8000eba:	46a2      	mov	sl, r4
 8000ebc:	46ab      	mov	fp, r5
 8000ebe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	2280      	movs	r2, #128	; 0x80
 8000ec4:	469c      	mov	ip, r3
 8000ec6:	0312      	lsls	r2, r2, #12
 8000ec8:	4698      	mov	r8, r3
 8000eca:	4c03      	ldr	r4, [pc, #12]	; (8000ed8 <__aeabi_ddiv+0x1e4>)
 8000ecc:	e7e0      	b.n	8000e90 <__aeabi_ddiv+0x19c>
 8000ece:	2300      	movs	r3, #0
 8000ed0:	4c01      	ldr	r4, [pc, #4]	; (8000ed8 <__aeabi_ddiv+0x1e4>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	4698      	mov	r8, r3
 8000ed6:	e7db      	b.n	8000e90 <__aeabi_ddiv+0x19c>
 8000ed8:	000007ff 	.word	0x000007ff
 8000edc:	fffffc01 	.word	0xfffffc01
 8000ee0:	08007d84 	.word	0x08007d84
 8000ee4:	fffffc0d 	.word	0xfffffc0d
 8000ee8:	800fffff 	.word	0x800fffff
 8000eec:	45d9      	cmp	r9, fp
 8000eee:	d900      	bls.n	8000ef2 <__aeabi_ddiv+0x1fe>
 8000ef0:	e139      	b.n	8001166 <__aeabi_ddiv+0x472>
 8000ef2:	d100      	bne.n	8000ef6 <__aeabi_ddiv+0x202>
 8000ef4:	e134      	b.n	8001160 <__aeabi_ddiv+0x46c>
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	4646      	mov	r6, r8
 8000efa:	464d      	mov	r5, r9
 8000efc:	469a      	mov	sl, r3
 8000efe:	3c01      	subs	r4, #1
 8000f00:	465b      	mov	r3, fp
 8000f02:	0e0a      	lsrs	r2, r1, #24
 8000f04:	021b      	lsls	r3, r3, #8
 8000f06:	431a      	orrs	r2, r3
 8000f08:	020b      	lsls	r3, r1, #8
 8000f0a:	0c17      	lsrs	r7, r2, #16
 8000f0c:	9303      	str	r3, [sp, #12]
 8000f0e:	0413      	lsls	r3, r2, #16
 8000f10:	0c1b      	lsrs	r3, r3, #16
 8000f12:	0039      	movs	r1, r7
 8000f14:	0028      	movs	r0, r5
 8000f16:	4690      	mov	r8, r2
 8000f18:	9301      	str	r3, [sp, #4]
 8000f1a:	f7ff f8ff 	bl	800011c <__udivsi3>
 8000f1e:	0002      	movs	r2, r0
 8000f20:	9b01      	ldr	r3, [sp, #4]
 8000f22:	4683      	mov	fp, r0
 8000f24:	435a      	muls	r2, r3
 8000f26:	0028      	movs	r0, r5
 8000f28:	0039      	movs	r1, r7
 8000f2a:	4691      	mov	r9, r2
 8000f2c:	f7ff f97c 	bl	8000228 <__aeabi_uidivmod>
 8000f30:	0c35      	lsrs	r5, r6, #16
 8000f32:	0409      	lsls	r1, r1, #16
 8000f34:	430d      	orrs	r5, r1
 8000f36:	45a9      	cmp	r9, r5
 8000f38:	d90d      	bls.n	8000f56 <__aeabi_ddiv+0x262>
 8000f3a:	465b      	mov	r3, fp
 8000f3c:	4445      	add	r5, r8
 8000f3e:	3b01      	subs	r3, #1
 8000f40:	45a8      	cmp	r8, r5
 8000f42:	d900      	bls.n	8000f46 <__aeabi_ddiv+0x252>
 8000f44:	e13a      	b.n	80011bc <__aeabi_ddiv+0x4c8>
 8000f46:	45a9      	cmp	r9, r5
 8000f48:	d800      	bhi.n	8000f4c <__aeabi_ddiv+0x258>
 8000f4a:	e137      	b.n	80011bc <__aeabi_ddiv+0x4c8>
 8000f4c:	2302      	movs	r3, #2
 8000f4e:	425b      	negs	r3, r3
 8000f50:	469c      	mov	ip, r3
 8000f52:	4445      	add	r5, r8
 8000f54:	44e3      	add	fp, ip
 8000f56:	464b      	mov	r3, r9
 8000f58:	1aeb      	subs	r3, r5, r3
 8000f5a:	0039      	movs	r1, r7
 8000f5c:	0018      	movs	r0, r3
 8000f5e:	9304      	str	r3, [sp, #16]
 8000f60:	f7ff f8dc 	bl	800011c <__udivsi3>
 8000f64:	9b01      	ldr	r3, [sp, #4]
 8000f66:	0005      	movs	r5, r0
 8000f68:	4343      	muls	r3, r0
 8000f6a:	0039      	movs	r1, r7
 8000f6c:	9804      	ldr	r0, [sp, #16]
 8000f6e:	4699      	mov	r9, r3
 8000f70:	f7ff f95a 	bl	8000228 <__aeabi_uidivmod>
 8000f74:	0433      	lsls	r3, r6, #16
 8000f76:	0409      	lsls	r1, r1, #16
 8000f78:	0c1b      	lsrs	r3, r3, #16
 8000f7a:	430b      	orrs	r3, r1
 8000f7c:	4599      	cmp	r9, r3
 8000f7e:	d909      	bls.n	8000f94 <__aeabi_ddiv+0x2a0>
 8000f80:	4443      	add	r3, r8
 8000f82:	1e6a      	subs	r2, r5, #1
 8000f84:	4598      	cmp	r8, r3
 8000f86:	d900      	bls.n	8000f8a <__aeabi_ddiv+0x296>
 8000f88:	e11a      	b.n	80011c0 <__aeabi_ddiv+0x4cc>
 8000f8a:	4599      	cmp	r9, r3
 8000f8c:	d800      	bhi.n	8000f90 <__aeabi_ddiv+0x29c>
 8000f8e:	e117      	b.n	80011c0 <__aeabi_ddiv+0x4cc>
 8000f90:	3d02      	subs	r5, #2
 8000f92:	4443      	add	r3, r8
 8000f94:	464a      	mov	r2, r9
 8000f96:	1a9b      	subs	r3, r3, r2
 8000f98:	465a      	mov	r2, fp
 8000f9a:	0412      	lsls	r2, r2, #16
 8000f9c:	432a      	orrs	r2, r5
 8000f9e:	9903      	ldr	r1, [sp, #12]
 8000fa0:	4693      	mov	fp, r2
 8000fa2:	0c10      	lsrs	r0, r2, #16
 8000fa4:	0c0a      	lsrs	r2, r1, #16
 8000fa6:	4691      	mov	r9, r2
 8000fa8:	0409      	lsls	r1, r1, #16
 8000faa:	465a      	mov	r2, fp
 8000fac:	0c09      	lsrs	r1, r1, #16
 8000fae:	464e      	mov	r6, r9
 8000fb0:	000d      	movs	r5, r1
 8000fb2:	0412      	lsls	r2, r2, #16
 8000fb4:	0c12      	lsrs	r2, r2, #16
 8000fb6:	4345      	muls	r5, r0
 8000fb8:	9105      	str	r1, [sp, #20]
 8000fba:	4351      	muls	r1, r2
 8000fbc:	4372      	muls	r2, r6
 8000fbe:	4370      	muls	r0, r6
 8000fc0:	1952      	adds	r2, r2, r5
 8000fc2:	0c0e      	lsrs	r6, r1, #16
 8000fc4:	18b2      	adds	r2, r6, r2
 8000fc6:	4295      	cmp	r5, r2
 8000fc8:	d903      	bls.n	8000fd2 <__aeabi_ddiv+0x2de>
 8000fca:	2580      	movs	r5, #128	; 0x80
 8000fcc:	026d      	lsls	r5, r5, #9
 8000fce:	46ac      	mov	ip, r5
 8000fd0:	4460      	add	r0, ip
 8000fd2:	0c15      	lsrs	r5, r2, #16
 8000fd4:	0409      	lsls	r1, r1, #16
 8000fd6:	0412      	lsls	r2, r2, #16
 8000fd8:	0c09      	lsrs	r1, r1, #16
 8000fda:	1828      	adds	r0, r5, r0
 8000fdc:	1852      	adds	r2, r2, r1
 8000fde:	4283      	cmp	r3, r0
 8000fe0:	d200      	bcs.n	8000fe4 <__aeabi_ddiv+0x2f0>
 8000fe2:	e0ce      	b.n	8001182 <__aeabi_ddiv+0x48e>
 8000fe4:	d100      	bne.n	8000fe8 <__aeabi_ddiv+0x2f4>
 8000fe6:	e0c8      	b.n	800117a <__aeabi_ddiv+0x486>
 8000fe8:	1a1d      	subs	r5, r3, r0
 8000fea:	4653      	mov	r3, sl
 8000fec:	1a9e      	subs	r6, r3, r2
 8000fee:	45b2      	cmp	sl, r6
 8000ff0:	4192      	sbcs	r2, r2
 8000ff2:	4252      	negs	r2, r2
 8000ff4:	1aab      	subs	r3, r5, r2
 8000ff6:	469a      	mov	sl, r3
 8000ff8:	4598      	cmp	r8, r3
 8000ffa:	d100      	bne.n	8000ffe <__aeabi_ddiv+0x30a>
 8000ffc:	e117      	b.n	800122e <__aeabi_ddiv+0x53a>
 8000ffe:	0039      	movs	r1, r7
 8001000:	0018      	movs	r0, r3
 8001002:	f7ff f88b 	bl	800011c <__udivsi3>
 8001006:	9b01      	ldr	r3, [sp, #4]
 8001008:	0005      	movs	r5, r0
 800100a:	4343      	muls	r3, r0
 800100c:	0039      	movs	r1, r7
 800100e:	4650      	mov	r0, sl
 8001010:	9304      	str	r3, [sp, #16]
 8001012:	f7ff f909 	bl	8000228 <__aeabi_uidivmod>
 8001016:	9804      	ldr	r0, [sp, #16]
 8001018:	040b      	lsls	r3, r1, #16
 800101a:	0c31      	lsrs	r1, r6, #16
 800101c:	4319      	orrs	r1, r3
 800101e:	4288      	cmp	r0, r1
 8001020:	d909      	bls.n	8001036 <__aeabi_ddiv+0x342>
 8001022:	4441      	add	r1, r8
 8001024:	1e6b      	subs	r3, r5, #1
 8001026:	4588      	cmp	r8, r1
 8001028:	d900      	bls.n	800102c <__aeabi_ddiv+0x338>
 800102a:	e107      	b.n	800123c <__aeabi_ddiv+0x548>
 800102c:	4288      	cmp	r0, r1
 800102e:	d800      	bhi.n	8001032 <__aeabi_ddiv+0x33e>
 8001030:	e104      	b.n	800123c <__aeabi_ddiv+0x548>
 8001032:	3d02      	subs	r5, #2
 8001034:	4441      	add	r1, r8
 8001036:	9b04      	ldr	r3, [sp, #16]
 8001038:	1acb      	subs	r3, r1, r3
 800103a:	0018      	movs	r0, r3
 800103c:	0039      	movs	r1, r7
 800103e:	9304      	str	r3, [sp, #16]
 8001040:	f7ff f86c 	bl	800011c <__udivsi3>
 8001044:	9b01      	ldr	r3, [sp, #4]
 8001046:	4682      	mov	sl, r0
 8001048:	4343      	muls	r3, r0
 800104a:	0039      	movs	r1, r7
 800104c:	9804      	ldr	r0, [sp, #16]
 800104e:	9301      	str	r3, [sp, #4]
 8001050:	f7ff f8ea 	bl	8000228 <__aeabi_uidivmod>
 8001054:	9801      	ldr	r0, [sp, #4]
 8001056:	040b      	lsls	r3, r1, #16
 8001058:	0431      	lsls	r1, r6, #16
 800105a:	0c09      	lsrs	r1, r1, #16
 800105c:	4319      	orrs	r1, r3
 800105e:	4288      	cmp	r0, r1
 8001060:	d90d      	bls.n	800107e <__aeabi_ddiv+0x38a>
 8001062:	4653      	mov	r3, sl
 8001064:	4441      	add	r1, r8
 8001066:	3b01      	subs	r3, #1
 8001068:	4588      	cmp	r8, r1
 800106a:	d900      	bls.n	800106e <__aeabi_ddiv+0x37a>
 800106c:	e0e8      	b.n	8001240 <__aeabi_ddiv+0x54c>
 800106e:	4288      	cmp	r0, r1
 8001070:	d800      	bhi.n	8001074 <__aeabi_ddiv+0x380>
 8001072:	e0e5      	b.n	8001240 <__aeabi_ddiv+0x54c>
 8001074:	2302      	movs	r3, #2
 8001076:	425b      	negs	r3, r3
 8001078:	469c      	mov	ip, r3
 800107a:	4441      	add	r1, r8
 800107c:	44e2      	add	sl, ip
 800107e:	9b01      	ldr	r3, [sp, #4]
 8001080:	042d      	lsls	r5, r5, #16
 8001082:	1ace      	subs	r6, r1, r3
 8001084:	4651      	mov	r1, sl
 8001086:	4329      	orrs	r1, r5
 8001088:	9d05      	ldr	r5, [sp, #20]
 800108a:	464f      	mov	r7, r9
 800108c:	002a      	movs	r2, r5
 800108e:	040b      	lsls	r3, r1, #16
 8001090:	0c08      	lsrs	r0, r1, #16
 8001092:	0c1b      	lsrs	r3, r3, #16
 8001094:	435a      	muls	r2, r3
 8001096:	4345      	muls	r5, r0
 8001098:	437b      	muls	r3, r7
 800109a:	4378      	muls	r0, r7
 800109c:	195b      	adds	r3, r3, r5
 800109e:	0c17      	lsrs	r7, r2, #16
 80010a0:	18fb      	adds	r3, r7, r3
 80010a2:	429d      	cmp	r5, r3
 80010a4:	d903      	bls.n	80010ae <__aeabi_ddiv+0x3ba>
 80010a6:	2580      	movs	r5, #128	; 0x80
 80010a8:	026d      	lsls	r5, r5, #9
 80010aa:	46ac      	mov	ip, r5
 80010ac:	4460      	add	r0, ip
 80010ae:	0c1d      	lsrs	r5, r3, #16
 80010b0:	0412      	lsls	r2, r2, #16
 80010b2:	041b      	lsls	r3, r3, #16
 80010b4:	0c12      	lsrs	r2, r2, #16
 80010b6:	1828      	adds	r0, r5, r0
 80010b8:	189b      	adds	r3, r3, r2
 80010ba:	4286      	cmp	r6, r0
 80010bc:	d200      	bcs.n	80010c0 <__aeabi_ddiv+0x3cc>
 80010be:	e093      	b.n	80011e8 <__aeabi_ddiv+0x4f4>
 80010c0:	d100      	bne.n	80010c4 <__aeabi_ddiv+0x3d0>
 80010c2:	e08e      	b.n	80011e2 <__aeabi_ddiv+0x4ee>
 80010c4:	2301      	movs	r3, #1
 80010c6:	4319      	orrs	r1, r3
 80010c8:	4ba0      	ldr	r3, [pc, #640]	; (800134c <__aeabi_ddiv+0x658>)
 80010ca:	18e3      	adds	r3, r4, r3
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	dc00      	bgt.n	80010d2 <__aeabi_ddiv+0x3de>
 80010d0:	e099      	b.n	8001206 <__aeabi_ddiv+0x512>
 80010d2:	074a      	lsls	r2, r1, #29
 80010d4:	d000      	beq.n	80010d8 <__aeabi_ddiv+0x3e4>
 80010d6:	e09e      	b.n	8001216 <__aeabi_ddiv+0x522>
 80010d8:	465a      	mov	r2, fp
 80010da:	01d2      	lsls	r2, r2, #7
 80010dc:	d506      	bpl.n	80010ec <__aeabi_ddiv+0x3f8>
 80010de:	465a      	mov	r2, fp
 80010e0:	4b9b      	ldr	r3, [pc, #620]	; (8001350 <__aeabi_ddiv+0x65c>)
 80010e2:	401a      	ands	r2, r3
 80010e4:	2380      	movs	r3, #128	; 0x80
 80010e6:	4693      	mov	fp, r2
 80010e8:	00db      	lsls	r3, r3, #3
 80010ea:	18e3      	adds	r3, r4, r3
 80010ec:	4a99      	ldr	r2, [pc, #612]	; (8001354 <__aeabi_ddiv+0x660>)
 80010ee:	4293      	cmp	r3, r2
 80010f0:	dd68      	ble.n	80011c4 <__aeabi_ddiv+0x4d0>
 80010f2:	2301      	movs	r3, #1
 80010f4:	9a02      	ldr	r2, [sp, #8]
 80010f6:	4c98      	ldr	r4, [pc, #608]	; (8001358 <__aeabi_ddiv+0x664>)
 80010f8:	401a      	ands	r2, r3
 80010fa:	2300      	movs	r3, #0
 80010fc:	4694      	mov	ip, r2
 80010fe:	4698      	mov	r8, r3
 8001100:	2200      	movs	r2, #0
 8001102:	e6c5      	b.n	8000e90 <__aeabi_ddiv+0x19c>
 8001104:	2280      	movs	r2, #128	; 0x80
 8001106:	464b      	mov	r3, r9
 8001108:	0312      	lsls	r2, r2, #12
 800110a:	4213      	tst	r3, r2
 800110c:	d00a      	beq.n	8001124 <__aeabi_ddiv+0x430>
 800110e:	465b      	mov	r3, fp
 8001110:	4213      	tst	r3, r2
 8001112:	d106      	bne.n	8001122 <__aeabi_ddiv+0x42e>
 8001114:	431a      	orrs	r2, r3
 8001116:	0312      	lsls	r2, r2, #12
 8001118:	0b12      	lsrs	r2, r2, #12
 800111a:	46ac      	mov	ip, r5
 800111c:	4688      	mov	r8, r1
 800111e:	4c8e      	ldr	r4, [pc, #568]	; (8001358 <__aeabi_ddiv+0x664>)
 8001120:	e6b6      	b.n	8000e90 <__aeabi_ddiv+0x19c>
 8001122:	464b      	mov	r3, r9
 8001124:	431a      	orrs	r2, r3
 8001126:	0312      	lsls	r2, r2, #12
 8001128:	0b12      	lsrs	r2, r2, #12
 800112a:	46bc      	mov	ip, r7
 800112c:	4c8a      	ldr	r4, [pc, #552]	; (8001358 <__aeabi_ddiv+0x664>)
 800112e:	e6af      	b.n	8000e90 <__aeabi_ddiv+0x19c>
 8001130:	0003      	movs	r3, r0
 8001132:	465a      	mov	r2, fp
 8001134:	3b28      	subs	r3, #40	; 0x28
 8001136:	409a      	lsls	r2, r3
 8001138:	2300      	movs	r3, #0
 800113a:	4691      	mov	r9, r2
 800113c:	4698      	mov	r8, r3
 800113e:	e657      	b.n	8000df0 <__aeabi_ddiv+0xfc>
 8001140:	4658      	mov	r0, fp
 8001142:	f001 f84f 	bl	80021e4 <__clzsi2>
 8001146:	3020      	adds	r0, #32
 8001148:	e640      	b.n	8000dcc <__aeabi_ddiv+0xd8>
 800114a:	0003      	movs	r3, r0
 800114c:	4652      	mov	r2, sl
 800114e:	3b28      	subs	r3, #40	; 0x28
 8001150:	409a      	lsls	r2, r3
 8001152:	2100      	movs	r1, #0
 8001154:	4693      	mov	fp, r2
 8001156:	e677      	b.n	8000e48 <__aeabi_ddiv+0x154>
 8001158:	f001 f844 	bl	80021e4 <__clzsi2>
 800115c:	3020      	adds	r0, #32
 800115e:	e65f      	b.n	8000e20 <__aeabi_ddiv+0x12c>
 8001160:	4588      	cmp	r8, r1
 8001162:	d200      	bcs.n	8001166 <__aeabi_ddiv+0x472>
 8001164:	e6c7      	b.n	8000ef6 <__aeabi_ddiv+0x202>
 8001166:	464b      	mov	r3, r9
 8001168:	07de      	lsls	r6, r3, #31
 800116a:	085d      	lsrs	r5, r3, #1
 800116c:	4643      	mov	r3, r8
 800116e:	085b      	lsrs	r3, r3, #1
 8001170:	431e      	orrs	r6, r3
 8001172:	4643      	mov	r3, r8
 8001174:	07db      	lsls	r3, r3, #31
 8001176:	469a      	mov	sl, r3
 8001178:	e6c2      	b.n	8000f00 <__aeabi_ddiv+0x20c>
 800117a:	2500      	movs	r5, #0
 800117c:	4592      	cmp	sl, r2
 800117e:	d300      	bcc.n	8001182 <__aeabi_ddiv+0x48e>
 8001180:	e733      	b.n	8000fea <__aeabi_ddiv+0x2f6>
 8001182:	9e03      	ldr	r6, [sp, #12]
 8001184:	4659      	mov	r1, fp
 8001186:	46b4      	mov	ip, r6
 8001188:	44e2      	add	sl, ip
 800118a:	45b2      	cmp	sl, r6
 800118c:	41ad      	sbcs	r5, r5
 800118e:	426d      	negs	r5, r5
 8001190:	4445      	add	r5, r8
 8001192:	18eb      	adds	r3, r5, r3
 8001194:	3901      	subs	r1, #1
 8001196:	4598      	cmp	r8, r3
 8001198:	d207      	bcs.n	80011aa <__aeabi_ddiv+0x4b6>
 800119a:	4298      	cmp	r0, r3
 800119c:	d900      	bls.n	80011a0 <__aeabi_ddiv+0x4ac>
 800119e:	e07f      	b.n	80012a0 <__aeabi_ddiv+0x5ac>
 80011a0:	d100      	bne.n	80011a4 <__aeabi_ddiv+0x4b0>
 80011a2:	e0bc      	b.n	800131e <__aeabi_ddiv+0x62a>
 80011a4:	1a1d      	subs	r5, r3, r0
 80011a6:	468b      	mov	fp, r1
 80011a8:	e71f      	b.n	8000fea <__aeabi_ddiv+0x2f6>
 80011aa:	4598      	cmp	r8, r3
 80011ac:	d1fa      	bne.n	80011a4 <__aeabi_ddiv+0x4b0>
 80011ae:	9d03      	ldr	r5, [sp, #12]
 80011b0:	4555      	cmp	r5, sl
 80011b2:	d9f2      	bls.n	800119a <__aeabi_ddiv+0x4a6>
 80011b4:	4643      	mov	r3, r8
 80011b6:	468b      	mov	fp, r1
 80011b8:	1a1d      	subs	r5, r3, r0
 80011ba:	e716      	b.n	8000fea <__aeabi_ddiv+0x2f6>
 80011bc:	469b      	mov	fp, r3
 80011be:	e6ca      	b.n	8000f56 <__aeabi_ddiv+0x262>
 80011c0:	0015      	movs	r5, r2
 80011c2:	e6e7      	b.n	8000f94 <__aeabi_ddiv+0x2a0>
 80011c4:	465a      	mov	r2, fp
 80011c6:	08c9      	lsrs	r1, r1, #3
 80011c8:	0752      	lsls	r2, r2, #29
 80011ca:	430a      	orrs	r2, r1
 80011cc:	055b      	lsls	r3, r3, #21
 80011ce:	4690      	mov	r8, r2
 80011d0:	0d5c      	lsrs	r4, r3, #21
 80011d2:	465a      	mov	r2, fp
 80011d4:	2301      	movs	r3, #1
 80011d6:	9902      	ldr	r1, [sp, #8]
 80011d8:	0252      	lsls	r2, r2, #9
 80011da:	4019      	ands	r1, r3
 80011dc:	0b12      	lsrs	r2, r2, #12
 80011de:	468c      	mov	ip, r1
 80011e0:	e656      	b.n	8000e90 <__aeabi_ddiv+0x19c>
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d100      	bne.n	80011e8 <__aeabi_ddiv+0x4f4>
 80011e6:	e76f      	b.n	80010c8 <__aeabi_ddiv+0x3d4>
 80011e8:	4446      	add	r6, r8
 80011ea:	1e4a      	subs	r2, r1, #1
 80011ec:	45b0      	cmp	r8, r6
 80011ee:	d929      	bls.n	8001244 <__aeabi_ddiv+0x550>
 80011f0:	0011      	movs	r1, r2
 80011f2:	4286      	cmp	r6, r0
 80011f4:	d000      	beq.n	80011f8 <__aeabi_ddiv+0x504>
 80011f6:	e765      	b.n	80010c4 <__aeabi_ddiv+0x3d0>
 80011f8:	9a03      	ldr	r2, [sp, #12]
 80011fa:	4293      	cmp	r3, r2
 80011fc:	d000      	beq.n	8001200 <__aeabi_ddiv+0x50c>
 80011fe:	e761      	b.n	80010c4 <__aeabi_ddiv+0x3d0>
 8001200:	e762      	b.n	80010c8 <__aeabi_ddiv+0x3d4>
 8001202:	2101      	movs	r1, #1
 8001204:	4249      	negs	r1, r1
 8001206:	2001      	movs	r0, #1
 8001208:	1ac2      	subs	r2, r0, r3
 800120a:	2a38      	cmp	r2, #56	; 0x38
 800120c:	dd21      	ble.n	8001252 <__aeabi_ddiv+0x55e>
 800120e:	9b02      	ldr	r3, [sp, #8]
 8001210:	4003      	ands	r3, r0
 8001212:	469c      	mov	ip, r3
 8001214:	e638      	b.n	8000e88 <__aeabi_ddiv+0x194>
 8001216:	220f      	movs	r2, #15
 8001218:	400a      	ands	r2, r1
 800121a:	2a04      	cmp	r2, #4
 800121c:	d100      	bne.n	8001220 <__aeabi_ddiv+0x52c>
 800121e:	e75b      	b.n	80010d8 <__aeabi_ddiv+0x3e4>
 8001220:	000a      	movs	r2, r1
 8001222:	1d11      	adds	r1, r2, #4
 8001224:	4291      	cmp	r1, r2
 8001226:	4192      	sbcs	r2, r2
 8001228:	4252      	negs	r2, r2
 800122a:	4493      	add	fp, r2
 800122c:	e754      	b.n	80010d8 <__aeabi_ddiv+0x3e4>
 800122e:	4b47      	ldr	r3, [pc, #284]	; (800134c <__aeabi_ddiv+0x658>)
 8001230:	18e3      	adds	r3, r4, r3
 8001232:	2b00      	cmp	r3, #0
 8001234:	dde5      	ble.n	8001202 <__aeabi_ddiv+0x50e>
 8001236:	2201      	movs	r2, #1
 8001238:	4252      	negs	r2, r2
 800123a:	e7f2      	b.n	8001222 <__aeabi_ddiv+0x52e>
 800123c:	001d      	movs	r5, r3
 800123e:	e6fa      	b.n	8001036 <__aeabi_ddiv+0x342>
 8001240:	469a      	mov	sl, r3
 8001242:	e71c      	b.n	800107e <__aeabi_ddiv+0x38a>
 8001244:	42b0      	cmp	r0, r6
 8001246:	d839      	bhi.n	80012bc <__aeabi_ddiv+0x5c8>
 8001248:	d06e      	beq.n	8001328 <__aeabi_ddiv+0x634>
 800124a:	0011      	movs	r1, r2
 800124c:	e73a      	b.n	80010c4 <__aeabi_ddiv+0x3d0>
 800124e:	9302      	str	r3, [sp, #8]
 8001250:	e73a      	b.n	80010c8 <__aeabi_ddiv+0x3d4>
 8001252:	2a1f      	cmp	r2, #31
 8001254:	dc3c      	bgt.n	80012d0 <__aeabi_ddiv+0x5dc>
 8001256:	2320      	movs	r3, #32
 8001258:	1a9b      	subs	r3, r3, r2
 800125a:	000c      	movs	r4, r1
 800125c:	4658      	mov	r0, fp
 800125e:	4099      	lsls	r1, r3
 8001260:	4098      	lsls	r0, r3
 8001262:	1e4b      	subs	r3, r1, #1
 8001264:	4199      	sbcs	r1, r3
 8001266:	465b      	mov	r3, fp
 8001268:	40d4      	lsrs	r4, r2
 800126a:	40d3      	lsrs	r3, r2
 800126c:	4320      	orrs	r0, r4
 800126e:	4308      	orrs	r0, r1
 8001270:	001a      	movs	r2, r3
 8001272:	0743      	lsls	r3, r0, #29
 8001274:	d009      	beq.n	800128a <__aeabi_ddiv+0x596>
 8001276:	230f      	movs	r3, #15
 8001278:	4003      	ands	r3, r0
 800127a:	2b04      	cmp	r3, #4
 800127c:	d005      	beq.n	800128a <__aeabi_ddiv+0x596>
 800127e:	0001      	movs	r1, r0
 8001280:	1d08      	adds	r0, r1, #4
 8001282:	4288      	cmp	r0, r1
 8001284:	419b      	sbcs	r3, r3
 8001286:	425b      	negs	r3, r3
 8001288:	18d2      	adds	r2, r2, r3
 800128a:	0213      	lsls	r3, r2, #8
 800128c:	d53a      	bpl.n	8001304 <__aeabi_ddiv+0x610>
 800128e:	2301      	movs	r3, #1
 8001290:	9a02      	ldr	r2, [sp, #8]
 8001292:	2401      	movs	r4, #1
 8001294:	401a      	ands	r2, r3
 8001296:	2300      	movs	r3, #0
 8001298:	4694      	mov	ip, r2
 800129a:	4698      	mov	r8, r3
 800129c:	2200      	movs	r2, #0
 800129e:	e5f7      	b.n	8000e90 <__aeabi_ddiv+0x19c>
 80012a0:	2102      	movs	r1, #2
 80012a2:	4249      	negs	r1, r1
 80012a4:	468c      	mov	ip, r1
 80012a6:	9d03      	ldr	r5, [sp, #12]
 80012a8:	44e3      	add	fp, ip
 80012aa:	46ac      	mov	ip, r5
 80012ac:	44e2      	add	sl, ip
 80012ae:	45aa      	cmp	sl, r5
 80012b0:	41ad      	sbcs	r5, r5
 80012b2:	426d      	negs	r5, r5
 80012b4:	4445      	add	r5, r8
 80012b6:	18ed      	adds	r5, r5, r3
 80012b8:	1a2d      	subs	r5, r5, r0
 80012ba:	e696      	b.n	8000fea <__aeabi_ddiv+0x2f6>
 80012bc:	1e8a      	subs	r2, r1, #2
 80012be:	9903      	ldr	r1, [sp, #12]
 80012c0:	004d      	lsls	r5, r1, #1
 80012c2:	428d      	cmp	r5, r1
 80012c4:	4189      	sbcs	r1, r1
 80012c6:	4249      	negs	r1, r1
 80012c8:	4441      	add	r1, r8
 80012ca:	1876      	adds	r6, r6, r1
 80012cc:	9503      	str	r5, [sp, #12]
 80012ce:	e78f      	b.n	80011f0 <__aeabi_ddiv+0x4fc>
 80012d0:	201f      	movs	r0, #31
 80012d2:	4240      	negs	r0, r0
 80012d4:	1ac3      	subs	r3, r0, r3
 80012d6:	4658      	mov	r0, fp
 80012d8:	40d8      	lsrs	r0, r3
 80012da:	0003      	movs	r3, r0
 80012dc:	2a20      	cmp	r2, #32
 80012de:	d028      	beq.n	8001332 <__aeabi_ddiv+0x63e>
 80012e0:	2040      	movs	r0, #64	; 0x40
 80012e2:	465d      	mov	r5, fp
 80012e4:	1a82      	subs	r2, r0, r2
 80012e6:	4095      	lsls	r5, r2
 80012e8:	4329      	orrs	r1, r5
 80012ea:	1e4a      	subs	r2, r1, #1
 80012ec:	4191      	sbcs	r1, r2
 80012ee:	4319      	orrs	r1, r3
 80012f0:	2307      	movs	r3, #7
 80012f2:	2200      	movs	r2, #0
 80012f4:	400b      	ands	r3, r1
 80012f6:	d009      	beq.n	800130c <__aeabi_ddiv+0x618>
 80012f8:	230f      	movs	r3, #15
 80012fa:	2200      	movs	r2, #0
 80012fc:	400b      	ands	r3, r1
 80012fe:	0008      	movs	r0, r1
 8001300:	2b04      	cmp	r3, #4
 8001302:	d1bd      	bne.n	8001280 <__aeabi_ddiv+0x58c>
 8001304:	0001      	movs	r1, r0
 8001306:	0753      	lsls	r3, r2, #29
 8001308:	0252      	lsls	r2, r2, #9
 800130a:	0b12      	lsrs	r2, r2, #12
 800130c:	08c9      	lsrs	r1, r1, #3
 800130e:	4319      	orrs	r1, r3
 8001310:	2301      	movs	r3, #1
 8001312:	4688      	mov	r8, r1
 8001314:	9902      	ldr	r1, [sp, #8]
 8001316:	2400      	movs	r4, #0
 8001318:	4019      	ands	r1, r3
 800131a:	468c      	mov	ip, r1
 800131c:	e5b8      	b.n	8000e90 <__aeabi_ddiv+0x19c>
 800131e:	4552      	cmp	r2, sl
 8001320:	d8be      	bhi.n	80012a0 <__aeabi_ddiv+0x5ac>
 8001322:	468b      	mov	fp, r1
 8001324:	2500      	movs	r5, #0
 8001326:	e660      	b.n	8000fea <__aeabi_ddiv+0x2f6>
 8001328:	9d03      	ldr	r5, [sp, #12]
 800132a:	429d      	cmp	r5, r3
 800132c:	d3c6      	bcc.n	80012bc <__aeabi_ddiv+0x5c8>
 800132e:	0011      	movs	r1, r2
 8001330:	e762      	b.n	80011f8 <__aeabi_ddiv+0x504>
 8001332:	2500      	movs	r5, #0
 8001334:	e7d8      	b.n	80012e8 <__aeabi_ddiv+0x5f4>
 8001336:	2280      	movs	r2, #128	; 0x80
 8001338:	465b      	mov	r3, fp
 800133a:	0312      	lsls	r2, r2, #12
 800133c:	431a      	orrs	r2, r3
 800133e:	9b01      	ldr	r3, [sp, #4]
 8001340:	0312      	lsls	r2, r2, #12
 8001342:	0b12      	lsrs	r2, r2, #12
 8001344:	469c      	mov	ip, r3
 8001346:	4688      	mov	r8, r1
 8001348:	4c03      	ldr	r4, [pc, #12]	; (8001358 <__aeabi_ddiv+0x664>)
 800134a:	e5a1      	b.n	8000e90 <__aeabi_ddiv+0x19c>
 800134c:	000003ff 	.word	0x000003ff
 8001350:	feffffff 	.word	0xfeffffff
 8001354:	000007fe 	.word	0x000007fe
 8001358:	000007ff 	.word	0x000007ff

0800135c <__eqdf2>:
 800135c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800135e:	464f      	mov	r7, r9
 8001360:	4646      	mov	r6, r8
 8001362:	46d6      	mov	lr, sl
 8001364:	005c      	lsls	r4, r3, #1
 8001366:	b5c0      	push	{r6, r7, lr}
 8001368:	031f      	lsls	r7, r3, #12
 800136a:	0fdb      	lsrs	r3, r3, #31
 800136c:	469a      	mov	sl, r3
 800136e:	4b17      	ldr	r3, [pc, #92]	; (80013cc <__eqdf2+0x70>)
 8001370:	030e      	lsls	r6, r1, #12
 8001372:	004d      	lsls	r5, r1, #1
 8001374:	4684      	mov	ip, r0
 8001376:	4680      	mov	r8, r0
 8001378:	0b36      	lsrs	r6, r6, #12
 800137a:	0d6d      	lsrs	r5, r5, #21
 800137c:	0fc9      	lsrs	r1, r1, #31
 800137e:	4691      	mov	r9, r2
 8001380:	0b3f      	lsrs	r7, r7, #12
 8001382:	0d64      	lsrs	r4, r4, #21
 8001384:	2001      	movs	r0, #1
 8001386:	429d      	cmp	r5, r3
 8001388:	d008      	beq.n	800139c <__eqdf2+0x40>
 800138a:	429c      	cmp	r4, r3
 800138c:	d001      	beq.n	8001392 <__eqdf2+0x36>
 800138e:	42a5      	cmp	r5, r4
 8001390:	d00b      	beq.n	80013aa <__eqdf2+0x4e>
 8001392:	bc1c      	pop	{r2, r3, r4}
 8001394:	4690      	mov	r8, r2
 8001396:	4699      	mov	r9, r3
 8001398:	46a2      	mov	sl, r4
 800139a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800139c:	4663      	mov	r3, ip
 800139e:	4333      	orrs	r3, r6
 80013a0:	d1f7      	bne.n	8001392 <__eqdf2+0x36>
 80013a2:	42ac      	cmp	r4, r5
 80013a4:	d1f5      	bne.n	8001392 <__eqdf2+0x36>
 80013a6:	433a      	orrs	r2, r7
 80013a8:	d1f3      	bne.n	8001392 <__eqdf2+0x36>
 80013aa:	2001      	movs	r0, #1
 80013ac:	42be      	cmp	r6, r7
 80013ae:	d1f0      	bne.n	8001392 <__eqdf2+0x36>
 80013b0:	45c8      	cmp	r8, r9
 80013b2:	d1ee      	bne.n	8001392 <__eqdf2+0x36>
 80013b4:	4551      	cmp	r1, sl
 80013b6:	d007      	beq.n	80013c8 <__eqdf2+0x6c>
 80013b8:	2d00      	cmp	r5, #0
 80013ba:	d1ea      	bne.n	8001392 <__eqdf2+0x36>
 80013bc:	4663      	mov	r3, ip
 80013be:	431e      	orrs	r6, r3
 80013c0:	0030      	movs	r0, r6
 80013c2:	1e46      	subs	r6, r0, #1
 80013c4:	41b0      	sbcs	r0, r6
 80013c6:	e7e4      	b.n	8001392 <__eqdf2+0x36>
 80013c8:	2000      	movs	r0, #0
 80013ca:	e7e2      	b.n	8001392 <__eqdf2+0x36>
 80013cc:	000007ff 	.word	0x000007ff

080013d0 <__gedf2>:
 80013d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013d2:	4645      	mov	r5, r8
 80013d4:	46de      	mov	lr, fp
 80013d6:	4657      	mov	r7, sl
 80013d8:	464e      	mov	r6, r9
 80013da:	b5e0      	push	{r5, r6, r7, lr}
 80013dc:	031f      	lsls	r7, r3, #12
 80013de:	0b3d      	lsrs	r5, r7, #12
 80013e0:	4f2c      	ldr	r7, [pc, #176]	; (8001494 <__gedf2+0xc4>)
 80013e2:	030e      	lsls	r6, r1, #12
 80013e4:	004c      	lsls	r4, r1, #1
 80013e6:	46ab      	mov	fp, r5
 80013e8:	005d      	lsls	r5, r3, #1
 80013ea:	4684      	mov	ip, r0
 80013ec:	0b36      	lsrs	r6, r6, #12
 80013ee:	0d64      	lsrs	r4, r4, #21
 80013f0:	0fc9      	lsrs	r1, r1, #31
 80013f2:	4690      	mov	r8, r2
 80013f4:	0d6d      	lsrs	r5, r5, #21
 80013f6:	0fdb      	lsrs	r3, r3, #31
 80013f8:	42bc      	cmp	r4, r7
 80013fa:	d02a      	beq.n	8001452 <__gedf2+0x82>
 80013fc:	4f25      	ldr	r7, [pc, #148]	; (8001494 <__gedf2+0xc4>)
 80013fe:	42bd      	cmp	r5, r7
 8001400:	d02d      	beq.n	800145e <__gedf2+0x8e>
 8001402:	2c00      	cmp	r4, #0
 8001404:	d10f      	bne.n	8001426 <__gedf2+0x56>
 8001406:	4330      	orrs	r0, r6
 8001408:	0007      	movs	r7, r0
 800140a:	4681      	mov	r9, r0
 800140c:	4278      	negs	r0, r7
 800140e:	4178      	adcs	r0, r7
 8001410:	b2c0      	uxtb	r0, r0
 8001412:	2d00      	cmp	r5, #0
 8001414:	d117      	bne.n	8001446 <__gedf2+0x76>
 8001416:	465f      	mov	r7, fp
 8001418:	433a      	orrs	r2, r7
 800141a:	d114      	bne.n	8001446 <__gedf2+0x76>
 800141c:	464b      	mov	r3, r9
 800141e:	2000      	movs	r0, #0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d00a      	beq.n	800143a <__gedf2+0x6a>
 8001424:	e006      	b.n	8001434 <__gedf2+0x64>
 8001426:	2d00      	cmp	r5, #0
 8001428:	d102      	bne.n	8001430 <__gedf2+0x60>
 800142a:	4658      	mov	r0, fp
 800142c:	4302      	orrs	r2, r0
 800142e:	d001      	beq.n	8001434 <__gedf2+0x64>
 8001430:	4299      	cmp	r1, r3
 8001432:	d018      	beq.n	8001466 <__gedf2+0x96>
 8001434:	4248      	negs	r0, r1
 8001436:	2101      	movs	r1, #1
 8001438:	4308      	orrs	r0, r1
 800143a:	bc3c      	pop	{r2, r3, r4, r5}
 800143c:	4690      	mov	r8, r2
 800143e:	4699      	mov	r9, r3
 8001440:	46a2      	mov	sl, r4
 8001442:	46ab      	mov	fp, r5
 8001444:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001446:	2800      	cmp	r0, #0
 8001448:	d0f2      	beq.n	8001430 <__gedf2+0x60>
 800144a:	2001      	movs	r0, #1
 800144c:	3b01      	subs	r3, #1
 800144e:	4318      	orrs	r0, r3
 8001450:	e7f3      	b.n	800143a <__gedf2+0x6a>
 8001452:	0037      	movs	r7, r6
 8001454:	4307      	orrs	r7, r0
 8001456:	d0d1      	beq.n	80013fc <__gedf2+0x2c>
 8001458:	2002      	movs	r0, #2
 800145a:	4240      	negs	r0, r0
 800145c:	e7ed      	b.n	800143a <__gedf2+0x6a>
 800145e:	465f      	mov	r7, fp
 8001460:	4317      	orrs	r7, r2
 8001462:	d0ce      	beq.n	8001402 <__gedf2+0x32>
 8001464:	e7f8      	b.n	8001458 <__gedf2+0x88>
 8001466:	42ac      	cmp	r4, r5
 8001468:	dce4      	bgt.n	8001434 <__gedf2+0x64>
 800146a:	da03      	bge.n	8001474 <__gedf2+0xa4>
 800146c:	1e48      	subs	r0, r1, #1
 800146e:	2101      	movs	r1, #1
 8001470:	4308      	orrs	r0, r1
 8001472:	e7e2      	b.n	800143a <__gedf2+0x6a>
 8001474:	455e      	cmp	r6, fp
 8001476:	d8dd      	bhi.n	8001434 <__gedf2+0x64>
 8001478:	d006      	beq.n	8001488 <__gedf2+0xb8>
 800147a:	2000      	movs	r0, #0
 800147c:	455e      	cmp	r6, fp
 800147e:	d2dc      	bcs.n	800143a <__gedf2+0x6a>
 8001480:	2301      	movs	r3, #1
 8001482:	1e48      	subs	r0, r1, #1
 8001484:	4318      	orrs	r0, r3
 8001486:	e7d8      	b.n	800143a <__gedf2+0x6a>
 8001488:	45c4      	cmp	ip, r8
 800148a:	d8d3      	bhi.n	8001434 <__gedf2+0x64>
 800148c:	2000      	movs	r0, #0
 800148e:	45c4      	cmp	ip, r8
 8001490:	d3f6      	bcc.n	8001480 <__gedf2+0xb0>
 8001492:	e7d2      	b.n	800143a <__gedf2+0x6a>
 8001494:	000007ff 	.word	0x000007ff

08001498 <__ledf2>:
 8001498:	b5f0      	push	{r4, r5, r6, r7, lr}
 800149a:	464e      	mov	r6, r9
 800149c:	4645      	mov	r5, r8
 800149e:	46de      	mov	lr, fp
 80014a0:	4657      	mov	r7, sl
 80014a2:	005c      	lsls	r4, r3, #1
 80014a4:	b5e0      	push	{r5, r6, r7, lr}
 80014a6:	031f      	lsls	r7, r3, #12
 80014a8:	0fdb      	lsrs	r3, r3, #31
 80014aa:	4699      	mov	r9, r3
 80014ac:	4b2a      	ldr	r3, [pc, #168]	; (8001558 <__ledf2+0xc0>)
 80014ae:	030e      	lsls	r6, r1, #12
 80014b0:	004d      	lsls	r5, r1, #1
 80014b2:	0fc9      	lsrs	r1, r1, #31
 80014b4:	4684      	mov	ip, r0
 80014b6:	0b36      	lsrs	r6, r6, #12
 80014b8:	0d6d      	lsrs	r5, r5, #21
 80014ba:	468b      	mov	fp, r1
 80014bc:	4690      	mov	r8, r2
 80014be:	0b3f      	lsrs	r7, r7, #12
 80014c0:	0d64      	lsrs	r4, r4, #21
 80014c2:	429d      	cmp	r5, r3
 80014c4:	d020      	beq.n	8001508 <__ledf2+0x70>
 80014c6:	4b24      	ldr	r3, [pc, #144]	; (8001558 <__ledf2+0xc0>)
 80014c8:	429c      	cmp	r4, r3
 80014ca:	d022      	beq.n	8001512 <__ledf2+0x7a>
 80014cc:	2d00      	cmp	r5, #0
 80014ce:	d112      	bne.n	80014f6 <__ledf2+0x5e>
 80014d0:	4330      	orrs	r0, r6
 80014d2:	4243      	negs	r3, r0
 80014d4:	4143      	adcs	r3, r0
 80014d6:	b2db      	uxtb	r3, r3
 80014d8:	2c00      	cmp	r4, #0
 80014da:	d01f      	beq.n	800151c <__ledf2+0x84>
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d00c      	beq.n	80014fa <__ledf2+0x62>
 80014e0:	464b      	mov	r3, r9
 80014e2:	2001      	movs	r0, #1
 80014e4:	3b01      	subs	r3, #1
 80014e6:	4303      	orrs	r3, r0
 80014e8:	0018      	movs	r0, r3
 80014ea:	bc3c      	pop	{r2, r3, r4, r5}
 80014ec:	4690      	mov	r8, r2
 80014ee:	4699      	mov	r9, r3
 80014f0:	46a2      	mov	sl, r4
 80014f2:	46ab      	mov	fp, r5
 80014f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014f6:	2c00      	cmp	r4, #0
 80014f8:	d016      	beq.n	8001528 <__ledf2+0x90>
 80014fa:	45cb      	cmp	fp, r9
 80014fc:	d017      	beq.n	800152e <__ledf2+0x96>
 80014fe:	465b      	mov	r3, fp
 8001500:	4259      	negs	r1, r3
 8001502:	2301      	movs	r3, #1
 8001504:	430b      	orrs	r3, r1
 8001506:	e7ef      	b.n	80014e8 <__ledf2+0x50>
 8001508:	0031      	movs	r1, r6
 800150a:	2302      	movs	r3, #2
 800150c:	4301      	orrs	r1, r0
 800150e:	d1eb      	bne.n	80014e8 <__ledf2+0x50>
 8001510:	e7d9      	b.n	80014c6 <__ledf2+0x2e>
 8001512:	0039      	movs	r1, r7
 8001514:	2302      	movs	r3, #2
 8001516:	4311      	orrs	r1, r2
 8001518:	d1e6      	bne.n	80014e8 <__ledf2+0x50>
 800151a:	e7d7      	b.n	80014cc <__ledf2+0x34>
 800151c:	433a      	orrs	r2, r7
 800151e:	d1dd      	bne.n	80014dc <__ledf2+0x44>
 8001520:	2300      	movs	r3, #0
 8001522:	2800      	cmp	r0, #0
 8001524:	d0e0      	beq.n	80014e8 <__ledf2+0x50>
 8001526:	e7ea      	b.n	80014fe <__ledf2+0x66>
 8001528:	433a      	orrs	r2, r7
 800152a:	d1e6      	bne.n	80014fa <__ledf2+0x62>
 800152c:	e7e7      	b.n	80014fe <__ledf2+0x66>
 800152e:	42a5      	cmp	r5, r4
 8001530:	dce5      	bgt.n	80014fe <__ledf2+0x66>
 8001532:	db05      	blt.n	8001540 <__ledf2+0xa8>
 8001534:	42be      	cmp	r6, r7
 8001536:	d8e2      	bhi.n	80014fe <__ledf2+0x66>
 8001538:	d007      	beq.n	800154a <__ledf2+0xb2>
 800153a:	2300      	movs	r3, #0
 800153c:	42be      	cmp	r6, r7
 800153e:	d2d3      	bcs.n	80014e8 <__ledf2+0x50>
 8001540:	4659      	mov	r1, fp
 8001542:	2301      	movs	r3, #1
 8001544:	3901      	subs	r1, #1
 8001546:	430b      	orrs	r3, r1
 8001548:	e7ce      	b.n	80014e8 <__ledf2+0x50>
 800154a:	45c4      	cmp	ip, r8
 800154c:	d8d7      	bhi.n	80014fe <__ledf2+0x66>
 800154e:	2300      	movs	r3, #0
 8001550:	45c4      	cmp	ip, r8
 8001552:	d3f5      	bcc.n	8001540 <__ledf2+0xa8>
 8001554:	e7c8      	b.n	80014e8 <__ledf2+0x50>
 8001556:	46c0      	nop			; (mov r8, r8)
 8001558:	000007ff 	.word	0x000007ff

0800155c <__aeabi_dmul>:
 800155c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800155e:	4657      	mov	r7, sl
 8001560:	4645      	mov	r5, r8
 8001562:	46de      	mov	lr, fp
 8001564:	464e      	mov	r6, r9
 8001566:	b5e0      	push	{r5, r6, r7, lr}
 8001568:	030c      	lsls	r4, r1, #12
 800156a:	4698      	mov	r8, r3
 800156c:	004e      	lsls	r6, r1, #1
 800156e:	0b23      	lsrs	r3, r4, #12
 8001570:	b087      	sub	sp, #28
 8001572:	0007      	movs	r7, r0
 8001574:	4692      	mov	sl, r2
 8001576:	469b      	mov	fp, r3
 8001578:	0d76      	lsrs	r6, r6, #21
 800157a:	0fcd      	lsrs	r5, r1, #31
 800157c:	2e00      	cmp	r6, #0
 800157e:	d06b      	beq.n	8001658 <__aeabi_dmul+0xfc>
 8001580:	4b6d      	ldr	r3, [pc, #436]	; (8001738 <__aeabi_dmul+0x1dc>)
 8001582:	429e      	cmp	r6, r3
 8001584:	d035      	beq.n	80015f2 <__aeabi_dmul+0x96>
 8001586:	2480      	movs	r4, #128	; 0x80
 8001588:	465b      	mov	r3, fp
 800158a:	0f42      	lsrs	r2, r0, #29
 800158c:	0424      	lsls	r4, r4, #16
 800158e:	00db      	lsls	r3, r3, #3
 8001590:	4314      	orrs	r4, r2
 8001592:	431c      	orrs	r4, r3
 8001594:	00c3      	lsls	r3, r0, #3
 8001596:	4699      	mov	r9, r3
 8001598:	4b68      	ldr	r3, [pc, #416]	; (800173c <__aeabi_dmul+0x1e0>)
 800159a:	46a3      	mov	fp, r4
 800159c:	469c      	mov	ip, r3
 800159e:	2300      	movs	r3, #0
 80015a0:	2700      	movs	r7, #0
 80015a2:	4466      	add	r6, ip
 80015a4:	9302      	str	r3, [sp, #8]
 80015a6:	4643      	mov	r3, r8
 80015a8:	031c      	lsls	r4, r3, #12
 80015aa:	005a      	lsls	r2, r3, #1
 80015ac:	0fdb      	lsrs	r3, r3, #31
 80015ae:	4650      	mov	r0, sl
 80015b0:	0b24      	lsrs	r4, r4, #12
 80015b2:	0d52      	lsrs	r2, r2, #21
 80015b4:	4698      	mov	r8, r3
 80015b6:	d100      	bne.n	80015ba <__aeabi_dmul+0x5e>
 80015b8:	e076      	b.n	80016a8 <__aeabi_dmul+0x14c>
 80015ba:	4b5f      	ldr	r3, [pc, #380]	; (8001738 <__aeabi_dmul+0x1dc>)
 80015bc:	429a      	cmp	r2, r3
 80015be:	d06d      	beq.n	800169c <__aeabi_dmul+0x140>
 80015c0:	2380      	movs	r3, #128	; 0x80
 80015c2:	0f41      	lsrs	r1, r0, #29
 80015c4:	041b      	lsls	r3, r3, #16
 80015c6:	430b      	orrs	r3, r1
 80015c8:	495c      	ldr	r1, [pc, #368]	; (800173c <__aeabi_dmul+0x1e0>)
 80015ca:	00e4      	lsls	r4, r4, #3
 80015cc:	468c      	mov	ip, r1
 80015ce:	431c      	orrs	r4, r3
 80015d0:	00c3      	lsls	r3, r0, #3
 80015d2:	2000      	movs	r0, #0
 80015d4:	4462      	add	r2, ip
 80015d6:	4641      	mov	r1, r8
 80015d8:	18b6      	adds	r6, r6, r2
 80015da:	4069      	eors	r1, r5
 80015dc:	1c72      	adds	r2, r6, #1
 80015de:	9101      	str	r1, [sp, #4]
 80015e0:	4694      	mov	ip, r2
 80015e2:	4307      	orrs	r7, r0
 80015e4:	2f0f      	cmp	r7, #15
 80015e6:	d900      	bls.n	80015ea <__aeabi_dmul+0x8e>
 80015e8:	e0b0      	b.n	800174c <__aeabi_dmul+0x1f0>
 80015ea:	4a55      	ldr	r2, [pc, #340]	; (8001740 <__aeabi_dmul+0x1e4>)
 80015ec:	00bf      	lsls	r7, r7, #2
 80015ee:	59d2      	ldr	r2, [r2, r7]
 80015f0:	4697      	mov	pc, r2
 80015f2:	465b      	mov	r3, fp
 80015f4:	4303      	orrs	r3, r0
 80015f6:	4699      	mov	r9, r3
 80015f8:	d000      	beq.n	80015fc <__aeabi_dmul+0xa0>
 80015fa:	e087      	b.n	800170c <__aeabi_dmul+0x1b0>
 80015fc:	2300      	movs	r3, #0
 80015fe:	469b      	mov	fp, r3
 8001600:	3302      	adds	r3, #2
 8001602:	2708      	movs	r7, #8
 8001604:	9302      	str	r3, [sp, #8]
 8001606:	e7ce      	b.n	80015a6 <__aeabi_dmul+0x4a>
 8001608:	4642      	mov	r2, r8
 800160a:	9201      	str	r2, [sp, #4]
 800160c:	2802      	cmp	r0, #2
 800160e:	d067      	beq.n	80016e0 <__aeabi_dmul+0x184>
 8001610:	2803      	cmp	r0, #3
 8001612:	d100      	bne.n	8001616 <__aeabi_dmul+0xba>
 8001614:	e20e      	b.n	8001a34 <__aeabi_dmul+0x4d8>
 8001616:	2801      	cmp	r0, #1
 8001618:	d000      	beq.n	800161c <__aeabi_dmul+0xc0>
 800161a:	e162      	b.n	80018e2 <__aeabi_dmul+0x386>
 800161c:	2300      	movs	r3, #0
 800161e:	2400      	movs	r4, #0
 8001620:	2200      	movs	r2, #0
 8001622:	4699      	mov	r9, r3
 8001624:	9901      	ldr	r1, [sp, #4]
 8001626:	4001      	ands	r1, r0
 8001628:	b2cd      	uxtb	r5, r1
 800162a:	2100      	movs	r1, #0
 800162c:	0312      	lsls	r2, r2, #12
 800162e:	0d0b      	lsrs	r3, r1, #20
 8001630:	0b12      	lsrs	r2, r2, #12
 8001632:	051b      	lsls	r3, r3, #20
 8001634:	4313      	orrs	r3, r2
 8001636:	4a43      	ldr	r2, [pc, #268]	; (8001744 <__aeabi_dmul+0x1e8>)
 8001638:	0524      	lsls	r4, r4, #20
 800163a:	4013      	ands	r3, r2
 800163c:	431c      	orrs	r4, r3
 800163e:	0064      	lsls	r4, r4, #1
 8001640:	07ed      	lsls	r5, r5, #31
 8001642:	0864      	lsrs	r4, r4, #1
 8001644:	432c      	orrs	r4, r5
 8001646:	4648      	mov	r0, r9
 8001648:	0021      	movs	r1, r4
 800164a:	b007      	add	sp, #28
 800164c:	bc3c      	pop	{r2, r3, r4, r5}
 800164e:	4690      	mov	r8, r2
 8001650:	4699      	mov	r9, r3
 8001652:	46a2      	mov	sl, r4
 8001654:	46ab      	mov	fp, r5
 8001656:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001658:	4303      	orrs	r3, r0
 800165a:	4699      	mov	r9, r3
 800165c:	d04f      	beq.n	80016fe <__aeabi_dmul+0x1a2>
 800165e:	465b      	mov	r3, fp
 8001660:	2b00      	cmp	r3, #0
 8001662:	d100      	bne.n	8001666 <__aeabi_dmul+0x10a>
 8001664:	e189      	b.n	800197a <__aeabi_dmul+0x41e>
 8001666:	4658      	mov	r0, fp
 8001668:	f000 fdbc 	bl	80021e4 <__clzsi2>
 800166c:	0003      	movs	r3, r0
 800166e:	3b0b      	subs	r3, #11
 8001670:	2b1c      	cmp	r3, #28
 8001672:	dd00      	ble.n	8001676 <__aeabi_dmul+0x11a>
 8001674:	e17a      	b.n	800196c <__aeabi_dmul+0x410>
 8001676:	221d      	movs	r2, #29
 8001678:	1ad3      	subs	r3, r2, r3
 800167a:	003a      	movs	r2, r7
 800167c:	0001      	movs	r1, r0
 800167e:	465c      	mov	r4, fp
 8001680:	40da      	lsrs	r2, r3
 8001682:	3908      	subs	r1, #8
 8001684:	408c      	lsls	r4, r1
 8001686:	0013      	movs	r3, r2
 8001688:	408f      	lsls	r7, r1
 800168a:	4323      	orrs	r3, r4
 800168c:	469b      	mov	fp, r3
 800168e:	46b9      	mov	r9, r7
 8001690:	2300      	movs	r3, #0
 8001692:	4e2d      	ldr	r6, [pc, #180]	; (8001748 <__aeabi_dmul+0x1ec>)
 8001694:	2700      	movs	r7, #0
 8001696:	1a36      	subs	r6, r6, r0
 8001698:	9302      	str	r3, [sp, #8]
 800169a:	e784      	b.n	80015a6 <__aeabi_dmul+0x4a>
 800169c:	4653      	mov	r3, sl
 800169e:	4323      	orrs	r3, r4
 80016a0:	d12a      	bne.n	80016f8 <__aeabi_dmul+0x19c>
 80016a2:	2400      	movs	r4, #0
 80016a4:	2002      	movs	r0, #2
 80016a6:	e796      	b.n	80015d6 <__aeabi_dmul+0x7a>
 80016a8:	4653      	mov	r3, sl
 80016aa:	4323      	orrs	r3, r4
 80016ac:	d020      	beq.n	80016f0 <__aeabi_dmul+0x194>
 80016ae:	2c00      	cmp	r4, #0
 80016b0:	d100      	bne.n	80016b4 <__aeabi_dmul+0x158>
 80016b2:	e157      	b.n	8001964 <__aeabi_dmul+0x408>
 80016b4:	0020      	movs	r0, r4
 80016b6:	f000 fd95 	bl	80021e4 <__clzsi2>
 80016ba:	0003      	movs	r3, r0
 80016bc:	3b0b      	subs	r3, #11
 80016be:	2b1c      	cmp	r3, #28
 80016c0:	dd00      	ble.n	80016c4 <__aeabi_dmul+0x168>
 80016c2:	e149      	b.n	8001958 <__aeabi_dmul+0x3fc>
 80016c4:	211d      	movs	r1, #29
 80016c6:	1acb      	subs	r3, r1, r3
 80016c8:	4651      	mov	r1, sl
 80016ca:	0002      	movs	r2, r0
 80016cc:	40d9      	lsrs	r1, r3
 80016ce:	4653      	mov	r3, sl
 80016d0:	3a08      	subs	r2, #8
 80016d2:	4094      	lsls	r4, r2
 80016d4:	4093      	lsls	r3, r2
 80016d6:	430c      	orrs	r4, r1
 80016d8:	4a1b      	ldr	r2, [pc, #108]	; (8001748 <__aeabi_dmul+0x1ec>)
 80016da:	1a12      	subs	r2, r2, r0
 80016dc:	2000      	movs	r0, #0
 80016de:	e77a      	b.n	80015d6 <__aeabi_dmul+0x7a>
 80016e0:	2501      	movs	r5, #1
 80016e2:	9b01      	ldr	r3, [sp, #4]
 80016e4:	4c14      	ldr	r4, [pc, #80]	; (8001738 <__aeabi_dmul+0x1dc>)
 80016e6:	401d      	ands	r5, r3
 80016e8:	2300      	movs	r3, #0
 80016ea:	2200      	movs	r2, #0
 80016ec:	4699      	mov	r9, r3
 80016ee:	e79c      	b.n	800162a <__aeabi_dmul+0xce>
 80016f0:	2400      	movs	r4, #0
 80016f2:	2200      	movs	r2, #0
 80016f4:	2001      	movs	r0, #1
 80016f6:	e76e      	b.n	80015d6 <__aeabi_dmul+0x7a>
 80016f8:	4653      	mov	r3, sl
 80016fa:	2003      	movs	r0, #3
 80016fc:	e76b      	b.n	80015d6 <__aeabi_dmul+0x7a>
 80016fe:	2300      	movs	r3, #0
 8001700:	469b      	mov	fp, r3
 8001702:	3301      	adds	r3, #1
 8001704:	2704      	movs	r7, #4
 8001706:	2600      	movs	r6, #0
 8001708:	9302      	str	r3, [sp, #8]
 800170a:	e74c      	b.n	80015a6 <__aeabi_dmul+0x4a>
 800170c:	2303      	movs	r3, #3
 800170e:	4681      	mov	r9, r0
 8001710:	270c      	movs	r7, #12
 8001712:	9302      	str	r3, [sp, #8]
 8001714:	e747      	b.n	80015a6 <__aeabi_dmul+0x4a>
 8001716:	2280      	movs	r2, #128	; 0x80
 8001718:	2300      	movs	r3, #0
 800171a:	2500      	movs	r5, #0
 800171c:	0312      	lsls	r2, r2, #12
 800171e:	4699      	mov	r9, r3
 8001720:	4c05      	ldr	r4, [pc, #20]	; (8001738 <__aeabi_dmul+0x1dc>)
 8001722:	e782      	b.n	800162a <__aeabi_dmul+0xce>
 8001724:	465c      	mov	r4, fp
 8001726:	464b      	mov	r3, r9
 8001728:	9802      	ldr	r0, [sp, #8]
 800172a:	e76f      	b.n	800160c <__aeabi_dmul+0xb0>
 800172c:	465c      	mov	r4, fp
 800172e:	464b      	mov	r3, r9
 8001730:	9501      	str	r5, [sp, #4]
 8001732:	9802      	ldr	r0, [sp, #8]
 8001734:	e76a      	b.n	800160c <__aeabi_dmul+0xb0>
 8001736:	46c0      	nop			; (mov r8, r8)
 8001738:	000007ff 	.word	0x000007ff
 800173c:	fffffc01 	.word	0xfffffc01
 8001740:	08007dc4 	.word	0x08007dc4
 8001744:	800fffff 	.word	0x800fffff
 8001748:	fffffc0d 	.word	0xfffffc0d
 800174c:	464a      	mov	r2, r9
 800174e:	4649      	mov	r1, r9
 8001750:	0c17      	lsrs	r7, r2, #16
 8001752:	0c1a      	lsrs	r2, r3, #16
 8001754:	041b      	lsls	r3, r3, #16
 8001756:	0c1b      	lsrs	r3, r3, #16
 8001758:	0408      	lsls	r0, r1, #16
 800175a:	0019      	movs	r1, r3
 800175c:	0c00      	lsrs	r0, r0, #16
 800175e:	4341      	muls	r1, r0
 8001760:	0015      	movs	r5, r2
 8001762:	4688      	mov	r8, r1
 8001764:	0019      	movs	r1, r3
 8001766:	437d      	muls	r5, r7
 8001768:	4379      	muls	r1, r7
 800176a:	9503      	str	r5, [sp, #12]
 800176c:	4689      	mov	r9, r1
 800176e:	0029      	movs	r1, r5
 8001770:	0015      	movs	r5, r2
 8001772:	4345      	muls	r5, r0
 8001774:	444d      	add	r5, r9
 8001776:	9502      	str	r5, [sp, #8]
 8001778:	4645      	mov	r5, r8
 800177a:	0c2d      	lsrs	r5, r5, #16
 800177c:	46aa      	mov	sl, r5
 800177e:	9d02      	ldr	r5, [sp, #8]
 8001780:	4455      	add	r5, sl
 8001782:	45a9      	cmp	r9, r5
 8001784:	d906      	bls.n	8001794 <__aeabi_dmul+0x238>
 8001786:	468a      	mov	sl, r1
 8001788:	2180      	movs	r1, #128	; 0x80
 800178a:	0249      	lsls	r1, r1, #9
 800178c:	4689      	mov	r9, r1
 800178e:	44ca      	add	sl, r9
 8001790:	4651      	mov	r1, sl
 8001792:	9103      	str	r1, [sp, #12]
 8001794:	0c29      	lsrs	r1, r5, #16
 8001796:	9104      	str	r1, [sp, #16]
 8001798:	4641      	mov	r1, r8
 800179a:	0409      	lsls	r1, r1, #16
 800179c:	042d      	lsls	r5, r5, #16
 800179e:	0c09      	lsrs	r1, r1, #16
 80017a0:	4688      	mov	r8, r1
 80017a2:	0029      	movs	r1, r5
 80017a4:	0c25      	lsrs	r5, r4, #16
 80017a6:	0424      	lsls	r4, r4, #16
 80017a8:	4441      	add	r1, r8
 80017aa:	0c24      	lsrs	r4, r4, #16
 80017ac:	9105      	str	r1, [sp, #20]
 80017ae:	0021      	movs	r1, r4
 80017b0:	4341      	muls	r1, r0
 80017b2:	4688      	mov	r8, r1
 80017b4:	0021      	movs	r1, r4
 80017b6:	4379      	muls	r1, r7
 80017b8:	468a      	mov	sl, r1
 80017ba:	4368      	muls	r0, r5
 80017bc:	4641      	mov	r1, r8
 80017be:	4450      	add	r0, sl
 80017c0:	4681      	mov	r9, r0
 80017c2:	0c08      	lsrs	r0, r1, #16
 80017c4:	4448      	add	r0, r9
 80017c6:	436f      	muls	r7, r5
 80017c8:	4582      	cmp	sl, r0
 80017ca:	d903      	bls.n	80017d4 <__aeabi_dmul+0x278>
 80017cc:	2180      	movs	r1, #128	; 0x80
 80017ce:	0249      	lsls	r1, r1, #9
 80017d0:	4689      	mov	r9, r1
 80017d2:	444f      	add	r7, r9
 80017d4:	0c01      	lsrs	r1, r0, #16
 80017d6:	4689      	mov	r9, r1
 80017d8:	0039      	movs	r1, r7
 80017da:	4449      	add	r1, r9
 80017dc:	9102      	str	r1, [sp, #8]
 80017de:	4641      	mov	r1, r8
 80017e0:	040f      	lsls	r7, r1, #16
 80017e2:	9904      	ldr	r1, [sp, #16]
 80017e4:	0c3f      	lsrs	r7, r7, #16
 80017e6:	4688      	mov	r8, r1
 80017e8:	0400      	lsls	r0, r0, #16
 80017ea:	19c0      	adds	r0, r0, r7
 80017ec:	4480      	add	r8, r0
 80017ee:	4641      	mov	r1, r8
 80017f0:	9104      	str	r1, [sp, #16]
 80017f2:	4659      	mov	r1, fp
 80017f4:	0c0f      	lsrs	r7, r1, #16
 80017f6:	0409      	lsls	r1, r1, #16
 80017f8:	0c09      	lsrs	r1, r1, #16
 80017fa:	4688      	mov	r8, r1
 80017fc:	4359      	muls	r1, r3
 80017fe:	468a      	mov	sl, r1
 8001800:	0039      	movs	r1, r7
 8001802:	4351      	muls	r1, r2
 8001804:	4689      	mov	r9, r1
 8001806:	4641      	mov	r1, r8
 8001808:	434a      	muls	r2, r1
 800180a:	4651      	mov	r1, sl
 800180c:	0c09      	lsrs	r1, r1, #16
 800180e:	468b      	mov	fp, r1
 8001810:	437b      	muls	r3, r7
 8001812:	18d2      	adds	r2, r2, r3
 8001814:	445a      	add	r2, fp
 8001816:	4293      	cmp	r3, r2
 8001818:	d903      	bls.n	8001822 <__aeabi_dmul+0x2c6>
 800181a:	2380      	movs	r3, #128	; 0x80
 800181c:	025b      	lsls	r3, r3, #9
 800181e:	469b      	mov	fp, r3
 8001820:	44d9      	add	r9, fp
 8001822:	4651      	mov	r1, sl
 8001824:	0409      	lsls	r1, r1, #16
 8001826:	0c09      	lsrs	r1, r1, #16
 8001828:	468a      	mov	sl, r1
 800182a:	4641      	mov	r1, r8
 800182c:	4361      	muls	r1, r4
 800182e:	437c      	muls	r4, r7
 8001830:	0c13      	lsrs	r3, r2, #16
 8001832:	0412      	lsls	r2, r2, #16
 8001834:	444b      	add	r3, r9
 8001836:	4452      	add	r2, sl
 8001838:	46a1      	mov	r9, r4
 800183a:	468a      	mov	sl, r1
 800183c:	003c      	movs	r4, r7
 800183e:	4641      	mov	r1, r8
 8001840:	436c      	muls	r4, r5
 8001842:	434d      	muls	r5, r1
 8001844:	4651      	mov	r1, sl
 8001846:	444d      	add	r5, r9
 8001848:	0c0f      	lsrs	r7, r1, #16
 800184a:	197d      	adds	r5, r7, r5
 800184c:	45a9      	cmp	r9, r5
 800184e:	d903      	bls.n	8001858 <__aeabi_dmul+0x2fc>
 8001850:	2180      	movs	r1, #128	; 0x80
 8001852:	0249      	lsls	r1, r1, #9
 8001854:	4688      	mov	r8, r1
 8001856:	4444      	add	r4, r8
 8001858:	9f04      	ldr	r7, [sp, #16]
 800185a:	9903      	ldr	r1, [sp, #12]
 800185c:	46b8      	mov	r8, r7
 800185e:	4441      	add	r1, r8
 8001860:	468b      	mov	fp, r1
 8001862:	4583      	cmp	fp, r0
 8001864:	4180      	sbcs	r0, r0
 8001866:	4241      	negs	r1, r0
 8001868:	4688      	mov	r8, r1
 800186a:	4651      	mov	r1, sl
 800186c:	0408      	lsls	r0, r1, #16
 800186e:	042f      	lsls	r7, r5, #16
 8001870:	0c00      	lsrs	r0, r0, #16
 8001872:	183f      	adds	r7, r7, r0
 8001874:	4658      	mov	r0, fp
 8001876:	9902      	ldr	r1, [sp, #8]
 8001878:	1810      	adds	r0, r2, r0
 800187a:	4689      	mov	r9, r1
 800187c:	4290      	cmp	r0, r2
 800187e:	4192      	sbcs	r2, r2
 8001880:	444f      	add	r7, r9
 8001882:	46ba      	mov	sl, r7
 8001884:	4252      	negs	r2, r2
 8001886:	4699      	mov	r9, r3
 8001888:	4693      	mov	fp, r2
 800188a:	44c2      	add	sl, r8
 800188c:	44d1      	add	r9, sl
 800188e:	44cb      	add	fp, r9
 8001890:	428f      	cmp	r7, r1
 8001892:	41bf      	sbcs	r7, r7
 8001894:	45c2      	cmp	sl, r8
 8001896:	4189      	sbcs	r1, r1
 8001898:	4599      	cmp	r9, r3
 800189a:	419b      	sbcs	r3, r3
 800189c:	4593      	cmp	fp, r2
 800189e:	4192      	sbcs	r2, r2
 80018a0:	427f      	negs	r7, r7
 80018a2:	4249      	negs	r1, r1
 80018a4:	0c2d      	lsrs	r5, r5, #16
 80018a6:	4252      	negs	r2, r2
 80018a8:	430f      	orrs	r7, r1
 80018aa:	425b      	negs	r3, r3
 80018ac:	4313      	orrs	r3, r2
 80018ae:	197f      	adds	r7, r7, r5
 80018b0:	18ff      	adds	r7, r7, r3
 80018b2:	465b      	mov	r3, fp
 80018b4:	193c      	adds	r4, r7, r4
 80018b6:	0ddb      	lsrs	r3, r3, #23
 80018b8:	9a05      	ldr	r2, [sp, #20]
 80018ba:	0264      	lsls	r4, r4, #9
 80018bc:	431c      	orrs	r4, r3
 80018be:	0243      	lsls	r3, r0, #9
 80018c0:	4313      	orrs	r3, r2
 80018c2:	1e5d      	subs	r5, r3, #1
 80018c4:	41ab      	sbcs	r3, r5
 80018c6:	465a      	mov	r2, fp
 80018c8:	0dc0      	lsrs	r0, r0, #23
 80018ca:	4303      	orrs	r3, r0
 80018cc:	0252      	lsls	r2, r2, #9
 80018ce:	4313      	orrs	r3, r2
 80018d0:	01e2      	lsls	r2, r4, #7
 80018d2:	d556      	bpl.n	8001982 <__aeabi_dmul+0x426>
 80018d4:	2001      	movs	r0, #1
 80018d6:	085a      	lsrs	r2, r3, #1
 80018d8:	4003      	ands	r3, r0
 80018da:	4313      	orrs	r3, r2
 80018dc:	07e2      	lsls	r2, r4, #31
 80018de:	4313      	orrs	r3, r2
 80018e0:	0864      	lsrs	r4, r4, #1
 80018e2:	485a      	ldr	r0, [pc, #360]	; (8001a4c <__aeabi_dmul+0x4f0>)
 80018e4:	4460      	add	r0, ip
 80018e6:	2800      	cmp	r0, #0
 80018e8:	dd4d      	ble.n	8001986 <__aeabi_dmul+0x42a>
 80018ea:	075a      	lsls	r2, r3, #29
 80018ec:	d009      	beq.n	8001902 <__aeabi_dmul+0x3a6>
 80018ee:	220f      	movs	r2, #15
 80018f0:	401a      	ands	r2, r3
 80018f2:	2a04      	cmp	r2, #4
 80018f4:	d005      	beq.n	8001902 <__aeabi_dmul+0x3a6>
 80018f6:	1d1a      	adds	r2, r3, #4
 80018f8:	429a      	cmp	r2, r3
 80018fa:	419b      	sbcs	r3, r3
 80018fc:	425b      	negs	r3, r3
 80018fe:	18e4      	adds	r4, r4, r3
 8001900:	0013      	movs	r3, r2
 8001902:	01e2      	lsls	r2, r4, #7
 8001904:	d504      	bpl.n	8001910 <__aeabi_dmul+0x3b4>
 8001906:	2080      	movs	r0, #128	; 0x80
 8001908:	4a51      	ldr	r2, [pc, #324]	; (8001a50 <__aeabi_dmul+0x4f4>)
 800190a:	00c0      	lsls	r0, r0, #3
 800190c:	4014      	ands	r4, r2
 800190e:	4460      	add	r0, ip
 8001910:	4a50      	ldr	r2, [pc, #320]	; (8001a54 <__aeabi_dmul+0x4f8>)
 8001912:	4290      	cmp	r0, r2
 8001914:	dd00      	ble.n	8001918 <__aeabi_dmul+0x3bc>
 8001916:	e6e3      	b.n	80016e0 <__aeabi_dmul+0x184>
 8001918:	2501      	movs	r5, #1
 800191a:	08db      	lsrs	r3, r3, #3
 800191c:	0762      	lsls	r2, r4, #29
 800191e:	431a      	orrs	r2, r3
 8001920:	0264      	lsls	r4, r4, #9
 8001922:	9b01      	ldr	r3, [sp, #4]
 8001924:	4691      	mov	r9, r2
 8001926:	0b22      	lsrs	r2, r4, #12
 8001928:	0544      	lsls	r4, r0, #21
 800192a:	0d64      	lsrs	r4, r4, #21
 800192c:	401d      	ands	r5, r3
 800192e:	e67c      	b.n	800162a <__aeabi_dmul+0xce>
 8001930:	2280      	movs	r2, #128	; 0x80
 8001932:	4659      	mov	r1, fp
 8001934:	0312      	lsls	r2, r2, #12
 8001936:	4211      	tst	r1, r2
 8001938:	d008      	beq.n	800194c <__aeabi_dmul+0x3f0>
 800193a:	4214      	tst	r4, r2
 800193c:	d106      	bne.n	800194c <__aeabi_dmul+0x3f0>
 800193e:	4322      	orrs	r2, r4
 8001940:	0312      	lsls	r2, r2, #12
 8001942:	0b12      	lsrs	r2, r2, #12
 8001944:	4645      	mov	r5, r8
 8001946:	4699      	mov	r9, r3
 8001948:	4c43      	ldr	r4, [pc, #268]	; (8001a58 <__aeabi_dmul+0x4fc>)
 800194a:	e66e      	b.n	800162a <__aeabi_dmul+0xce>
 800194c:	465b      	mov	r3, fp
 800194e:	431a      	orrs	r2, r3
 8001950:	0312      	lsls	r2, r2, #12
 8001952:	0b12      	lsrs	r2, r2, #12
 8001954:	4c40      	ldr	r4, [pc, #256]	; (8001a58 <__aeabi_dmul+0x4fc>)
 8001956:	e668      	b.n	800162a <__aeabi_dmul+0xce>
 8001958:	0003      	movs	r3, r0
 800195a:	4654      	mov	r4, sl
 800195c:	3b28      	subs	r3, #40	; 0x28
 800195e:	409c      	lsls	r4, r3
 8001960:	2300      	movs	r3, #0
 8001962:	e6b9      	b.n	80016d8 <__aeabi_dmul+0x17c>
 8001964:	f000 fc3e 	bl	80021e4 <__clzsi2>
 8001968:	3020      	adds	r0, #32
 800196a:	e6a6      	b.n	80016ba <__aeabi_dmul+0x15e>
 800196c:	0003      	movs	r3, r0
 800196e:	3b28      	subs	r3, #40	; 0x28
 8001970:	409f      	lsls	r7, r3
 8001972:	2300      	movs	r3, #0
 8001974:	46bb      	mov	fp, r7
 8001976:	4699      	mov	r9, r3
 8001978:	e68a      	b.n	8001690 <__aeabi_dmul+0x134>
 800197a:	f000 fc33 	bl	80021e4 <__clzsi2>
 800197e:	3020      	adds	r0, #32
 8001980:	e674      	b.n	800166c <__aeabi_dmul+0x110>
 8001982:	46b4      	mov	ip, r6
 8001984:	e7ad      	b.n	80018e2 <__aeabi_dmul+0x386>
 8001986:	2501      	movs	r5, #1
 8001988:	1a2a      	subs	r2, r5, r0
 800198a:	2a38      	cmp	r2, #56	; 0x38
 800198c:	dd06      	ble.n	800199c <__aeabi_dmul+0x440>
 800198e:	9b01      	ldr	r3, [sp, #4]
 8001990:	2400      	movs	r4, #0
 8001992:	401d      	ands	r5, r3
 8001994:	2300      	movs	r3, #0
 8001996:	2200      	movs	r2, #0
 8001998:	4699      	mov	r9, r3
 800199a:	e646      	b.n	800162a <__aeabi_dmul+0xce>
 800199c:	2a1f      	cmp	r2, #31
 800199e:	dc21      	bgt.n	80019e4 <__aeabi_dmul+0x488>
 80019a0:	2520      	movs	r5, #32
 80019a2:	0020      	movs	r0, r4
 80019a4:	1aad      	subs	r5, r5, r2
 80019a6:	001e      	movs	r6, r3
 80019a8:	40ab      	lsls	r3, r5
 80019aa:	40a8      	lsls	r0, r5
 80019ac:	40d6      	lsrs	r6, r2
 80019ae:	1e5d      	subs	r5, r3, #1
 80019b0:	41ab      	sbcs	r3, r5
 80019b2:	4330      	orrs	r0, r6
 80019b4:	4318      	orrs	r0, r3
 80019b6:	40d4      	lsrs	r4, r2
 80019b8:	0743      	lsls	r3, r0, #29
 80019ba:	d009      	beq.n	80019d0 <__aeabi_dmul+0x474>
 80019bc:	230f      	movs	r3, #15
 80019be:	4003      	ands	r3, r0
 80019c0:	2b04      	cmp	r3, #4
 80019c2:	d005      	beq.n	80019d0 <__aeabi_dmul+0x474>
 80019c4:	0003      	movs	r3, r0
 80019c6:	1d18      	adds	r0, r3, #4
 80019c8:	4298      	cmp	r0, r3
 80019ca:	419b      	sbcs	r3, r3
 80019cc:	425b      	negs	r3, r3
 80019ce:	18e4      	adds	r4, r4, r3
 80019d0:	0223      	lsls	r3, r4, #8
 80019d2:	d521      	bpl.n	8001a18 <__aeabi_dmul+0x4bc>
 80019d4:	2501      	movs	r5, #1
 80019d6:	9b01      	ldr	r3, [sp, #4]
 80019d8:	2401      	movs	r4, #1
 80019da:	401d      	ands	r5, r3
 80019dc:	2300      	movs	r3, #0
 80019de:	2200      	movs	r2, #0
 80019e0:	4699      	mov	r9, r3
 80019e2:	e622      	b.n	800162a <__aeabi_dmul+0xce>
 80019e4:	251f      	movs	r5, #31
 80019e6:	0021      	movs	r1, r4
 80019e8:	426d      	negs	r5, r5
 80019ea:	1a28      	subs	r0, r5, r0
 80019ec:	40c1      	lsrs	r1, r0
 80019ee:	0008      	movs	r0, r1
 80019f0:	2a20      	cmp	r2, #32
 80019f2:	d01d      	beq.n	8001a30 <__aeabi_dmul+0x4d4>
 80019f4:	355f      	adds	r5, #95	; 0x5f
 80019f6:	1aaa      	subs	r2, r5, r2
 80019f8:	4094      	lsls	r4, r2
 80019fa:	4323      	orrs	r3, r4
 80019fc:	1e5c      	subs	r4, r3, #1
 80019fe:	41a3      	sbcs	r3, r4
 8001a00:	2507      	movs	r5, #7
 8001a02:	4303      	orrs	r3, r0
 8001a04:	401d      	ands	r5, r3
 8001a06:	2200      	movs	r2, #0
 8001a08:	2d00      	cmp	r5, #0
 8001a0a:	d009      	beq.n	8001a20 <__aeabi_dmul+0x4c4>
 8001a0c:	220f      	movs	r2, #15
 8001a0e:	2400      	movs	r4, #0
 8001a10:	401a      	ands	r2, r3
 8001a12:	0018      	movs	r0, r3
 8001a14:	2a04      	cmp	r2, #4
 8001a16:	d1d6      	bne.n	80019c6 <__aeabi_dmul+0x46a>
 8001a18:	0003      	movs	r3, r0
 8001a1a:	0765      	lsls	r5, r4, #29
 8001a1c:	0264      	lsls	r4, r4, #9
 8001a1e:	0b22      	lsrs	r2, r4, #12
 8001a20:	08db      	lsrs	r3, r3, #3
 8001a22:	432b      	orrs	r3, r5
 8001a24:	2501      	movs	r5, #1
 8001a26:	4699      	mov	r9, r3
 8001a28:	9b01      	ldr	r3, [sp, #4]
 8001a2a:	2400      	movs	r4, #0
 8001a2c:	401d      	ands	r5, r3
 8001a2e:	e5fc      	b.n	800162a <__aeabi_dmul+0xce>
 8001a30:	2400      	movs	r4, #0
 8001a32:	e7e2      	b.n	80019fa <__aeabi_dmul+0x49e>
 8001a34:	2280      	movs	r2, #128	; 0x80
 8001a36:	2501      	movs	r5, #1
 8001a38:	0312      	lsls	r2, r2, #12
 8001a3a:	4322      	orrs	r2, r4
 8001a3c:	9901      	ldr	r1, [sp, #4]
 8001a3e:	0312      	lsls	r2, r2, #12
 8001a40:	0b12      	lsrs	r2, r2, #12
 8001a42:	400d      	ands	r5, r1
 8001a44:	4699      	mov	r9, r3
 8001a46:	4c04      	ldr	r4, [pc, #16]	; (8001a58 <__aeabi_dmul+0x4fc>)
 8001a48:	e5ef      	b.n	800162a <__aeabi_dmul+0xce>
 8001a4a:	46c0      	nop			; (mov r8, r8)
 8001a4c:	000003ff 	.word	0x000003ff
 8001a50:	feffffff 	.word	0xfeffffff
 8001a54:	000007fe 	.word	0x000007fe
 8001a58:	000007ff 	.word	0x000007ff

08001a5c <__aeabi_dsub>:
 8001a5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a5e:	4646      	mov	r6, r8
 8001a60:	46d6      	mov	lr, sl
 8001a62:	464f      	mov	r7, r9
 8001a64:	030c      	lsls	r4, r1, #12
 8001a66:	b5c0      	push	{r6, r7, lr}
 8001a68:	0fcd      	lsrs	r5, r1, #31
 8001a6a:	004e      	lsls	r6, r1, #1
 8001a6c:	0a61      	lsrs	r1, r4, #9
 8001a6e:	0f44      	lsrs	r4, r0, #29
 8001a70:	430c      	orrs	r4, r1
 8001a72:	00c1      	lsls	r1, r0, #3
 8001a74:	0058      	lsls	r0, r3, #1
 8001a76:	0d40      	lsrs	r0, r0, #21
 8001a78:	4684      	mov	ip, r0
 8001a7a:	468a      	mov	sl, r1
 8001a7c:	000f      	movs	r7, r1
 8001a7e:	0319      	lsls	r1, r3, #12
 8001a80:	0f50      	lsrs	r0, r2, #29
 8001a82:	0a49      	lsrs	r1, r1, #9
 8001a84:	4301      	orrs	r1, r0
 8001a86:	48c6      	ldr	r0, [pc, #792]	; (8001da0 <__aeabi_dsub+0x344>)
 8001a88:	0d76      	lsrs	r6, r6, #21
 8001a8a:	46a8      	mov	r8, r5
 8001a8c:	0fdb      	lsrs	r3, r3, #31
 8001a8e:	00d2      	lsls	r2, r2, #3
 8001a90:	4584      	cmp	ip, r0
 8001a92:	d100      	bne.n	8001a96 <__aeabi_dsub+0x3a>
 8001a94:	e0d8      	b.n	8001c48 <__aeabi_dsub+0x1ec>
 8001a96:	2001      	movs	r0, #1
 8001a98:	4043      	eors	r3, r0
 8001a9a:	42ab      	cmp	r3, r5
 8001a9c:	d100      	bne.n	8001aa0 <__aeabi_dsub+0x44>
 8001a9e:	e0a6      	b.n	8001bee <__aeabi_dsub+0x192>
 8001aa0:	4660      	mov	r0, ip
 8001aa2:	1a35      	subs	r5, r6, r0
 8001aa4:	2d00      	cmp	r5, #0
 8001aa6:	dc00      	bgt.n	8001aaa <__aeabi_dsub+0x4e>
 8001aa8:	e105      	b.n	8001cb6 <__aeabi_dsub+0x25a>
 8001aaa:	2800      	cmp	r0, #0
 8001aac:	d110      	bne.n	8001ad0 <__aeabi_dsub+0x74>
 8001aae:	000b      	movs	r3, r1
 8001ab0:	4313      	orrs	r3, r2
 8001ab2:	d100      	bne.n	8001ab6 <__aeabi_dsub+0x5a>
 8001ab4:	e0d7      	b.n	8001c66 <__aeabi_dsub+0x20a>
 8001ab6:	1e6b      	subs	r3, r5, #1
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d000      	beq.n	8001abe <__aeabi_dsub+0x62>
 8001abc:	e14b      	b.n	8001d56 <__aeabi_dsub+0x2fa>
 8001abe:	4653      	mov	r3, sl
 8001ac0:	1a9f      	subs	r7, r3, r2
 8001ac2:	45ba      	cmp	sl, r7
 8001ac4:	4180      	sbcs	r0, r0
 8001ac6:	1a64      	subs	r4, r4, r1
 8001ac8:	4240      	negs	r0, r0
 8001aca:	1a24      	subs	r4, r4, r0
 8001acc:	2601      	movs	r6, #1
 8001ace:	e01e      	b.n	8001b0e <__aeabi_dsub+0xb2>
 8001ad0:	4bb3      	ldr	r3, [pc, #716]	; (8001da0 <__aeabi_dsub+0x344>)
 8001ad2:	429e      	cmp	r6, r3
 8001ad4:	d048      	beq.n	8001b68 <__aeabi_dsub+0x10c>
 8001ad6:	2380      	movs	r3, #128	; 0x80
 8001ad8:	041b      	lsls	r3, r3, #16
 8001ada:	4319      	orrs	r1, r3
 8001adc:	2d38      	cmp	r5, #56	; 0x38
 8001ade:	dd00      	ble.n	8001ae2 <__aeabi_dsub+0x86>
 8001ae0:	e119      	b.n	8001d16 <__aeabi_dsub+0x2ba>
 8001ae2:	2d1f      	cmp	r5, #31
 8001ae4:	dd00      	ble.n	8001ae8 <__aeabi_dsub+0x8c>
 8001ae6:	e14c      	b.n	8001d82 <__aeabi_dsub+0x326>
 8001ae8:	2320      	movs	r3, #32
 8001aea:	000f      	movs	r7, r1
 8001aec:	1b5b      	subs	r3, r3, r5
 8001aee:	0010      	movs	r0, r2
 8001af0:	409a      	lsls	r2, r3
 8001af2:	409f      	lsls	r7, r3
 8001af4:	40e8      	lsrs	r0, r5
 8001af6:	1e53      	subs	r3, r2, #1
 8001af8:	419a      	sbcs	r2, r3
 8001afa:	40e9      	lsrs	r1, r5
 8001afc:	4307      	orrs	r7, r0
 8001afe:	4317      	orrs	r7, r2
 8001b00:	4653      	mov	r3, sl
 8001b02:	1bdf      	subs	r7, r3, r7
 8001b04:	1a61      	subs	r1, r4, r1
 8001b06:	45ba      	cmp	sl, r7
 8001b08:	41a4      	sbcs	r4, r4
 8001b0a:	4264      	negs	r4, r4
 8001b0c:	1b0c      	subs	r4, r1, r4
 8001b0e:	0223      	lsls	r3, r4, #8
 8001b10:	d400      	bmi.n	8001b14 <__aeabi_dsub+0xb8>
 8001b12:	e0c5      	b.n	8001ca0 <__aeabi_dsub+0x244>
 8001b14:	0264      	lsls	r4, r4, #9
 8001b16:	0a65      	lsrs	r5, r4, #9
 8001b18:	2d00      	cmp	r5, #0
 8001b1a:	d100      	bne.n	8001b1e <__aeabi_dsub+0xc2>
 8001b1c:	e0f6      	b.n	8001d0c <__aeabi_dsub+0x2b0>
 8001b1e:	0028      	movs	r0, r5
 8001b20:	f000 fb60 	bl	80021e4 <__clzsi2>
 8001b24:	0003      	movs	r3, r0
 8001b26:	3b08      	subs	r3, #8
 8001b28:	2b1f      	cmp	r3, #31
 8001b2a:	dd00      	ble.n	8001b2e <__aeabi_dsub+0xd2>
 8001b2c:	e0e9      	b.n	8001d02 <__aeabi_dsub+0x2a6>
 8001b2e:	2220      	movs	r2, #32
 8001b30:	003c      	movs	r4, r7
 8001b32:	1ad2      	subs	r2, r2, r3
 8001b34:	409d      	lsls	r5, r3
 8001b36:	40d4      	lsrs	r4, r2
 8001b38:	409f      	lsls	r7, r3
 8001b3a:	4325      	orrs	r5, r4
 8001b3c:	429e      	cmp	r6, r3
 8001b3e:	dd00      	ble.n	8001b42 <__aeabi_dsub+0xe6>
 8001b40:	e0db      	b.n	8001cfa <__aeabi_dsub+0x29e>
 8001b42:	1b9e      	subs	r6, r3, r6
 8001b44:	1c73      	adds	r3, r6, #1
 8001b46:	2b1f      	cmp	r3, #31
 8001b48:	dd00      	ble.n	8001b4c <__aeabi_dsub+0xf0>
 8001b4a:	e10a      	b.n	8001d62 <__aeabi_dsub+0x306>
 8001b4c:	2220      	movs	r2, #32
 8001b4e:	0038      	movs	r0, r7
 8001b50:	1ad2      	subs	r2, r2, r3
 8001b52:	0029      	movs	r1, r5
 8001b54:	4097      	lsls	r7, r2
 8001b56:	002c      	movs	r4, r5
 8001b58:	4091      	lsls	r1, r2
 8001b5a:	40d8      	lsrs	r0, r3
 8001b5c:	1e7a      	subs	r2, r7, #1
 8001b5e:	4197      	sbcs	r7, r2
 8001b60:	40dc      	lsrs	r4, r3
 8001b62:	2600      	movs	r6, #0
 8001b64:	4301      	orrs	r1, r0
 8001b66:	430f      	orrs	r7, r1
 8001b68:	077b      	lsls	r3, r7, #29
 8001b6a:	d009      	beq.n	8001b80 <__aeabi_dsub+0x124>
 8001b6c:	230f      	movs	r3, #15
 8001b6e:	403b      	ands	r3, r7
 8001b70:	2b04      	cmp	r3, #4
 8001b72:	d005      	beq.n	8001b80 <__aeabi_dsub+0x124>
 8001b74:	1d3b      	adds	r3, r7, #4
 8001b76:	42bb      	cmp	r3, r7
 8001b78:	41bf      	sbcs	r7, r7
 8001b7a:	427f      	negs	r7, r7
 8001b7c:	19e4      	adds	r4, r4, r7
 8001b7e:	001f      	movs	r7, r3
 8001b80:	0223      	lsls	r3, r4, #8
 8001b82:	d525      	bpl.n	8001bd0 <__aeabi_dsub+0x174>
 8001b84:	4b86      	ldr	r3, [pc, #536]	; (8001da0 <__aeabi_dsub+0x344>)
 8001b86:	3601      	adds	r6, #1
 8001b88:	429e      	cmp	r6, r3
 8001b8a:	d100      	bne.n	8001b8e <__aeabi_dsub+0x132>
 8001b8c:	e0af      	b.n	8001cee <__aeabi_dsub+0x292>
 8001b8e:	4b85      	ldr	r3, [pc, #532]	; (8001da4 <__aeabi_dsub+0x348>)
 8001b90:	2501      	movs	r5, #1
 8001b92:	401c      	ands	r4, r3
 8001b94:	4643      	mov	r3, r8
 8001b96:	0762      	lsls	r2, r4, #29
 8001b98:	08ff      	lsrs	r7, r7, #3
 8001b9a:	0264      	lsls	r4, r4, #9
 8001b9c:	0576      	lsls	r6, r6, #21
 8001b9e:	4317      	orrs	r7, r2
 8001ba0:	0b24      	lsrs	r4, r4, #12
 8001ba2:	0d76      	lsrs	r6, r6, #21
 8001ba4:	401d      	ands	r5, r3
 8001ba6:	2100      	movs	r1, #0
 8001ba8:	0324      	lsls	r4, r4, #12
 8001baa:	0b23      	lsrs	r3, r4, #12
 8001bac:	0d0c      	lsrs	r4, r1, #20
 8001bae:	4a7e      	ldr	r2, [pc, #504]	; (8001da8 <__aeabi_dsub+0x34c>)
 8001bb0:	0524      	lsls	r4, r4, #20
 8001bb2:	431c      	orrs	r4, r3
 8001bb4:	4014      	ands	r4, r2
 8001bb6:	0533      	lsls	r3, r6, #20
 8001bb8:	4323      	orrs	r3, r4
 8001bba:	005b      	lsls	r3, r3, #1
 8001bbc:	07ed      	lsls	r5, r5, #31
 8001bbe:	085b      	lsrs	r3, r3, #1
 8001bc0:	432b      	orrs	r3, r5
 8001bc2:	0038      	movs	r0, r7
 8001bc4:	0019      	movs	r1, r3
 8001bc6:	bc1c      	pop	{r2, r3, r4}
 8001bc8:	4690      	mov	r8, r2
 8001bca:	4699      	mov	r9, r3
 8001bcc:	46a2      	mov	sl, r4
 8001bce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001bd0:	2501      	movs	r5, #1
 8001bd2:	4643      	mov	r3, r8
 8001bd4:	0762      	lsls	r2, r4, #29
 8001bd6:	08ff      	lsrs	r7, r7, #3
 8001bd8:	4317      	orrs	r7, r2
 8001bda:	08e4      	lsrs	r4, r4, #3
 8001bdc:	401d      	ands	r5, r3
 8001bde:	4b70      	ldr	r3, [pc, #448]	; (8001da0 <__aeabi_dsub+0x344>)
 8001be0:	429e      	cmp	r6, r3
 8001be2:	d036      	beq.n	8001c52 <__aeabi_dsub+0x1f6>
 8001be4:	0324      	lsls	r4, r4, #12
 8001be6:	0576      	lsls	r6, r6, #21
 8001be8:	0b24      	lsrs	r4, r4, #12
 8001bea:	0d76      	lsrs	r6, r6, #21
 8001bec:	e7db      	b.n	8001ba6 <__aeabi_dsub+0x14a>
 8001bee:	4663      	mov	r3, ip
 8001bf0:	1af3      	subs	r3, r6, r3
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	dc00      	bgt.n	8001bf8 <__aeabi_dsub+0x19c>
 8001bf6:	e094      	b.n	8001d22 <__aeabi_dsub+0x2c6>
 8001bf8:	4660      	mov	r0, ip
 8001bfa:	2800      	cmp	r0, #0
 8001bfc:	d035      	beq.n	8001c6a <__aeabi_dsub+0x20e>
 8001bfe:	4868      	ldr	r0, [pc, #416]	; (8001da0 <__aeabi_dsub+0x344>)
 8001c00:	4286      	cmp	r6, r0
 8001c02:	d0b1      	beq.n	8001b68 <__aeabi_dsub+0x10c>
 8001c04:	2780      	movs	r7, #128	; 0x80
 8001c06:	043f      	lsls	r7, r7, #16
 8001c08:	4339      	orrs	r1, r7
 8001c0a:	2b38      	cmp	r3, #56	; 0x38
 8001c0c:	dc00      	bgt.n	8001c10 <__aeabi_dsub+0x1b4>
 8001c0e:	e0fd      	b.n	8001e0c <__aeabi_dsub+0x3b0>
 8001c10:	430a      	orrs	r2, r1
 8001c12:	0017      	movs	r7, r2
 8001c14:	2100      	movs	r1, #0
 8001c16:	1e7a      	subs	r2, r7, #1
 8001c18:	4197      	sbcs	r7, r2
 8001c1a:	4457      	add	r7, sl
 8001c1c:	4557      	cmp	r7, sl
 8001c1e:	4180      	sbcs	r0, r0
 8001c20:	1909      	adds	r1, r1, r4
 8001c22:	4244      	negs	r4, r0
 8001c24:	190c      	adds	r4, r1, r4
 8001c26:	0223      	lsls	r3, r4, #8
 8001c28:	d53a      	bpl.n	8001ca0 <__aeabi_dsub+0x244>
 8001c2a:	4b5d      	ldr	r3, [pc, #372]	; (8001da0 <__aeabi_dsub+0x344>)
 8001c2c:	3601      	adds	r6, #1
 8001c2e:	429e      	cmp	r6, r3
 8001c30:	d100      	bne.n	8001c34 <__aeabi_dsub+0x1d8>
 8001c32:	e14b      	b.n	8001ecc <__aeabi_dsub+0x470>
 8001c34:	2201      	movs	r2, #1
 8001c36:	4b5b      	ldr	r3, [pc, #364]	; (8001da4 <__aeabi_dsub+0x348>)
 8001c38:	401c      	ands	r4, r3
 8001c3a:	087b      	lsrs	r3, r7, #1
 8001c3c:	4017      	ands	r7, r2
 8001c3e:	431f      	orrs	r7, r3
 8001c40:	07e2      	lsls	r2, r4, #31
 8001c42:	4317      	orrs	r7, r2
 8001c44:	0864      	lsrs	r4, r4, #1
 8001c46:	e78f      	b.n	8001b68 <__aeabi_dsub+0x10c>
 8001c48:	0008      	movs	r0, r1
 8001c4a:	4310      	orrs	r0, r2
 8001c4c:	d000      	beq.n	8001c50 <__aeabi_dsub+0x1f4>
 8001c4e:	e724      	b.n	8001a9a <__aeabi_dsub+0x3e>
 8001c50:	e721      	b.n	8001a96 <__aeabi_dsub+0x3a>
 8001c52:	0023      	movs	r3, r4
 8001c54:	433b      	orrs	r3, r7
 8001c56:	d100      	bne.n	8001c5a <__aeabi_dsub+0x1fe>
 8001c58:	e1b9      	b.n	8001fce <__aeabi_dsub+0x572>
 8001c5a:	2280      	movs	r2, #128	; 0x80
 8001c5c:	0312      	lsls	r2, r2, #12
 8001c5e:	4314      	orrs	r4, r2
 8001c60:	0324      	lsls	r4, r4, #12
 8001c62:	0b24      	lsrs	r4, r4, #12
 8001c64:	e79f      	b.n	8001ba6 <__aeabi_dsub+0x14a>
 8001c66:	002e      	movs	r6, r5
 8001c68:	e77e      	b.n	8001b68 <__aeabi_dsub+0x10c>
 8001c6a:	0008      	movs	r0, r1
 8001c6c:	4310      	orrs	r0, r2
 8001c6e:	d100      	bne.n	8001c72 <__aeabi_dsub+0x216>
 8001c70:	e0ca      	b.n	8001e08 <__aeabi_dsub+0x3ac>
 8001c72:	1e58      	subs	r0, r3, #1
 8001c74:	4684      	mov	ip, r0
 8001c76:	2800      	cmp	r0, #0
 8001c78:	d000      	beq.n	8001c7c <__aeabi_dsub+0x220>
 8001c7a:	e0e7      	b.n	8001e4c <__aeabi_dsub+0x3f0>
 8001c7c:	4452      	add	r2, sl
 8001c7e:	4552      	cmp	r2, sl
 8001c80:	4180      	sbcs	r0, r0
 8001c82:	1864      	adds	r4, r4, r1
 8001c84:	4240      	negs	r0, r0
 8001c86:	1824      	adds	r4, r4, r0
 8001c88:	0017      	movs	r7, r2
 8001c8a:	2601      	movs	r6, #1
 8001c8c:	0223      	lsls	r3, r4, #8
 8001c8e:	d507      	bpl.n	8001ca0 <__aeabi_dsub+0x244>
 8001c90:	2602      	movs	r6, #2
 8001c92:	e7cf      	b.n	8001c34 <__aeabi_dsub+0x1d8>
 8001c94:	4664      	mov	r4, ip
 8001c96:	432c      	orrs	r4, r5
 8001c98:	d100      	bne.n	8001c9c <__aeabi_dsub+0x240>
 8001c9a:	e1b3      	b.n	8002004 <__aeabi_dsub+0x5a8>
 8001c9c:	002c      	movs	r4, r5
 8001c9e:	4667      	mov	r7, ip
 8001ca0:	077b      	lsls	r3, r7, #29
 8001ca2:	d000      	beq.n	8001ca6 <__aeabi_dsub+0x24a>
 8001ca4:	e762      	b.n	8001b6c <__aeabi_dsub+0x110>
 8001ca6:	0763      	lsls	r3, r4, #29
 8001ca8:	08ff      	lsrs	r7, r7, #3
 8001caa:	431f      	orrs	r7, r3
 8001cac:	2501      	movs	r5, #1
 8001cae:	4643      	mov	r3, r8
 8001cb0:	08e4      	lsrs	r4, r4, #3
 8001cb2:	401d      	ands	r5, r3
 8001cb4:	e793      	b.n	8001bde <__aeabi_dsub+0x182>
 8001cb6:	2d00      	cmp	r5, #0
 8001cb8:	d178      	bne.n	8001dac <__aeabi_dsub+0x350>
 8001cba:	1c75      	adds	r5, r6, #1
 8001cbc:	056d      	lsls	r5, r5, #21
 8001cbe:	0d6d      	lsrs	r5, r5, #21
 8001cc0:	2d01      	cmp	r5, #1
 8001cc2:	dc00      	bgt.n	8001cc6 <__aeabi_dsub+0x26a>
 8001cc4:	e0f2      	b.n	8001eac <__aeabi_dsub+0x450>
 8001cc6:	4650      	mov	r0, sl
 8001cc8:	1a80      	subs	r0, r0, r2
 8001cca:	4582      	cmp	sl, r0
 8001ccc:	41bf      	sbcs	r7, r7
 8001cce:	1a65      	subs	r5, r4, r1
 8001cd0:	427f      	negs	r7, r7
 8001cd2:	1bed      	subs	r5, r5, r7
 8001cd4:	4684      	mov	ip, r0
 8001cd6:	0228      	lsls	r0, r5, #8
 8001cd8:	d400      	bmi.n	8001cdc <__aeabi_dsub+0x280>
 8001cda:	e08c      	b.n	8001df6 <__aeabi_dsub+0x39a>
 8001cdc:	4650      	mov	r0, sl
 8001cde:	1a17      	subs	r7, r2, r0
 8001ce0:	42ba      	cmp	r2, r7
 8001ce2:	4192      	sbcs	r2, r2
 8001ce4:	1b0c      	subs	r4, r1, r4
 8001ce6:	4255      	negs	r5, r2
 8001ce8:	1b65      	subs	r5, r4, r5
 8001cea:	4698      	mov	r8, r3
 8001cec:	e714      	b.n	8001b18 <__aeabi_dsub+0xbc>
 8001cee:	2501      	movs	r5, #1
 8001cf0:	4643      	mov	r3, r8
 8001cf2:	2400      	movs	r4, #0
 8001cf4:	401d      	ands	r5, r3
 8001cf6:	2700      	movs	r7, #0
 8001cf8:	e755      	b.n	8001ba6 <__aeabi_dsub+0x14a>
 8001cfa:	4c2a      	ldr	r4, [pc, #168]	; (8001da4 <__aeabi_dsub+0x348>)
 8001cfc:	1af6      	subs	r6, r6, r3
 8001cfe:	402c      	ands	r4, r5
 8001d00:	e732      	b.n	8001b68 <__aeabi_dsub+0x10c>
 8001d02:	003d      	movs	r5, r7
 8001d04:	3828      	subs	r0, #40	; 0x28
 8001d06:	4085      	lsls	r5, r0
 8001d08:	2700      	movs	r7, #0
 8001d0a:	e717      	b.n	8001b3c <__aeabi_dsub+0xe0>
 8001d0c:	0038      	movs	r0, r7
 8001d0e:	f000 fa69 	bl	80021e4 <__clzsi2>
 8001d12:	3020      	adds	r0, #32
 8001d14:	e706      	b.n	8001b24 <__aeabi_dsub+0xc8>
 8001d16:	430a      	orrs	r2, r1
 8001d18:	0017      	movs	r7, r2
 8001d1a:	2100      	movs	r1, #0
 8001d1c:	1e7a      	subs	r2, r7, #1
 8001d1e:	4197      	sbcs	r7, r2
 8001d20:	e6ee      	b.n	8001b00 <__aeabi_dsub+0xa4>
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d000      	beq.n	8001d28 <__aeabi_dsub+0x2cc>
 8001d26:	e0e5      	b.n	8001ef4 <__aeabi_dsub+0x498>
 8001d28:	1c73      	adds	r3, r6, #1
 8001d2a:	469c      	mov	ip, r3
 8001d2c:	055b      	lsls	r3, r3, #21
 8001d2e:	0d5b      	lsrs	r3, r3, #21
 8001d30:	2b01      	cmp	r3, #1
 8001d32:	dc00      	bgt.n	8001d36 <__aeabi_dsub+0x2da>
 8001d34:	e09f      	b.n	8001e76 <__aeabi_dsub+0x41a>
 8001d36:	4b1a      	ldr	r3, [pc, #104]	; (8001da0 <__aeabi_dsub+0x344>)
 8001d38:	459c      	cmp	ip, r3
 8001d3a:	d100      	bne.n	8001d3e <__aeabi_dsub+0x2e2>
 8001d3c:	e0c5      	b.n	8001eca <__aeabi_dsub+0x46e>
 8001d3e:	4452      	add	r2, sl
 8001d40:	4552      	cmp	r2, sl
 8001d42:	4180      	sbcs	r0, r0
 8001d44:	1864      	adds	r4, r4, r1
 8001d46:	4240      	negs	r0, r0
 8001d48:	1824      	adds	r4, r4, r0
 8001d4a:	07e7      	lsls	r7, r4, #31
 8001d4c:	0852      	lsrs	r2, r2, #1
 8001d4e:	4317      	orrs	r7, r2
 8001d50:	0864      	lsrs	r4, r4, #1
 8001d52:	4666      	mov	r6, ip
 8001d54:	e708      	b.n	8001b68 <__aeabi_dsub+0x10c>
 8001d56:	4812      	ldr	r0, [pc, #72]	; (8001da0 <__aeabi_dsub+0x344>)
 8001d58:	4285      	cmp	r5, r0
 8001d5a:	d100      	bne.n	8001d5e <__aeabi_dsub+0x302>
 8001d5c:	e085      	b.n	8001e6a <__aeabi_dsub+0x40e>
 8001d5e:	001d      	movs	r5, r3
 8001d60:	e6bc      	b.n	8001adc <__aeabi_dsub+0x80>
 8001d62:	0029      	movs	r1, r5
 8001d64:	3e1f      	subs	r6, #31
 8001d66:	40f1      	lsrs	r1, r6
 8001d68:	2b20      	cmp	r3, #32
 8001d6a:	d100      	bne.n	8001d6e <__aeabi_dsub+0x312>
 8001d6c:	e07f      	b.n	8001e6e <__aeabi_dsub+0x412>
 8001d6e:	2240      	movs	r2, #64	; 0x40
 8001d70:	1ad3      	subs	r3, r2, r3
 8001d72:	409d      	lsls	r5, r3
 8001d74:	432f      	orrs	r7, r5
 8001d76:	1e7d      	subs	r5, r7, #1
 8001d78:	41af      	sbcs	r7, r5
 8001d7a:	2400      	movs	r4, #0
 8001d7c:	430f      	orrs	r7, r1
 8001d7e:	2600      	movs	r6, #0
 8001d80:	e78e      	b.n	8001ca0 <__aeabi_dsub+0x244>
 8001d82:	002b      	movs	r3, r5
 8001d84:	000f      	movs	r7, r1
 8001d86:	3b20      	subs	r3, #32
 8001d88:	40df      	lsrs	r7, r3
 8001d8a:	2d20      	cmp	r5, #32
 8001d8c:	d071      	beq.n	8001e72 <__aeabi_dsub+0x416>
 8001d8e:	2340      	movs	r3, #64	; 0x40
 8001d90:	1b5d      	subs	r5, r3, r5
 8001d92:	40a9      	lsls	r1, r5
 8001d94:	430a      	orrs	r2, r1
 8001d96:	1e51      	subs	r1, r2, #1
 8001d98:	418a      	sbcs	r2, r1
 8001d9a:	2100      	movs	r1, #0
 8001d9c:	4317      	orrs	r7, r2
 8001d9e:	e6af      	b.n	8001b00 <__aeabi_dsub+0xa4>
 8001da0:	000007ff 	.word	0x000007ff
 8001da4:	ff7fffff 	.word	0xff7fffff
 8001da8:	800fffff 	.word	0x800fffff
 8001dac:	2e00      	cmp	r6, #0
 8001dae:	d03e      	beq.n	8001e2e <__aeabi_dsub+0x3d2>
 8001db0:	4eb3      	ldr	r6, [pc, #716]	; (8002080 <__aeabi_dsub+0x624>)
 8001db2:	45b4      	cmp	ip, r6
 8001db4:	d045      	beq.n	8001e42 <__aeabi_dsub+0x3e6>
 8001db6:	2680      	movs	r6, #128	; 0x80
 8001db8:	0436      	lsls	r6, r6, #16
 8001dba:	426d      	negs	r5, r5
 8001dbc:	4334      	orrs	r4, r6
 8001dbe:	2d38      	cmp	r5, #56	; 0x38
 8001dc0:	dd00      	ble.n	8001dc4 <__aeabi_dsub+0x368>
 8001dc2:	e0a8      	b.n	8001f16 <__aeabi_dsub+0x4ba>
 8001dc4:	2d1f      	cmp	r5, #31
 8001dc6:	dd00      	ble.n	8001dca <__aeabi_dsub+0x36e>
 8001dc8:	e11f      	b.n	800200a <__aeabi_dsub+0x5ae>
 8001dca:	2620      	movs	r6, #32
 8001dcc:	0027      	movs	r7, r4
 8001dce:	4650      	mov	r0, sl
 8001dd0:	1b76      	subs	r6, r6, r5
 8001dd2:	40b7      	lsls	r7, r6
 8001dd4:	40e8      	lsrs	r0, r5
 8001dd6:	4307      	orrs	r7, r0
 8001dd8:	4650      	mov	r0, sl
 8001dda:	40b0      	lsls	r0, r6
 8001ddc:	1e46      	subs	r6, r0, #1
 8001dde:	41b0      	sbcs	r0, r6
 8001de0:	40ec      	lsrs	r4, r5
 8001de2:	4338      	orrs	r0, r7
 8001de4:	1a17      	subs	r7, r2, r0
 8001de6:	42ba      	cmp	r2, r7
 8001de8:	4192      	sbcs	r2, r2
 8001dea:	1b0c      	subs	r4, r1, r4
 8001dec:	4252      	negs	r2, r2
 8001dee:	1aa4      	subs	r4, r4, r2
 8001df0:	4666      	mov	r6, ip
 8001df2:	4698      	mov	r8, r3
 8001df4:	e68b      	b.n	8001b0e <__aeabi_dsub+0xb2>
 8001df6:	4664      	mov	r4, ip
 8001df8:	4667      	mov	r7, ip
 8001dfa:	432c      	orrs	r4, r5
 8001dfc:	d000      	beq.n	8001e00 <__aeabi_dsub+0x3a4>
 8001dfe:	e68b      	b.n	8001b18 <__aeabi_dsub+0xbc>
 8001e00:	2500      	movs	r5, #0
 8001e02:	2600      	movs	r6, #0
 8001e04:	2700      	movs	r7, #0
 8001e06:	e6ea      	b.n	8001bde <__aeabi_dsub+0x182>
 8001e08:	001e      	movs	r6, r3
 8001e0a:	e6ad      	b.n	8001b68 <__aeabi_dsub+0x10c>
 8001e0c:	2b1f      	cmp	r3, #31
 8001e0e:	dc60      	bgt.n	8001ed2 <__aeabi_dsub+0x476>
 8001e10:	2720      	movs	r7, #32
 8001e12:	1af8      	subs	r0, r7, r3
 8001e14:	000f      	movs	r7, r1
 8001e16:	4684      	mov	ip, r0
 8001e18:	4087      	lsls	r7, r0
 8001e1a:	0010      	movs	r0, r2
 8001e1c:	40d8      	lsrs	r0, r3
 8001e1e:	4307      	orrs	r7, r0
 8001e20:	4660      	mov	r0, ip
 8001e22:	4082      	lsls	r2, r0
 8001e24:	1e50      	subs	r0, r2, #1
 8001e26:	4182      	sbcs	r2, r0
 8001e28:	40d9      	lsrs	r1, r3
 8001e2a:	4317      	orrs	r7, r2
 8001e2c:	e6f5      	b.n	8001c1a <__aeabi_dsub+0x1be>
 8001e2e:	0026      	movs	r6, r4
 8001e30:	4650      	mov	r0, sl
 8001e32:	4306      	orrs	r6, r0
 8001e34:	d005      	beq.n	8001e42 <__aeabi_dsub+0x3e6>
 8001e36:	43ed      	mvns	r5, r5
 8001e38:	2d00      	cmp	r5, #0
 8001e3a:	d0d3      	beq.n	8001de4 <__aeabi_dsub+0x388>
 8001e3c:	4e90      	ldr	r6, [pc, #576]	; (8002080 <__aeabi_dsub+0x624>)
 8001e3e:	45b4      	cmp	ip, r6
 8001e40:	d1bd      	bne.n	8001dbe <__aeabi_dsub+0x362>
 8001e42:	000c      	movs	r4, r1
 8001e44:	0017      	movs	r7, r2
 8001e46:	4666      	mov	r6, ip
 8001e48:	4698      	mov	r8, r3
 8001e4a:	e68d      	b.n	8001b68 <__aeabi_dsub+0x10c>
 8001e4c:	488c      	ldr	r0, [pc, #560]	; (8002080 <__aeabi_dsub+0x624>)
 8001e4e:	4283      	cmp	r3, r0
 8001e50:	d00b      	beq.n	8001e6a <__aeabi_dsub+0x40e>
 8001e52:	4663      	mov	r3, ip
 8001e54:	e6d9      	b.n	8001c0a <__aeabi_dsub+0x1ae>
 8001e56:	2d00      	cmp	r5, #0
 8001e58:	d000      	beq.n	8001e5c <__aeabi_dsub+0x400>
 8001e5a:	e096      	b.n	8001f8a <__aeabi_dsub+0x52e>
 8001e5c:	0008      	movs	r0, r1
 8001e5e:	4310      	orrs	r0, r2
 8001e60:	d100      	bne.n	8001e64 <__aeabi_dsub+0x408>
 8001e62:	e0e2      	b.n	800202a <__aeabi_dsub+0x5ce>
 8001e64:	000c      	movs	r4, r1
 8001e66:	0017      	movs	r7, r2
 8001e68:	4698      	mov	r8, r3
 8001e6a:	4e85      	ldr	r6, [pc, #532]	; (8002080 <__aeabi_dsub+0x624>)
 8001e6c:	e67c      	b.n	8001b68 <__aeabi_dsub+0x10c>
 8001e6e:	2500      	movs	r5, #0
 8001e70:	e780      	b.n	8001d74 <__aeabi_dsub+0x318>
 8001e72:	2100      	movs	r1, #0
 8001e74:	e78e      	b.n	8001d94 <__aeabi_dsub+0x338>
 8001e76:	0023      	movs	r3, r4
 8001e78:	4650      	mov	r0, sl
 8001e7a:	4303      	orrs	r3, r0
 8001e7c:	2e00      	cmp	r6, #0
 8001e7e:	d000      	beq.n	8001e82 <__aeabi_dsub+0x426>
 8001e80:	e0a8      	b.n	8001fd4 <__aeabi_dsub+0x578>
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d100      	bne.n	8001e88 <__aeabi_dsub+0x42c>
 8001e86:	e0de      	b.n	8002046 <__aeabi_dsub+0x5ea>
 8001e88:	000b      	movs	r3, r1
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	d100      	bne.n	8001e90 <__aeabi_dsub+0x434>
 8001e8e:	e66b      	b.n	8001b68 <__aeabi_dsub+0x10c>
 8001e90:	4452      	add	r2, sl
 8001e92:	4552      	cmp	r2, sl
 8001e94:	4180      	sbcs	r0, r0
 8001e96:	1864      	adds	r4, r4, r1
 8001e98:	4240      	negs	r0, r0
 8001e9a:	1824      	adds	r4, r4, r0
 8001e9c:	0017      	movs	r7, r2
 8001e9e:	0223      	lsls	r3, r4, #8
 8001ea0:	d400      	bmi.n	8001ea4 <__aeabi_dsub+0x448>
 8001ea2:	e6fd      	b.n	8001ca0 <__aeabi_dsub+0x244>
 8001ea4:	4b77      	ldr	r3, [pc, #476]	; (8002084 <__aeabi_dsub+0x628>)
 8001ea6:	4666      	mov	r6, ip
 8001ea8:	401c      	ands	r4, r3
 8001eaa:	e65d      	b.n	8001b68 <__aeabi_dsub+0x10c>
 8001eac:	0025      	movs	r5, r4
 8001eae:	4650      	mov	r0, sl
 8001eb0:	4305      	orrs	r5, r0
 8001eb2:	2e00      	cmp	r6, #0
 8001eb4:	d1cf      	bne.n	8001e56 <__aeabi_dsub+0x3fa>
 8001eb6:	2d00      	cmp	r5, #0
 8001eb8:	d14f      	bne.n	8001f5a <__aeabi_dsub+0x4fe>
 8001eba:	000c      	movs	r4, r1
 8001ebc:	4314      	orrs	r4, r2
 8001ebe:	d100      	bne.n	8001ec2 <__aeabi_dsub+0x466>
 8001ec0:	e0a0      	b.n	8002004 <__aeabi_dsub+0x5a8>
 8001ec2:	000c      	movs	r4, r1
 8001ec4:	0017      	movs	r7, r2
 8001ec6:	4698      	mov	r8, r3
 8001ec8:	e64e      	b.n	8001b68 <__aeabi_dsub+0x10c>
 8001eca:	4666      	mov	r6, ip
 8001ecc:	2400      	movs	r4, #0
 8001ece:	2700      	movs	r7, #0
 8001ed0:	e685      	b.n	8001bde <__aeabi_dsub+0x182>
 8001ed2:	001f      	movs	r7, r3
 8001ed4:	0008      	movs	r0, r1
 8001ed6:	3f20      	subs	r7, #32
 8001ed8:	40f8      	lsrs	r0, r7
 8001eda:	0007      	movs	r7, r0
 8001edc:	2b20      	cmp	r3, #32
 8001ede:	d100      	bne.n	8001ee2 <__aeabi_dsub+0x486>
 8001ee0:	e08e      	b.n	8002000 <__aeabi_dsub+0x5a4>
 8001ee2:	2040      	movs	r0, #64	; 0x40
 8001ee4:	1ac3      	subs	r3, r0, r3
 8001ee6:	4099      	lsls	r1, r3
 8001ee8:	430a      	orrs	r2, r1
 8001eea:	1e51      	subs	r1, r2, #1
 8001eec:	418a      	sbcs	r2, r1
 8001eee:	2100      	movs	r1, #0
 8001ef0:	4317      	orrs	r7, r2
 8001ef2:	e692      	b.n	8001c1a <__aeabi_dsub+0x1be>
 8001ef4:	2e00      	cmp	r6, #0
 8001ef6:	d114      	bne.n	8001f22 <__aeabi_dsub+0x4c6>
 8001ef8:	0026      	movs	r6, r4
 8001efa:	4650      	mov	r0, sl
 8001efc:	4306      	orrs	r6, r0
 8001efe:	d062      	beq.n	8001fc6 <__aeabi_dsub+0x56a>
 8001f00:	43db      	mvns	r3, r3
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d15c      	bne.n	8001fc0 <__aeabi_dsub+0x564>
 8001f06:	1887      	adds	r7, r0, r2
 8001f08:	4297      	cmp	r7, r2
 8001f0a:	4192      	sbcs	r2, r2
 8001f0c:	1864      	adds	r4, r4, r1
 8001f0e:	4252      	negs	r2, r2
 8001f10:	18a4      	adds	r4, r4, r2
 8001f12:	4666      	mov	r6, ip
 8001f14:	e687      	b.n	8001c26 <__aeabi_dsub+0x1ca>
 8001f16:	4650      	mov	r0, sl
 8001f18:	4320      	orrs	r0, r4
 8001f1a:	1e44      	subs	r4, r0, #1
 8001f1c:	41a0      	sbcs	r0, r4
 8001f1e:	2400      	movs	r4, #0
 8001f20:	e760      	b.n	8001de4 <__aeabi_dsub+0x388>
 8001f22:	4e57      	ldr	r6, [pc, #348]	; (8002080 <__aeabi_dsub+0x624>)
 8001f24:	45b4      	cmp	ip, r6
 8001f26:	d04e      	beq.n	8001fc6 <__aeabi_dsub+0x56a>
 8001f28:	2680      	movs	r6, #128	; 0x80
 8001f2a:	0436      	lsls	r6, r6, #16
 8001f2c:	425b      	negs	r3, r3
 8001f2e:	4334      	orrs	r4, r6
 8001f30:	2b38      	cmp	r3, #56	; 0x38
 8001f32:	dd00      	ble.n	8001f36 <__aeabi_dsub+0x4da>
 8001f34:	e07f      	b.n	8002036 <__aeabi_dsub+0x5da>
 8001f36:	2b1f      	cmp	r3, #31
 8001f38:	dd00      	ble.n	8001f3c <__aeabi_dsub+0x4e0>
 8001f3a:	e08b      	b.n	8002054 <__aeabi_dsub+0x5f8>
 8001f3c:	2620      	movs	r6, #32
 8001f3e:	0027      	movs	r7, r4
 8001f40:	4650      	mov	r0, sl
 8001f42:	1af6      	subs	r6, r6, r3
 8001f44:	40b7      	lsls	r7, r6
 8001f46:	40d8      	lsrs	r0, r3
 8001f48:	4307      	orrs	r7, r0
 8001f4a:	4650      	mov	r0, sl
 8001f4c:	40b0      	lsls	r0, r6
 8001f4e:	1e46      	subs	r6, r0, #1
 8001f50:	41b0      	sbcs	r0, r6
 8001f52:	4307      	orrs	r7, r0
 8001f54:	40dc      	lsrs	r4, r3
 8001f56:	18bf      	adds	r7, r7, r2
 8001f58:	e7d6      	b.n	8001f08 <__aeabi_dsub+0x4ac>
 8001f5a:	000d      	movs	r5, r1
 8001f5c:	4315      	orrs	r5, r2
 8001f5e:	d100      	bne.n	8001f62 <__aeabi_dsub+0x506>
 8001f60:	e602      	b.n	8001b68 <__aeabi_dsub+0x10c>
 8001f62:	4650      	mov	r0, sl
 8001f64:	1a80      	subs	r0, r0, r2
 8001f66:	4582      	cmp	sl, r0
 8001f68:	41bf      	sbcs	r7, r7
 8001f6a:	1a65      	subs	r5, r4, r1
 8001f6c:	427f      	negs	r7, r7
 8001f6e:	1bed      	subs	r5, r5, r7
 8001f70:	4684      	mov	ip, r0
 8001f72:	0228      	lsls	r0, r5, #8
 8001f74:	d400      	bmi.n	8001f78 <__aeabi_dsub+0x51c>
 8001f76:	e68d      	b.n	8001c94 <__aeabi_dsub+0x238>
 8001f78:	4650      	mov	r0, sl
 8001f7a:	1a17      	subs	r7, r2, r0
 8001f7c:	42ba      	cmp	r2, r7
 8001f7e:	4192      	sbcs	r2, r2
 8001f80:	1b0c      	subs	r4, r1, r4
 8001f82:	4252      	negs	r2, r2
 8001f84:	1aa4      	subs	r4, r4, r2
 8001f86:	4698      	mov	r8, r3
 8001f88:	e5ee      	b.n	8001b68 <__aeabi_dsub+0x10c>
 8001f8a:	000d      	movs	r5, r1
 8001f8c:	4315      	orrs	r5, r2
 8001f8e:	d100      	bne.n	8001f92 <__aeabi_dsub+0x536>
 8001f90:	e76b      	b.n	8001e6a <__aeabi_dsub+0x40e>
 8001f92:	4650      	mov	r0, sl
 8001f94:	0767      	lsls	r7, r4, #29
 8001f96:	08c0      	lsrs	r0, r0, #3
 8001f98:	4307      	orrs	r7, r0
 8001f9a:	2080      	movs	r0, #128	; 0x80
 8001f9c:	08e4      	lsrs	r4, r4, #3
 8001f9e:	0300      	lsls	r0, r0, #12
 8001fa0:	4204      	tst	r4, r0
 8001fa2:	d007      	beq.n	8001fb4 <__aeabi_dsub+0x558>
 8001fa4:	08cd      	lsrs	r5, r1, #3
 8001fa6:	4205      	tst	r5, r0
 8001fa8:	d104      	bne.n	8001fb4 <__aeabi_dsub+0x558>
 8001faa:	002c      	movs	r4, r5
 8001fac:	4698      	mov	r8, r3
 8001fae:	08d7      	lsrs	r7, r2, #3
 8001fb0:	0749      	lsls	r1, r1, #29
 8001fb2:	430f      	orrs	r7, r1
 8001fb4:	0f7b      	lsrs	r3, r7, #29
 8001fb6:	00e4      	lsls	r4, r4, #3
 8001fb8:	431c      	orrs	r4, r3
 8001fba:	00ff      	lsls	r7, r7, #3
 8001fbc:	4e30      	ldr	r6, [pc, #192]	; (8002080 <__aeabi_dsub+0x624>)
 8001fbe:	e5d3      	b.n	8001b68 <__aeabi_dsub+0x10c>
 8001fc0:	4e2f      	ldr	r6, [pc, #188]	; (8002080 <__aeabi_dsub+0x624>)
 8001fc2:	45b4      	cmp	ip, r6
 8001fc4:	d1b4      	bne.n	8001f30 <__aeabi_dsub+0x4d4>
 8001fc6:	000c      	movs	r4, r1
 8001fc8:	0017      	movs	r7, r2
 8001fca:	4666      	mov	r6, ip
 8001fcc:	e5cc      	b.n	8001b68 <__aeabi_dsub+0x10c>
 8001fce:	2700      	movs	r7, #0
 8001fd0:	2400      	movs	r4, #0
 8001fd2:	e5e8      	b.n	8001ba6 <__aeabi_dsub+0x14a>
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d039      	beq.n	800204c <__aeabi_dsub+0x5f0>
 8001fd8:	000b      	movs	r3, r1
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	d100      	bne.n	8001fe0 <__aeabi_dsub+0x584>
 8001fde:	e744      	b.n	8001e6a <__aeabi_dsub+0x40e>
 8001fe0:	08c0      	lsrs	r0, r0, #3
 8001fe2:	0767      	lsls	r7, r4, #29
 8001fe4:	4307      	orrs	r7, r0
 8001fe6:	2080      	movs	r0, #128	; 0x80
 8001fe8:	08e4      	lsrs	r4, r4, #3
 8001fea:	0300      	lsls	r0, r0, #12
 8001fec:	4204      	tst	r4, r0
 8001fee:	d0e1      	beq.n	8001fb4 <__aeabi_dsub+0x558>
 8001ff0:	08cb      	lsrs	r3, r1, #3
 8001ff2:	4203      	tst	r3, r0
 8001ff4:	d1de      	bne.n	8001fb4 <__aeabi_dsub+0x558>
 8001ff6:	08d7      	lsrs	r7, r2, #3
 8001ff8:	0749      	lsls	r1, r1, #29
 8001ffa:	430f      	orrs	r7, r1
 8001ffc:	001c      	movs	r4, r3
 8001ffe:	e7d9      	b.n	8001fb4 <__aeabi_dsub+0x558>
 8002000:	2100      	movs	r1, #0
 8002002:	e771      	b.n	8001ee8 <__aeabi_dsub+0x48c>
 8002004:	2500      	movs	r5, #0
 8002006:	2700      	movs	r7, #0
 8002008:	e5e9      	b.n	8001bde <__aeabi_dsub+0x182>
 800200a:	002e      	movs	r6, r5
 800200c:	0027      	movs	r7, r4
 800200e:	3e20      	subs	r6, #32
 8002010:	40f7      	lsrs	r7, r6
 8002012:	2d20      	cmp	r5, #32
 8002014:	d02f      	beq.n	8002076 <__aeabi_dsub+0x61a>
 8002016:	2640      	movs	r6, #64	; 0x40
 8002018:	1b75      	subs	r5, r6, r5
 800201a:	40ac      	lsls	r4, r5
 800201c:	4650      	mov	r0, sl
 800201e:	4320      	orrs	r0, r4
 8002020:	1e44      	subs	r4, r0, #1
 8002022:	41a0      	sbcs	r0, r4
 8002024:	2400      	movs	r4, #0
 8002026:	4338      	orrs	r0, r7
 8002028:	e6dc      	b.n	8001de4 <__aeabi_dsub+0x388>
 800202a:	2480      	movs	r4, #128	; 0x80
 800202c:	2500      	movs	r5, #0
 800202e:	0324      	lsls	r4, r4, #12
 8002030:	4e13      	ldr	r6, [pc, #76]	; (8002080 <__aeabi_dsub+0x624>)
 8002032:	2700      	movs	r7, #0
 8002034:	e5d3      	b.n	8001bde <__aeabi_dsub+0x182>
 8002036:	4650      	mov	r0, sl
 8002038:	4320      	orrs	r0, r4
 800203a:	0007      	movs	r7, r0
 800203c:	1e78      	subs	r0, r7, #1
 800203e:	4187      	sbcs	r7, r0
 8002040:	2400      	movs	r4, #0
 8002042:	18bf      	adds	r7, r7, r2
 8002044:	e760      	b.n	8001f08 <__aeabi_dsub+0x4ac>
 8002046:	000c      	movs	r4, r1
 8002048:	0017      	movs	r7, r2
 800204a:	e58d      	b.n	8001b68 <__aeabi_dsub+0x10c>
 800204c:	000c      	movs	r4, r1
 800204e:	0017      	movs	r7, r2
 8002050:	4e0b      	ldr	r6, [pc, #44]	; (8002080 <__aeabi_dsub+0x624>)
 8002052:	e589      	b.n	8001b68 <__aeabi_dsub+0x10c>
 8002054:	001e      	movs	r6, r3
 8002056:	0027      	movs	r7, r4
 8002058:	3e20      	subs	r6, #32
 800205a:	40f7      	lsrs	r7, r6
 800205c:	2b20      	cmp	r3, #32
 800205e:	d00c      	beq.n	800207a <__aeabi_dsub+0x61e>
 8002060:	2640      	movs	r6, #64	; 0x40
 8002062:	1af3      	subs	r3, r6, r3
 8002064:	409c      	lsls	r4, r3
 8002066:	4650      	mov	r0, sl
 8002068:	4320      	orrs	r0, r4
 800206a:	1e44      	subs	r4, r0, #1
 800206c:	41a0      	sbcs	r0, r4
 800206e:	4307      	orrs	r7, r0
 8002070:	2400      	movs	r4, #0
 8002072:	18bf      	adds	r7, r7, r2
 8002074:	e748      	b.n	8001f08 <__aeabi_dsub+0x4ac>
 8002076:	2400      	movs	r4, #0
 8002078:	e7d0      	b.n	800201c <__aeabi_dsub+0x5c0>
 800207a:	2400      	movs	r4, #0
 800207c:	e7f3      	b.n	8002066 <__aeabi_dsub+0x60a>
 800207e:	46c0      	nop			; (mov r8, r8)
 8002080:	000007ff 	.word	0x000007ff
 8002084:	ff7fffff 	.word	0xff7fffff

08002088 <__aeabi_d2iz>:
 8002088:	b530      	push	{r4, r5, lr}
 800208a:	4d13      	ldr	r5, [pc, #76]	; (80020d8 <__aeabi_d2iz+0x50>)
 800208c:	030a      	lsls	r2, r1, #12
 800208e:	004b      	lsls	r3, r1, #1
 8002090:	0b12      	lsrs	r2, r2, #12
 8002092:	0d5b      	lsrs	r3, r3, #21
 8002094:	0fc9      	lsrs	r1, r1, #31
 8002096:	2400      	movs	r4, #0
 8002098:	42ab      	cmp	r3, r5
 800209a:	dd10      	ble.n	80020be <__aeabi_d2iz+0x36>
 800209c:	4c0f      	ldr	r4, [pc, #60]	; (80020dc <__aeabi_d2iz+0x54>)
 800209e:	42a3      	cmp	r3, r4
 80020a0:	dc0f      	bgt.n	80020c2 <__aeabi_d2iz+0x3a>
 80020a2:	2480      	movs	r4, #128	; 0x80
 80020a4:	4d0e      	ldr	r5, [pc, #56]	; (80020e0 <__aeabi_d2iz+0x58>)
 80020a6:	0364      	lsls	r4, r4, #13
 80020a8:	4322      	orrs	r2, r4
 80020aa:	1aed      	subs	r5, r5, r3
 80020ac:	2d1f      	cmp	r5, #31
 80020ae:	dd0b      	ble.n	80020c8 <__aeabi_d2iz+0x40>
 80020b0:	480c      	ldr	r0, [pc, #48]	; (80020e4 <__aeabi_d2iz+0x5c>)
 80020b2:	1ac3      	subs	r3, r0, r3
 80020b4:	40da      	lsrs	r2, r3
 80020b6:	4254      	negs	r4, r2
 80020b8:	2900      	cmp	r1, #0
 80020ba:	d100      	bne.n	80020be <__aeabi_d2iz+0x36>
 80020bc:	0014      	movs	r4, r2
 80020be:	0020      	movs	r0, r4
 80020c0:	bd30      	pop	{r4, r5, pc}
 80020c2:	4b09      	ldr	r3, [pc, #36]	; (80020e8 <__aeabi_d2iz+0x60>)
 80020c4:	18cc      	adds	r4, r1, r3
 80020c6:	e7fa      	b.n	80020be <__aeabi_d2iz+0x36>
 80020c8:	4c08      	ldr	r4, [pc, #32]	; (80020ec <__aeabi_d2iz+0x64>)
 80020ca:	40e8      	lsrs	r0, r5
 80020cc:	46a4      	mov	ip, r4
 80020ce:	4463      	add	r3, ip
 80020d0:	409a      	lsls	r2, r3
 80020d2:	4302      	orrs	r2, r0
 80020d4:	e7ef      	b.n	80020b6 <__aeabi_d2iz+0x2e>
 80020d6:	46c0      	nop			; (mov r8, r8)
 80020d8:	000003fe 	.word	0x000003fe
 80020dc:	0000041d 	.word	0x0000041d
 80020e0:	00000433 	.word	0x00000433
 80020e4:	00000413 	.word	0x00000413
 80020e8:	7fffffff 	.word	0x7fffffff
 80020ec:	fffffbed 	.word	0xfffffbed

080020f0 <__aeabi_i2d>:
 80020f0:	b570      	push	{r4, r5, r6, lr}
 80020f2:	2800      	cmp	r0, #0
 80020f4:	d030      	beq.n	8002158 <__aeabi_i2d+0x68>
 80020f6:	17c3      	asrs	r3, r0, #31
 80020f8:	18c4      	adds	r4, r0, r3
 80020fa:	405c      	eors	r4, r3
 80020fc:	0fc5      	lsrs	r5, r0, #31
 80020fe:	0020      	movs	r0, r4
 8002100:	f000 f870 	bl	80021e4 <__clzsi2>
 8002104:	4b17      	ldr	r3, [pc, #92]	; (8002164 <__aeabi_i2d+0x74>)
 8002106:	4a18      	ldr	r2, [pc, #96]	; (8002168 <__aeabi_i2d+0x78>)
 8002108:	1a1b      	subs	r3, r3, r0
 800210a:	1ad2      	subs	r2, r2, r3
 800210c:	2a1f      	cmp	r2, #31
 800210e:	dd18      	ble.n	8002142 <__aeabi_i2d+0x52>
 8002110:	4a16      	ldr	r2, [pc, #88]	; (800216c <__aeabi_i2d+0x7c>)
 8002112:	1ad2      	subs	r2, r2, r3
 8002114:	4094      	lsls	r4, r2
 8002116:	2200      	movs	r2, #0
 8002118:	0324      	lsls	r4, r4, #12
 800211a:	055b      	lsls	r3, r3, #21
 800211c:	0b24      	lsrs	r4, r4, #12
 800211e:	0d5b      	lsrs	r3, r3, #21
 8002120:	2100      	movs	r1, #0
 8002122:	0010      	movs	r0, r2
 8002124:	0324      	lsls	r4, r4, #12
 8002126:	0d0a      	lsrs	r2, r1, #20
 8002128:	0b24      	lsrs	r4, r4, #12
 800212a:	0512      	lsls	r2, r2, #20
 800212c:	4322      	orrs	r2, r4
 800212e:	4c10      	ldr	r4, [pc, #64]	; (8002170 <__aeabi_i2d+0x80>)
 8002130:	051b      	lsls	r3, r3, #20
 8002132:	4022      	ands	r2, r4
 8002134:	4313      	orrs	r3, r2
 8002136:	005b      	lsls	r3, r3, #1
 8002138:	07ed      	lsls	r5, r5, #31
 800213a:	085b      	lsrs	r3, r3, #1
 800213c:	432b      	orrs	r3, r5
 800213e:	0019      	movs	r1, r3
 8002140:	bd70      	pop	{r4, r5, r6, pc}
 8002142:	0021      	movs	r1, r4
 8002144:	4091      	lsls	r1, r2
 8002146:	000a      	movs	r2, r1
 8002148:	210b      	movs	r1, #11
 800214a:	1a08      	subs	r0, r1, r0
 800214c:	40c4      	lsrs	r4, r0
 800214e:	055b      	lsls	r3, r3, #21
 8002150:	0324      	lsls	r4, r4, #12
 8002152:	0b24      	lsrs	r4, r4, #12
 8002154:	0d5b      	lsrs	r3, r3, #21
 8002156:	e7e3      	b.n	8002120 <__aeabi_i2d+0x30>
 8002158:	2500      	movs	r5, #0
 800215a:	2300      	movs	r3, #0
 800215c:	2400      	movs	r4, #0
 800215e:	2200      	movs	r2, #0
 8002160:	e7de      	b.n	8002120 <__aeabi_i2d+0x30>
 8002162:	46c0      	nop			; (mov r8, r8)
 8002164:	0000041e 	.word	0x0000041e
 8002168:	00000433 	.word	0x00000433
 800216c:	00000413 	.word	0x00000413
 8002170:	800fffff 	.word	0x800fffff

08002174 <__aeabi_ui2d>:
 8002174:	b510      	push	{r4, lr}
 8002176:	1e04      	subs	r4, r0, #0
 8002178:	d028      	beq.n	80021cc <__aeabi_ui2d+0x58>
 800217a:	f000 f833 	bl	80021e4 <__clzsi2>
 800217e:	4b15      	ldr	r3, [pc, #84]	; (80021d4 <__aeabi_ui2d+0x60>)
 8002180:	4a15      	ldr	r2, [pc, #84]	; (80021d8 <__aeabi_ui2d+0x64>)
 8002182:	1a1b      	subs	r3, r3, r0
 8002184:	1ad2      	subs	r2, r2, r3
 8002186:	2a1f      	cmp	r2, #31
 8002188:	dd15      	ble.n	80021b6 <__aeabi_ui2d+0x42>
 800218a:	4a14      	ldr	r2, [pc, #80]	; (80021dc <__aeabi_ui2d+0x68>)
 800218c:	1ad2      	subs	r2, r2, r3
 800218e:	4094      	lsls	r4, r2
 8002190:	2200      	movs	r2, #0
 8002192:	0324      	lsls	r4, r4, #12
 8002194:	055b      	lsls	r3, r3, #21
 8002196:	0b24      	lsrs	r4, r4, #12
 8002198:	0d5b      	lsrs	r3, r3, #21
 800219a:	2100      	movs	r1, #0
 800219c:	0010      	movs	r0, r2
 800219e:	0324      	lsls	r4, r4, #12
 80021a0:	0d0a      	lsrs	r2, r1, #20
 80021a2:	0b24      	lsrs	r4, r4, #12
 80021a4:	0512      	lsls	r2, r2, #20
 80021a6:	4322      	orrs	r2, r4
 80021a8:	4c0d      	ldr	r4, [pc, #52]	; (80021e0 <__aeabi_ui2d+0x6c>)
 80021aa:	051b      	lsls	r3, r3, #20
 80021ac:	4022      	ands	r2, r4
 80021ae:	4313      	orrs	r3, r2
 80021b0:	005b      	lsls	r3, r3, #1
 80021b2:	0859      	lsrs	r1, r3, #1
 80021b4:	bd10      	pop	{r4, pc}
 80021b6:	0021      	movs	r1, r4
 80021b8:	4091      	lsls	r1, r2
 80021ba:	000a      	movs	r2, r1
 80021bc:	210b      	movs	r1, #11
 80021be:	1a08      	subs	r0, r1, r0
 80021c0:	40c4      	lsrs	r4, r0
 80021c2:	055b      	lsls	r3, r3, #21
 80021c4:	0324      	lsls	r4, r4, #12
 80021c6:	0b24      	lsrs	r4, r4, #12
 80021c8:	0d5b      	lsrs	r3, r3, #21
 80021ca:	e7e6      	b.n	800219a <__aeabi_ui2d+0x26>
 80021cc:	2300      	movs	r3, #0
 80021ce:	2400      	movs	r4, #0
 80021d0:	2200      	movs	r2, #0
 80021d2:	e7e2      	b.n	800219a <__aeabi_ui2d+0x26>
 80021d4:	0000041e 	.word	0x0000041e
 80021d8:	00000433 	.word	0x00000433
 80021dc:	00000413 	.word	0x00000413
 80021e0:	800fffff 	.word	0x800fffff

080021e4 <__clzsi2>:
 80021e4:	211c      	movs	r1, #28
 80021e6:	2301      	movs	r3, #1
 80021e8:	041b      	lsls	r3, r3, #16
 80021ea:	4298      	cmp	r0, r3
 80021ec:	d301      	bcc.n	80021f2 <__clzsi2+0xe>
 80021ee:	0c00      	lsrs	r0, r0, #16
 80021f0:	3910      	subs	r1, #16
 80021f2:	0a1b      	lsrs	r3, r3, #8
 80021f4:	4298      	cmp	r0, r3
 80021f6:	d301      	bcc.n	80021fc <__clzsi2+0x18>
 80021f8:	0a00      	lsrs	r0, r0, #8
 80021fa:	3908      	subs	r1, #8
 80021fc:	091b      	lsrs	r3, r3, #4
 80021fe:	4298      	cmp	r0, r3
 8002200:	d301      	bcc.n	8002206 <__clzsi2+0x22>
 8002202:	0900      	lsrs	r0, r0, #4
 8002204:	3904      	subs	r1, #4
 8002206:	a202      	add	r2, pc, #8	; (adr r2, 8002210 <__clzsi2+0x2c>)
 8002208:	5c10      	ldrb	r0, [r2, r0]
 800220a:	1840      	adds	r0, r0, r1
 800220c:	4770      	bx	lr
 800220e:	46c0      	nop			; (mov r8, r8)
 8002210:	02020304 	.word	0x02020304
 8002214:	01010101 	.word	0x01010101
	...

08002220 <__clzdi2>:
 8002220:	b510      	push	{r4, lr}
 8002222:	2900      	cmp	r1, #0
 8002224:	d103      	bne.n	800222e <__clzdi2+0xe>
 8002226:	f7ff ffdd 	bl	80021e4 <__clzsi2>
 800222a:	3020      	adds	r0, #32
 800222c:	e002      	b.n	8002234 <__clzdi2+0x14>
 800222e:	1c08      	adds	r0, r1, #0
 8002230:	f7ff ffd8 	bl	80021e4 <__clzsi2>
 8002234:	bd10      	pop	{r4, pc}
 8002236:	46c0      	nop			; (mov r8, r8)

08002238 <BSP_LED_Init>:
  *   This parameter can be one of following parameters:
  *            @arg  LED2
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8002238:	b500      	push	{lr}
 800223a:	0002      	movs	r2, r0
 800223c:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE( Led );
 800223e:	2803      	cmp	r0, #3
 8002240:	d80c      	bhi.n	800225c <BSP_LED_Init+0x24>
 8002242:	4b1b      	ldr	r3, [pc, #108]	; (80022b0 <BSP_LED_Init+0x78>)
 8002244:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002246:	f7fd ff5f 	bl	8000108 <__gnu_thumb1_case_uqi>
 800224a:	1b02      	.short	0x1b02
 800224c:	2b23      	.short	0x2b23
 800224e:	2002      	movs	r0, #2
 8002250:	4301      	orrs	r1, r0
 8002252:	62d9      	str	r1, [r3, #44]	; 0x2c
 8002254:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002256:	4003      	ands	r3, r0
 8002258:	9301      	str	r3, [sp, #4]
 800225a:	9b01      	ldr	r3, [sp, #4]

  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = LED_PIN[Led];
 800225c:	4b15      	ldr	r3, [pc, #84]	; (80022b4 <BSP_LED_Init+0x7c>)
 800225e:	0051      	lsls	r1, r2, #1
 8002260:	5acb      	ldrh	r3, [r1, r3]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  
  HAL_GPIO_Init(LED_PORT[Led], &GPIO_InitStruct);
 8002262:	0092      	lsls	r2, r2, #2
  GPIO_InitStruct.Pin = LED_PIN[Led];
 8002264:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002266:	2301      	movs	r3, #1
 8002268:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800226a:	2300      	movs	r3, #0
 800226c:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800226e:	3303      	adds	r3, #3
 8002270:	9308      	str	r3, [sp, #32]
  HAL_GPIO_Init(LED_PORT[Led], &GPIO_InitStruct);
 8002272:	4b11      	ldr	r3, [pc, #68]	; (80022b8 <BSP_LED_Init+0x80>)
 8002274:	a905      	add	r1, sp, #20
 8002276:	58d0      	ldr	r0, [r2, r3]
 8002278:	f001 fe2e 	bl	8003ed8 <HAL_GPIO_Init>
}
 800227c:	b00b      	add	sp, #44	; 0x2c
 800227e:	bd00      	pop	{pc}
  LEDx_GPIO_CLK_ENABLE( Led );
 8002280:	2001      	movs	r0, #1
 8002282:	4301      	orrs	r1, r0
 8002284:	62d9      	str	r1, [r3, #44]	; 0x2c
 8002286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002288:	4003      	ands	r3, r0
 800228a:	9302      	str	r3, [sp, #8]
 800228c:	9b02      	ldr	r3, [sp, #8]
 800228e:	e7e5      	b.n	800225c <BSP_LED_Init+0x24>
 8002290:	2002      	movs	r0, #2
 8002292:	4301      	orrs	r1, r0
 8002294:	62d9      	str	r1, [r3, #44]	; 0x2c
 8002296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002298:	4003      	ands	r3, r0
 800229a:	9303      	str	r3, [sp, #12]
 800229c:	9b03      	ldr	r3, [sp, #12]
 800229e:	e7dd      	b.n	800225c <BSP_LED_Init+0x24>
 80022a0:	2002      	movs	r0, #2
 80022a2:	4301      	orrs	r1, r0
 80022a4:	62d9      	str	r1, [r3, #44]	; 0x2c
 80022a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022a8:	4003      	ands	r3, r0
 80022aa:	9304      	str	r3, [sp, #16]
 80022ac:	9b04      	ldr	r3, [sp, #16]
 80022ae:	e7d5      	b.n	800225c <BSP_LED_Init+0x24>
 80022b0:	40021000 	.word	0x40021000
 80022b4:	08007bc8 	.word	0x08007bc8
 80022b8:	20000000 	.word	0x20000000

080022bc <BSP_LED_Off>:
  *            @arg  LED2
  * @retval None
  */
void BSP_LED_Off(Led_TypeDef Led)
{
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET); 
 80022bc:	4b05      	ldr	r3, [pc, #20]	; (80022d4 <BSP_LED_Off+0x18>)
{
 80022be:	b510      	push	{r4, lr}
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET); 
 80022c0:	0042      	lsls	r2, r0, #1
 80022c2:	5ad1      	ldrh	r1, [r2, r3]
 80022c4:	4b04      	ldr	r3, [pc, #16]	; (80022d8 <BSP_LED_Off+0x1c>)
 80022c6:	0080      	lsls	r0, r0, #2
 80022c8:	2200      	movs	r2, #0
 80022ca:	58c0      	ldr	r0, [r0, r3]
 80022cc:	f001 fec6 	bl	800405c <HAL_GPIO_WritePin>
}
 80022d0:	bd10      	pop	{r4, pc}
 80022d2:	46c0      	nop			; (mov r8, r8)
 80022d4:	08007bc8 	.word	0x08007bc8
 80022d8:	20000000 	.word	0x20000000

080022dc <BSP_LED_Toggle>:
  *            @arg  LED2
  * @retval None
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 80022dc:	4b04      	ldr	r3, [pc, #16]	; (80022f0 <BSP_LED_Toggle+0x14>)
{
 80022de:	b510      	push	{r4, lr}
  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 80022e0:	0042      	lsls	r2, r0, #1
 80022e2:	5ad1      	ldrh	r1, [r2, r3]
 80022e4:	4b03      	ldr	r3, [pc, #12]	; (80022f4 <BSP_LED_Toggle+0x18>)
 80022e6:	0080      	lsls	r0, r0, #2
 80022e8:	58c0      	ldr	r0, [r0, r3]
 80022ea:	f001 febd 	bl	8004068 <HAL_GPIO_TogglePin>
}
 80022ee:	bd10      	pop	{r4, pc}
 80022f0:	08007bc8 	.word	0x08007bc8
 80022f4:	20000000 	.word	0x20000000

080022f8 <GetFskBandwidthRegValue>:
 *
 * \param [IN] bandwidth Bandwidth value in Hz
 * \retval regValue Bandwidth register value.
 */
static uint8_t GetFskBandwidthRegValue( uint32_t bandwidth )
{
 80022f8:	2200      	movs	r2, #0
 80022fa:	b510      	push	{r4, lr}
    uint8_t i;

    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
    {
        if( ( bandwidth >= FskBandwidths[i].bandwidth ) && ( bandwidth < FskBandwidths[i + 1].bandwidth ) )
 80022fc:	4907      	ldr	r1, [pc, #28]	; (800231c <GetFskBandwidthRegValue+0x24>)
 80022fe:	00d3      	lsls	r3, r2, #3
 8002300:	585c      	ldr	r4, [r3, r1]
 8002302:	4284      	cmp	r4, r0
 8002304:	d803      	bhi.n	800230e <GetFskBandwidthRegValue+0x16>
 8002306:	18cb      	adds	r3, r1, r3
 8002308:	689c      	ldr	r4, [r3, #8]
 800230a:	42a0      	cmp	r0, r4
 800230c:	d303      	bcc.n	8002316 <GetFskBandwidthRegValue+0x1e>
 800230e:	3201      	adds	r2, #1
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
 8002310:	2a15      	cmp	r2, #21
 8002312:	d1f4      	bne.n	80022fe <GetFskBandwidthRegValue+0x6>
 8002314:	e7fe      	b.n	8002314 <GetFskBandwidthRegValue+0x1c>
        {
            return FskBandwidths[i].RegValue;
 8002316:	7918      	ldrb	r0, [r3, #4]
        }
    }
    // ERROR: Value not found
    while( 1 );
}
 8002318:	bd10      	pop	{r4, pc}
 800231a:	46c0      	nop			; (mov r8, r8)
 800231c:	08007bd8 	.word	0x08007bd8

08002320 <SX1276OnDio4Irq>:
    }
}

void SX1276OnDio4Irq( void )
{
    switch( SX1276.Settings.Modem )
 8002320:	4b05      	ldr	r3, [pc, #20]	; (8002338 <SX1276OnDio4Irq+0x18>)
 8002322:	795a      	ldrb	r2, [r3, #5]
 8002324:	2a00      	cmp	r2, #0
 8002326:	d105      	bne.n	8002334 <SX1276OnDio4Irq+0x14>
    {
    case MODEM_FSK:
        {
            if( SX1276.Settings.FskPacketHandler.PreambleDetected == false )
 8002328:	3330      	adds	r3, #48	; 0x30
 800232a:	781a      	ldrb	r2, [r3, #0]
 800232c:	2a00      	cmp	r2, #0
 800232e:	d101      	bne.n	8002334 <SX1276OnDio4Irq+0x14>
            {
                SX1276.Settings.FskPacketHandler.PreambleDetected = true;
 8002330:	3201      	adds	r2, #1
 8002332:	701a      	strb	r2, [r3, #0]
    case MODEM_LORA:
        break;
    default:
        break;
    }
}
 8002334:	4770      	bx	lr
 8002336:	46c0      	nop			; (mov r8, r8)
 8002338:	20000594 	.word	0x20000594

0800233c <SX1276BoardInit>:
  LoRaBoardCallbacks =callbacks;
 800233c:	4b01      	ldr	r3, [pc, #4]	; (8002344 <SX1276BoardInit+0x8>)
 800233e:	6018      	str	r0, [r3, #0]
}
 8002340:	4770      	bx	lr
 8002342:	46c0      	nop			; (mov r8, r8)
 8002344:	20000110 	.word	0x20000110

08002348 <SX1276GetStatus>:
    return SX1276.Settings.State;
 8002348:	4b01      	ldr	r3, [pc, #4]	; (8002350 <SX1276GetStatus+0x8>)
 800234a:	7918      	ldrb	r0, [r3, #4]
}
 800234c:	4770      	bx	lr
 800234e:	46c0      	nop			; (mov r8, r8)
 8002350:	20000594 	.word	0x20000594

08002354 <SX1276Reset>:
{
 8002354:	b530      	push	{r4, r5, lr}
 8002356:	b087      	sub	sp, #28
    initStruct.Mode =GPIO_MODE_OUTPUT_PP;
 8002358:	2401      	movs	r4, #1
    GPIO_InitTypeDef initStruct={0};
 800235a:	2214      	movs	r2, #20
 800235c:	2100      	movs	r1, #0
 800235e:	a801      	add	r0, sp, #4
 8002360:	f004 fea7 	bl	80070b2 <memset>
    initStruct.Speed = GPIO_SPEED_HIGH;
 8002364:	2303      	movs	r3, #3
    HW_GPIO_Init( RADIO_RESET_PORT, RADIO_RESET_PIN, &initStruct);
 8002366:	4d0e      	ldr	r5, [pc, #56]	; (80023a0 <SX1276Reset+0x4c>)
 8002368:	aa01      	add	r2, sp, #4
 800236a:	0021      	movs	r1, r4
 800236c:	0028      	movs	r0, r5
    initStruct.Speed = GPIO_SPEED_HIGH;
 800236e:	9304      	str	r3, [sp, #16]
    initStruct.Mode =GPIO_MODE_OUTPUT_PP;
 8002370:	9402      	str	r4, [sp, #8]
    HW_GPIO_Init( RADIO_RESET_PORT, RADIO_RESET_PIN, &initStruct);
 8002372:	f003 fe1d 	bl	8005fb0 <HW_GPIO_Init>
    HW_GPIO_Write( RADIO_RESET_PORT, RADIO_RESET_PIN, 0 );
 8002376:	0021      	movs	r1, r4
 8002378:	2200      	movs	r2, #0
 800237a:	0028      	movs	r0, r5
 800237c:	f003 fe8a 	bl	8006094 <HW_GPIO_Write>
    DelayMs( 1 );
 8002380:	0020      	movs	r0, r4
 8002382:	f003 fca7 	bl	8005cd4 <DelayMs>
    initStruct.Mode = GPIO_NOPULL;
 8002386:	2300      	movs	r3, #0
    HW_GPIO_Init( RADIO_RESET_PORT, RADIO_RESET_PIN, &initStruct);
 8002388:	aa01      	add	r2, sp, #4
 800238a:	0021      	movs	r1, r4
 800238c:	0028      	movs	r0, r5
    initStruct.Mode = GPIO_NOPULL;
 800238e:	9302      	str	r3, [sp, #8]
    HW_GPIO_Init( RADIO_RESET_PORT, RADIO_RESET_PIN, &initStruct);
 8002390:	f003 fe0e 	bl	8005fb0 <HW_GPIO_Init>
    DelayMs( 6 );
 8002394:	2006      	movs	r0, #6
 8002396:	f003 fc9d 	bl	8005cd4 <DelayMs>
}
 800239a:	b007      	add	sp, #28
 800239c:	bd30      	pop	{r4, r5, pc}
 800239e:	46c0      	nop			; (mov r8, r8)
 80023a0:	50000800 	.word	0x50000800

080023a4 <SX1276WriteBuffer>:
{
 80023a4:	b570      	push	{r4, r5, r6, lr}
 80023a6:	0006      	movs	r6, r0
 80023a8:	000c      	movs	r4, r1
    HW_GPIO_Write( RADIO_NSS_PORT, RADIO_NSS_PIN, 0 );
 80023aa:	20a0      	movs	r0, #160	; 0xa0
 80023ac:	2180      	movs	r1, #128	; 0x80
{
 80023ae:	0015      	movs	r5, r2
    HW_GPIO_Write( RADIO_NSS_PORT, RADIO_NSS_PIN, 0 );
 80023b0:	0209      	lsls	r1, r1, #8
 80023b2:	2200      	movs	r2, #0
 80023b4:	05c0      	lsls	r0, r0, #23
 80023b6:	f003 fe6d 	bl	8006094 <HW_GPIO_Write>
    HW_SPI_InOut( addr | 0x80 );
 80023ba:	2080      	movs	r0, #128	; 0x80
 80023bc:	4330      	orrs	r0, r6
 80023be:	f004 f92b 	bl	8006618 <HW_SPI_InOut>
 80023c2:	1965      	adds	r5, r4, r5
    for( i = 0; i < size; i++ )
 80023c4:	42ac      	cmp	r4, r5
 80023c6:	d107      	bne.n	80023d8 <SX1276WriteBuffer+0x34>
    HW_GPIO_Write( RADIO_NSS_PORT, RADIO_NSS_PIN, 1 );
 80023c8:	2180      	movs	r1, #128	; 0x80
 80023ca:	20a0      	movs	r0, #160	; 0xa0
 80023cc:	2201      	movs	r2, #1
 80023ce:	0209      	lsls	r1, r1, #8
 80023d0:	05c0      	lsls	r0, r0, #23
 80023d2:	f003 fe5f 	bl	8006094 <HW_GPIO_Write>
}
 80023d6:	bd70      	pop	{r4, r5, r6, pc}
          HW_SPI_InOut( buffer[i] );
 80023d8:	7820      	ldrb	r0, [r4, #0]
 80023da:	f004 f91d 	bl	8006618 <HW_SPI_InOut>
 80023de:	3401      	adds	r4, #1
 80023e0:	e7f0      	b.n	80023c4 <SX1276WriteBuffer+0x20>

080023e2 <SX1276Write>:
{
 80023e2:	b507      	push	{r0, r1, r2, lr}
 80023e4:	466b      	mov	r3, sp
 80023e6:	71d9      	strb	r1, [r3, #7]
 80023e8:	3307      	adds	r3, #7
    SX1276WriteBuffer( addr, &data, 1 );
 80023ea:	2201      	movs	r2, #1
 80023ec:	0019      	movs	r1, r3
 80023ee:	f7ff ffd9 	bl	80023a4 <SX1276WriteBuffer>
}
 80023f2:	bd07      	pop	{r0, r1, r2, pc}

080023f4 <SX1276SetChannel>:
    SX1276.Settings.Channel = freq;
 80023f4:	4b11      	ldr	r3, [pc, #68]	; (800243c <SX1276SetChannel+0x48>)
{
 80023f6:	b570      	push	{r4, r5, r6, lr}
    SX_FREQ_TO_CHANNEL(channel, freq);
 80023f8:	4911      	ldr	r1, [pc, #68]	; (8002440 <SX1276SetChannel+0x4c>)
    SX1276.Settings.Channel = freq;
 80023fa:	6098      	str	r0, [r3, #8]
{
 80023fc:	0005      	movs	r5, r0
    SX_FREQ_TO_CHANNEL(channel, freq);
 80023fe:	f7fd ff13 	bl	8000228 <__aeabi_uidivmod>
 8002402:	4b10      	ldr	r3, [pc, #64]	; (8002444 <SX1276SetChannel+0x50>)
 8002404:	0208      	lsls	r0, r1, #8
 8002406:	18c0      	adds	r0, r0, r3
 8002408:	490d      	ldr	r1, [pc, #52]	; (8002440 <SX1276SetChannel+0x4c>)
 800240a:	f7fd fe87 	bl	800011c <__udivsi3>
 800240e:	490c      	ldr	r1, [pc, #48]	; (8002440 <SX1276SetChannel+0x4c>)
 8002410:	0004      	movs	r4, r0
 8002412:	0028      	movs	r0, r5
 8002414:	f7fd fe82 	bl	800011c <__udivsi3>
 8002418:	0200      	lsls	r0, r0, #8
 800241a:	1824      	adds	r4, r4, r0
    SX1276Write( REG_FRFMSB, ( uint8_t )( ( channel >> 16 ) & 0xFF ) );
 800241c:	0c21      	lsrs	r1, r4, #16
 800241e:	b2c9      	uxtb	r1, r1
 8002420:	2006      	movs	r0, #6
 8002422:	f7ff ffde 	bl	80023e2 <SX1276Write>
    SX1276Write( REG_FRFMID, ( uint8_t )( ( channel >> 8 ) & 0xFF ) );
 8002426:	0a21      	lsrs	r1, r4, #8
 8002428:	b2c9      	uxtb	r1, r1
 800242a:	2007      	movs	r0, #7
 800242c:	f7ff ffd9 	bl	80023e2 <SX1276Write>
    SX1276Write( REG_FRFLSB, ( uint8_t )( channel & 0xFF ) );
 8002430:	b2e1      	uxtb	r1, r4
 8002432:	2008      	movs	r0, #8
 8002434:	f7ff ffd5 	bl	80023e2 <SX1276Write>
}
 8002438:	bd70      	pop	{r4, r5, r6, pc}
 800243a:	46c0      	nop			; (mov r8, r8)
 800243c:	20000594 	.word	0x20000594
 8002440:	00003d09 	.word	0x00003d09
 8002444:	00001e84 	.word	0x00001e84

08002448 <SX1276ReadBuffer>:
{
 8002448:	b570      	push	{r4, r5, r6, lr}
 800244a:	0006      	movs	r6, r0
 800244c:	000c      	movs	r4, r1
    HW_GPIO_Write( RADIO_NSS_PORT, RADIO_NSS_PIN, 0 );
 800244e:	20a0      	movs	r0, #160	; 0xa0
 8002450:	2180      	movs	r1, #128	; 0x80
{
 8002452:	0015      	movs	r5, r2
    HW_GPIO_Write( RADIO_NSS_PORT, RADIO_NSS_PIN, 0 );
 8002454:	0209      	lsls	r1, r1, #8
 8002456:	2200      	movs	r2, #0
 8002458:	05c0      	lsls	r0, r0, #23
 800245a:	f003 fe1b 	bl	8006094 <HW_GPIO_Write>
    HW_SPI_InOut( addr & 0x7F );
 800245e:	207f      	movs	r0, #127	; 0x7f
 8002460:	4030      	ands	r0, r6
 8002462:	f004 f8d9 	bl	8006618 <HW_SPI_InOut>
 8002466:	1965      	adds	r5, r4, r5
    for( i = 0; i < size; i++ )
 8002468:	42ac      	cmp	r4, r5
 800246a:	d107      	bne.n	800247c <SX1276ReadBuffer+0x34>
    HW_GPIO_Write( RADIO_NSS_PORT, RADIO_NSS_PIN, 1 );
 800246c:	2180      	movs	r1, #128	; 0x80
 800246e:	20a0      	movs	r0, #160	; 0xa0
 8002470:	2201      	movs	r2, #1
 8002472:	0209      	lsls	r1, r1, #8
 8002474:	05c0      	lsls	r0, r0, #23
 8002476:	f003 fe0d 	bl	8006094 <HW_GPIO_Write>
}
 800247a:	bd70      	pop	{r4, r5, r6, pc}
          buffer[i] = HW_SPI_InOut( 0 );
 800247c:	2000      	movs	r0, #0
 800247e:	f004 f8cb 	bl	8006618 <HW_SPI_InOut>
 8002482:	7020      	strb	r0, [r4, #0]
 8002484:	3401      	adds	r4, #1
 8002486:	e7ef      	b.n	8002468 <SX1276ReadBuffer+0x20>

08002488 <SX1276Read>:
{
 8002488:	b513      	push	{r0, r1, r4, lr}
    SX1276ReadBuffer( addr, &data, 1 );
 800248a:	466b      	mov	r3, sp
 800248c:	1ddc      	adds	r4, r3, #7
 800248e:	2201      	movs	r2, #1
 8002490:	0021      	movs	r1, r4
 8002492:	f7ff ffd9 	bl	8002448 <SX1276ReadBuffer>
    return data;
 8002496:	7820      	ldrb	r0, [r4, #0]
}
 8002498:	bd16      	pop	{r1, r2, r4, pc}
	...

0800249c <RxChainCalibration>:
{
 800249c:	b570      	push	{r4, r5, r6, lr}
    regPaConfigInitVal = SX1276Read( REG_PACONFIG );
 800249e:	2009      	movs	r0, #9
 80024a0:	f7ff fff2 	bl	8002488 <SX1276Read>
 80024a4:	0005      	movs	r5, r0
    channel = ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 80024a6:	2006      	movs	r0, #6
 80024a8:	f7ff ffee 	bl	8002488 <SX1276Read>
 80024ac:	0004      	movs	r4, r0
                ( ( uint32_t )SX1276Read( REG_FRFMID ) << 8 ) |
 80024ae:	2007      	movs	r0, #7
 80024b0:	f7ff ffea 	bl	8002488 <SX1276Read>
    channel = ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 80024b4:	0424      	lsls	r4, r4, #16
                ( ( uint32_t )SX1276Read( REG_FRFMID ) << 8 ) |
 80024b6:	0200      	lsls	r0, r0, #8
    channel = ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 80024b8:	4304      	orrs	r4, r0
                ( ( uint32_t )SX1276Read( REG_FRFLSB ) ) );
 80024ba:	2008      	movs	r0, #8
 80024bc:	f7ff ffe4 	bl	8002488 <SX1276Read>
    SX_CHANNEL_TO_FREQ(channel, initialFreq);
 80024c0:	4b1a      	ldr	r3, [pc, #104]	; (800252c <RxChainCalibration+0x90>)
    channel = ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 80024c2:	4320      	orrs	r0, r4
    SX_CHANNEL_TO_FREQ(channel, initialFreq);
 80024c4:	b2c4      	uxtb	r4, r0
 80024c6:	435c      	muls	r4, r3
 80024c8:	0a00      	lsrs	r0, r0, #8
 80024ca:	4358      	muls	r0, r3
 80024cc:	3480      	adds	r4, #128	; 0x80
 80024ce:	0a24      	lsrs	r4, r4, #8
    SX1276Write( REG_PACONFIG, 0x00 );
 80024d0:	2100      	movs	r1, #0
    SX_CHANNEL_TO_FREQ(channel, initialFreq);
 80024d2:	1824      	adds	r4, r4, r0
    SX1276Write( REG_PACONFIG, 0x00 );
 80024d4:	2009      	movs	r0, #9
 80024d6:	f7ff ff84 	bl	80023e2 <SX1276Write>
    SX1276Write( REG_IMAGECAL, ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_MASK ) | RF_IMAGECAL_IMAGECAL_START );
 80024da:	203b      	movs	r0, #59	; 0x3b
 80024dc:	f7ff ffd4 	bl	8002488 <SX1276Read>
 80024e0:	2140      	movs	r1, #64	; 0x40
 80024e2:	4301      	orrs	r1, r0
 80024e4:	b2c9      	uxtb	r1, r1
 80024e6:	203b      	movs	r0, #59	; 0x3b
 80024e8:	f7ff ff7b 	bl	80023e2 <SX1276Write>
    while( ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_RUNNING ) == RF_IMAGECAL_IMAGECAL_RUNNING )
 80024ec:	2620      	movs	r6, #32
 80024ee:	203b      	movs	r0, #59	; 0x3b
 80024f0:	f7ff ffca 	bl	8002488 <SX1276Read>
 80024f4:	4230      	tst	r0, r6
 80024f6:	d1fa      	bne.n	80024ee <RxChainCalibration+0x52>
    SX1276SetChannel( 868000000 );
 80024f8:	480d      	ldr	r0, [pc, #52]	; (8002530 <RxChainCalibration+0x94>)
 80024fa:	f7ff ff7b 	bl	80023f4 <SX1276SetChannel>
    SX1276Write( REG_IMAGECAL, ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_MASK ) | RF_IMAGECAL_IMAGECAL_START );
 80024fe:	203b      	movs	r0, #59	; 0x3b
 8002500:	f7ff ffc2 	bl	8002488 <SX1276Read>
 8002504:	2140      	movs	r1, #64	; 0x40
 8002506:	4301      	orrs	r1, r0
 8002508:	b2c9      	uxtb	r1, r1
 800250a:	203b      	movs	r0, #59	; 0x3b
 800250c:	f7ff ff69 	bl	80023e2 <SX1276Write>
    while( ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_RUNNING ) == RF_IMAGECAL_IMAGECAL_RUNNING )
 8002510:	2620      	movs	r6, #32
 8002512:	203b      	movs	r0, #59	; 0x3b
 8002514:	f7ff ffb8 	bl	8002488 <SX1276Read>
 8002518:	4230      	tst	r0, r6
 800251a:	d1fa      	bne.n	8002512 <RxChainCalibration+0x76>
    SX1276Write( REG_PACONFIG, regPaConfigInitVal );
 800251c:	0029      	movs	r1, r5
 800251e:	2009      	movs	r0, #9
 8002520:	f7ff ff5f 	bl	80023e2 <SX1276Write>
    SX1276SetChannel( initialFreq );
 8002524:	0020      	movs	r0, r4
 8002526:	f7ff ff65 	bl	80023f4 <SX1276SetChannel>
}
 800252a:	bd70      	pop	{r4, r5, r6, pc}
 800252c:	00003d09 	.word	0x00003d09
 8002530:	33bca100 	.word	0x33bca100

08002534 <SX1276GetTimeOnAir>:
{
 8002534:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002536:	000d      	movs	r5, r1
 8002538:	b085      	sub	sp, #20
    switch( modem )
 800253a:	2800      	cmp	r0, #0
 800253c:	d004      	beq.n	8002548 <SX1276GetTimeOnAir+0x14>
 800253e:	2801      	cmp	r0, #1
 8002540:	d05b      	beq.n	80025fa <SX1276GetTimeOnAir+0xc6>
    double airTime = 0;
 8002542:	2000      	movs	r0, #0
 8002544:	2100      	movs	r1, #0
 8002546:	e04c      	b.n	80025e2 <SX1276GetTimeOnAir+0xae>
            airTime = round( ( 8 * ( SX1276.Settings.Fsk.PreambleLen +
 8002548:	4c71      	ldr	r4, [pc, #452]	; (8002710 <SX1276GetTimeOnAir+0x1dc>)
                                     ( ( SX1276Read( REG_SYNCCONFIG ) & ~RF_SYNCCONFIG_SYNCSIZE_MASK ) + 1 ) +
 800254a:	2027      	movs	r0, #39	; 0x27
            airTime = round( ( 8 * ( SX1276.Settings.Fsk.PreambleLen +
 800254c:	8c26      	ldrh	r6, [r4, #32]
                                     ( ( SX1276Read( REG_SYNCCONFIG ) & ~RF_SYNCCONFIG_SYNCSIZE_MASK ) + 1 ) +
 800254e:	f7ff ff9b 	bl	8002488 <SX1276Read>
 8002552:	23f8      	movs	r3, #248	; 0xf8
 8002554:	4398      	bics	r0, r3
 8002556:	3001      	adds	r0, #1
            airTime = round( ( 8 * ( SX1276.Settings.Fsk.PreambleLen +
 8002558:	1980      	adds	r0, r0, r6
                                     ( ( SX1276Read( REG_SYNCCONFIG ) & ~RF_SYNCCONFIG_SYNCSIZE_MASK ) + 1 ) +
 800255a:	f7ff fdc9 	bl	80020f0 <__aeabi_i2d>
 800255e:	000b      	movs	r3, r1
                                     ( ( SX1276.Settings.Fsk.FixLen == 0x01 ) ? 0.0 : 1.0 ) +
 8002560:	1ce1      	adds	r1, r4, #3
 8002562:	7fc9      	ldrb	r1, [r1, #31]
                                     ( ( SX1276Read( REG_SYNCCONFIG ) & ~RF_SYNCCONFIG_SYNCSIZE_MASK ) + 1 ) +
 8002564:	0002      	movs	r2, r0
                                     ( ( SX1276.Settings.Fsk.FixLen == 0x01 ) ? 0.0 : 1.0 ) +
 8002566:	2000      	movs	r0, #0
 8002568:	2900      	cmp	r1, #0
 800256a:	d13e      	bne.n	80025ea <SX1276GetTimeOnAir+0xb6>
 800256c:	4969      	ldr	r1, [pc, #420]	; (8002714 <SX1276GetTimeOnAir+0x1e0>)
                                     ( ( SX1276Read( REG_SYNCCONFIG ) & ~RF_SYNCCONFIG_SYNCSIZE_MASK ) + 1 ) +
 800256e:	f7fe f8b1 	bl	80006d4 <__aeabi_dadd>
 8002572:	0006      	movs	r6, r0
                                     ( ( ( SX1276Read( REG_PACKETCONFIG1 ) & ~RF_PACKETCONFIG1_ADDRSFILTERING_MASK ) != 0x00 ) ? 1.0 : 0 ) +
 8002574:	2030      	movs	r0, #48	; 0x30
                                     ( ( SX1276Read( REG_SYNCCONFIG ) & ~RF_SYNCCONFIG_SYNCSIZE_MASK ) + 1 ) +
 8002576:	000f      	movs	r7, r1
                                     ( ( ( SX1276Read( REG_PACKETCONFIG1 ) & ~RF_PACKETCONFIG1_ADDRSFILTERING_MASK ) != 0x00 ) ? 1.0 : 0 ) +
 8002578:	f7ff ff86 	bl	8002488 <SX1276Read>
 800257c:	23f9      	movs	r3, #249	; 0xf9
 800257e:	4398      	bics	r0, r3
 8002580:	d135      	bne.n	80025ee <SX1276GetTimeOnAir+0xba>
 8002582:	2000      	movs	r0, #0
 8002584:	2100      	movs	r1, #0
                                     ( ( SX1276.Settings.Fsk.FixLen == 0x01 ) ? 0.0 : 1.0 ) +
 8002586:	0032      	movs	r2, r6
 8002588:	003b      	movs	r3, r7
 800258a:	f7fe f8a3 	bl	80006d4 <__aeabi_dadd>
 800258e:	0006      	movs	r6, r0
                                     ( ( ( SX1276Read( REG_PACKETCONFIG1 ) & ~RF_PACKETCONFIG1_ADDRSFILTERING_MASK ) != 0x00 ) ? 1.0 : 0 ) +
 8002590:	0028      	movs	r0, r5
                                     ( ( SX1276.Settings.Fsk.FixLen == 0x01 ) ? 0.0 : 1.0 ) +
 8002592:	000f      	movs	r7, r1
                                     ( ( ( SX1276Read( REG_PACKETCONFIG1 ) & ~RF_PACKETCONFIG1_ADDRSFILTERING_MASK ) != 0x00 ) ? 1.0 : 0 ) +
 8002594:	f7ff fdac 	bl	80020f0 <__aeabi_i2d>
 8002598:	0002      	movs	r2, r0
 800259a:	000b      	movs	r3, r1
 800259c:	0030      	movs	r0, r6
 800259e:	0039      	movs	r1, r7
 80025a0:	f7fe f898 	bl	80006d4 <__aeabi_dadd>
 80025a4:	000b      	movs	r3, r1
                                     ( ( SX1276.Settings.Fsk.CrcOn == 0x01 ) ? 2.0 : 0 ) ) /
 80025a6:	1d61      	adds	r1, r4, #5
 80025a8:	7fc9      	ldrb	r1, [r1, #31]
                                     ( ( ( SX1276Read( REG_PACKETCONFIG1 ) & ~RF_PACKETCONFIG1_ADDRSFILTERING_MASK ) != 0x00 ) ? 1.0 : 0 ) +
 80025aa:	0002      	movs	r2, r0
                                     ( ( SX1276.Settings.Fsk.CrcOn == 0x01 ) ? 2.0 : 0 ) ) /
 80025ac:	2000      	movs	r0, #0
 80025ae:	2900      	cmp	r1, #0
 80025b0:	d120      	bne.n	80025f4 <SX1276GetTimeOnAir+0xc0>
 80025b2:	2100      	movs	r1, #0
                                     pktLen +
 80025b4:	f7fe f88e 	bl	80006d4 <__aeabi_dadd>
            airTime = round( ( 8 * ( SX1276.Settings.Fsk.PreambleLen +
 80025b8:	2200      	movs	r2, #0
 80025ba:	4b57      	ldr	r3, [pc, #348]	; (8002718 <SX1276GetTimeOnAir+0x1e4>)
 80025bc:	f7fe ffce 	bl	800155c <__aeabi_dmul>
 80025c0:	0006      	movs	r6, r0
                                     ( ( SX1276.Settings.Fsk.CrcOn == 0x01 ) ? 2.0 : 0 ) ) /
 80025c2:	69e0      	ldr	r0, [r4, #28]
            airTime = round( ( 8 * ( SX1276.Settings.Fsk.PreambleLen +
 80025c4:	000f      	movs	r7, r1
                                     ( ( SX1276.Settings.Fsk.CrcOn == 0x01 ) ? 2.0 : 0 ) ) /
 80025c6:	f7ff fdd5 	bl	8002174 <__aeabi_ui2d>
 80025ca:	0002      	movs	r2, r0
 80025cc:	000b      	movs	r3, r1
 80025ce:	0030      	movs	r0, r6
 80025d0:	0039      	movs	r1, r7
 80025d2:	f7fe fb8f 	bl	8000cf4 <__aeabi_ddiv>
            airTime = round( ( 8 * ( SX1276.Settings.Fsk.PreambleLen +
 80025d6:	2200      	movs	r2, #0
 80025d8:	4b50      	ldr	r3, [pc, #320]	; (800271c <SX1276GetTimeOnAir+0x1e8>)
 80025da:	f7fe ffbf 	bl	800155c <__aeabi_dmul>
 80025de:	f005 fa8f 	bl	8007b00 <round>
    return (uint32_t) airTime;
 80025e2:	f7fd ff99 	bl	8000518 <__aeabi_d2uiz>
}
 80025e6:	b005      	add	sp, #20
 80025e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
                                     ( ( SX1276.Settings.Fsk.FixLen == 0x01 ) ? 0.0 : 1.0 ) +
 80025ea:	2100      	movs	r1, #0
 80025ec:	e7bf      	b.n	800256e <SX1276GetTimeOnAir+0x3a>
                                     ( ( ( SX1276Read( REG_PACKETCONFIG1 ) & ~RF_PACKETCONFIG1_ADDRSFILTERING_MASK ) != 0x00 ) ? 1.0 : 0 ) +
 80025ee:	2000      	movs	r0, #0
 80025f0:	4948      	ldr	r1, [pc, #288]	; (8002714 <SX1276GetTimeOnAir+0x1e0>)
 80025f2:	e7c8      	b.n	8002586 <SX1276GetTimeOnAir+0x52>
                                     ( ( SX1276.Settings.Fsk.CrcOn == 0x01 ) ? 2.0 : 0 ) ) /
 80025f4:	2180      	movs	r1, #128	; 0x80
 80025f6:	05c9      	lsls	r1, r1, #23
 80025f8:	e7dc      	b.n	80025b4 <SX1276GetTimeOnAir+0x80>
            switch( SX1276.Settings.LoRa.Bandwidth )
 80025fa:	4c45      	ldr	r4, [pc, #276]	; (8002710 <SX1276GetTimeOnAir+0x1dc>)
 80025fc:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80025fe:	3b07      	subs	r3, #7
 8002600:	2b02      	cmp	r3, #2
 8002602:	d900      	bls.n	8002606 <SX1276GetTimeOnAir+0xd2>
 8002604:	e07d      	b.n	8002702 <SX1276GetTimeOnAir+0x1ce>
 8002606:	4a46      	ldr	r2, [pc, #280]	; (8002720 <SX1276GetTimeOnAir+0x1ec>)
 8002608:	00db      	lsls	r3, r3, #3
 800260a:	18d3      	adds	r3, r2, r3
 800260c:	6b1e      	ldr	r6, [r3, #48]	; 0x30
 800260e:	6b5f      	ldr	r7, [r3, #52]	; 0x34
            double rs = bw / ( 1 << SX1276.Settings.LoRa.Datarate );
 8002610:	2001      	movs	r0, #1
 8002612:	6ca3      	ldr	r3, [r4, #72]	; 0x48
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
 8002614:	00ed      	lsls	r5, r5, #3
            double rs = bw / ( 1 << SX1276.Settings.LoRa.Datarate );
 8002616:	4098      	lsls	r0, r3
 8002618:	9301      	str	r3, [sp, #4]
 800261a:	f7ff fd69 	bl	80020f0 <__aeabi_i2d>
 800261e:	0002      	movs	r2, r0
 8002620:	000b      	movs	r3, r1
 8002622:	0030      	movs	r0, r6
 8002624:	0039      	movs	r1, r7
 8002626:	f7fe fb65 	bl	8000cf4 <__aeabi_ddiv>
 800262a:	0002      	movs	r2, r0
 800262c:	000b      	movs	r3, r1
            double ts = 1 / rs;
 800262e:	2000      	movs	r0, #0
 8002630:	4938      	ldr	r1, [pc, #224]	; (8002714 <SX1276GetTimeOnAir+0x1e0>)
 8002632:	f7fe fb5f 	bl	8000cf4 <__aeabi_ddiv>
            double tPreamble = ( SX1276.Settings.LoRa.PreambleLen + 4.25 ) * ts;
 8002636:	0023      	movs	r3, r4
            double ts = 1 / rs;
 8002638:	0006      	movs	r6, r0
 800263a:	000f      	movs	r7, r1
            double tPreamble = ( SX1276.Settings.LoRa.PreambleLen + 4.25 ) * ts;
 800263c:	334e      	adds	r3, #78	; 0x4e
 800263e:	8818      	ldrh	r0, [r3, #0]
 8002640:	f7ff fd56 	bl	80020f0 <__aeabi_i2d>
 8002644:	2200      	movs	r2, #0
 8002646:	4b37      	ldr	r3, [pc, #220]	; (8002724 <SX1276GetTimeOnAir+0x1f0>)
 8002648:	f7fe f844 	bl	80006d4 <__aeabi_dadd>
 800264c:	0032      	movs	r2, r6
 800264e:	003b      	movs	r3, r7
 8002650:	f7fe ff84 	bl	800155c <__aeabi_dmul>
                                 28 + 16 * SX1276.Settings.LoRa.CrcOn -
 8002654:	0023      	movs	r3, r4
            double tPreamble = ( SX1276.Settings.LoRa.PreambleLen + 4.25 ) * ts;
 8002656:	9002      	str	r0, [sp, #8]
 8002658:	9103      	str	r1, [sp, #12]
                                 28 + 16 * SX1276.Settings.LoRa.CrcOn -
 800265a:	3352      	adds	r3, #82	; 0x52
 800265c:	7818      	ldrb	r0, [r3, #0]
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
 800265e:	9b01      	ldr	r3, [sp, #4]
                                 ( SX1276.Settings.LoRa.FixLen ? 20 : 0 ) ) /
 8002660:	3450      	adds	r4, #80	; 0x50
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
 8002662:	009b      	lsls	r3, r3, #2
                                 28 + 16 * SX1276.Settings.LoRa.CrcOn -
 8002664:	0100      	lsls	r0, r0, #4
 8002666:	1ac0      	subs	r0, r0, r3
                                 ( SX1276.Settings.LoRa.FixLen ? 20 : 0 ) ) /
 8002668:	7823      	ldrb	r3, [r4, #0]
 800266a:	2214      	movs	r2, #20
 800266c:	1e59      	subs	r1, r3, #1
 800266e:	418b      	sbcs	r3, r1
 8002670:	301c      	adds	r0, #28
 8002672:	425b      	negs	r3, r3
 8002674:	401a      	ands	r2, r3
                                 28 + 16 * SX1276.Settings.LoRa.CrcOn -
 8002676:	1828      	adds	r0, r5, r0
 8002678:	1a80      	subs	r0, r0, r2
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
 800267a:	f7ff fd7b 	bl	8002174 <__aeabi_ui2d>
                                 ( ( SX1276.Settings.LoRa.LowDatarateOptimize > 0 ) ? 2 : 0 ) ) ) ) *
 800267e:	4b24      	ldr	r3, [pc, #144]	; (8002710 <SX1276GetTimeOnAir+0x1dc>)
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
 8002680:	0004      	movs	r4, r0
                                 ( ( SX1276.Settings.LoRa.LowDatarateOptimize > 0 ) ? 2 : 0 ) ) ) ) *
 8002682:	334c      	adds	r3, #76	; 0x4c
 8002684:	7818      	ldrb	r0, [r3, #0]
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
 8002686:	000d      	movs	r5, r1
                                 ( ( SX1276.Settings.LoRa.LowDatarateOptimize > 0 ) ? 2 : 0 ) ) ) ) *
 8002688:	1e43      	subs	r3, r0, #1
 800268a:	4198      	sbcs	r0, r3
                                 ( double )( 4 * ( SX1276.Settings.LoRa.Datarate -
 800268c:	9b01      	ldr	r3, [sp, #4]
                                 ( ( SX1276.Settings.LoRa.LowDatarateOptimize > 0 ) ? 2 : 0 ) ) ) ) *
 800268e:	0040      	lsls	r0, r0, #1
                                 ( double )( 4 * ( SX1276.Settings.LoRa.Datarate -
 8002690:	1a18      	subs	r0, r3, r0
 8002692:	0080      	lsls	r0, r0, #2
 8002694:	f7ff fd6e 	bl	8002174 <__aeabi_ui2d>
 8002698:	0002      	movs	r2, r0
 800269a:	000b      	movs	r3, r1
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
 800269c:	0020      	movs	r0, r4
 800269e:	0029      	movs	r1, r5
 80026a0:	f7fe fb28 	bl	8000cf4 <__aeabi_ddiv>
 80026a4:	f005 f928 	bl	80078f8 <ceil>
 80026a8:	0004      	movs	r4, r0
 80026aa:	000d      	movs	r5, r1
                                 ( SX1276.Settings.LoRa.Coderate + 4 );
 80026ac:	4b18      	ldr	r3, [pc, #96]	; (8002710 <SX1276GetTimeOnAir+0x1dc>)
 80026ae:	334d      	adds	r3, #77	; 0x4d
 80026b0:	7818      	ldrb	r0, [r3, #0]
 80026b2:	3004      	adds	r0, #4
                                 ( ( SX1276.Settings.LoRa.LowDatarateOptimize > 0 ) ? 2 : 0 ) ) ) ) *
 80026b4:	f7ff fd1c 	bl	80020f0 <__aeabi_i2d>
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
 80026b8:	0022      	movs	r2, r4
 80026ba:	002b      	movs	r3, r5
 80026bc:	f7fe ff4e 	bl	800155c <__aeabi_dmul>
            double nPayload = 8 + ( ( tmp > 0 ) ? tmp : 0 );
 80026c0:	2200      	movs	r2, #0
 80026c2:	2300      	movs	r3, #0
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
 80026c4:	0004      	movs	r4, r0
 80026c6:	000d      	movs	r5, r1
            double nPayload = 8 + ( ( tmp > 0 ) ? tmp : 0 );
 80026c8:	f7fd fec8 	bl	800045c <__aeabi_dcmpgt>
 80026cc:	2800      	cmp	r0, #0
 80026ce:	d01b      	beq.n	8002708 <SX1276GetTimeOnAir+0x1d4>
 80026d0:	2200      	movs	r2, #0
 80026d2:	4b11      	ldr	r3, [pc, #68]	; (8002718 <SX1276GetTimeOnAir+0x1e4>)
 80026d4:	0020      	movs	r0, r4
 80026d6:	0029      	movs	r1, r5
 80026d8:	f7fd fffc 	bl	80006d4 <__aeabi_dadd>
            double tPayload = nPayload * ts;
 80026dc:	0032      	movs	r2, r6
 80026de:	003b      	movs	r3, r7
 80026e0:	f7fe ff3c 	bl	800155c <__aeabi_dmul>
            double tOnAir = tPreamble + tPayload;
 80026e4:	9a02      	ldr	r2, [sp, #8]
 80026e6:	9b03      	ldr	r3, [sp, #12]
 80026e8:	f7fd fff4 	bl	80006d4 <__aeabi_dadd>
            airTime = floor( tOnAir * 1e3 + 0.999 );
 80026ec:	2200      	movs	r2, #0
 80026ee:	4b0b      	ldr	r3, [pc, #44]	; (800271c <SX1276GetTimeOnAir+0x1e8>)
 80026f0:	f7fe ff34 	bl	800155c <__aeabi_dmul>
 80026f4:	4a0c      	ldr	r2, [pc, #48]	; (8002728 <SX1276GetTimeOnAir+0x1f4>)
 80026f6:	4b0d      	ldr	r3, [pc, #52]	; (800272c <SX1276GetTimeOnAir+0x1f8>)
 80026f8:	f7fd ffec 	bl	80006d4 <__aeabi_dadd>
 80026fc:	f005 f97e 	bl	80079fc <floor>
        break;
 8002700:	e76f      	b.n	80025e2 <SX1276GetTimeOnAir+0xae>
            switch( SX1276.Settings.LoRa.Bandwidth )
 8002702:	2600      	movs	r6, #0
 8002704:	2700      	movs	r7, #0
 8002706:	e783      	b.n	8002610 <SX1276GetTimeOnAir+0xdc>
            double nPayload = 8 + ( ( tmp > 0 ) ? tmp : 0 );
 8002708:	2000      	movs	r0, #0
 800270a:	4903      	ldr	r1, [pc, #12]	; (8002718 <SX1276GetTimeOnAir+0x1e4>)
 800270c:	e7e6      	b.n	80026dc <SX1276GetTimeOnAir+0x1a8>
 800270e:	46c0      	nop			; (mov r8, r8)
 8002710:	20000594 	.word	0x20000594
 8002714:	3ff00000 	.word	0x3ff00000
 8002718:	40200000 	.word	0x40200000
 800271c:	408f4000 	.word	0x408f4000
 8002720:	08007c58 	.word	0x08007c58
 8002724:	40110000 	.word	0x40110000
 8002728:	d916872b 	.word	0xd916872b
 800272c:	3feff7ce 	.word	0x3feff7ce

08002730 <SX1276ReadRssi>:
{
 8002730:	b510      	push	{r4, lr}
    switch( modem )
 8002732:	2800      	cmp	r0, #0
 8002734:	d004      	beq.n	8002740 <SX1276ReadRssi+0x10>
 8002736:	2801      	cmp	r0, #1
 8002738:	d00a      	beq.n	8002750 <SX1276ReadRssi+0x20>
        rssi = -1;
 800273a:	2001      	movs	r0, #1
 800273c:	4240      	negs	r0, r0
 800273e:	e006      	b.n	800274e <SX1276ReadRssi+0x1e>
        rssi = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
 8002740:	2011      	movs	r0, #17
 8002742:	f7ff fea1 	bl	8002488 <SX1276Read>
 8002746:	0840      	lsrs	r0, r0, #1
 8002748:	b2c0      	uxtb	r0, r0
 800274a:	4240      	negs	r0, r0
            rssi = RSSI_OFFSET_LF + SX1276Read( REG_LR_RSSIVALUE );
 800274c:	b200      	sxth	r0, r0
}
 800274e:	bd10      	pop	{r4, pc}
        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 8002750:	4a06      	ldr	r2, [pc, #24]	; (800276c <SX1276ReadRssi+0x3c>)
 8002752:	4b07      	ldr	r3, [pc, #28]	; (8002770 <SX1276ReadRssi+0x40>)
 8002754:	6892      	ldr	r2, [r2, #8]
            rssi = RSSI_OFFSET_HF + SX1276Read( REG_LR_RSSIVALUE );
 8002756:	201b      	movs	r0, #27
        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 8002758:	429a      	cmp	r2, r3
 800275a:	d903      	bls.n	8002764 <SX1276ReadRssi+0x34>
            rssi = RSSI_OFFSET_HF + SX1276Read( REG_LR_RSSIVALUE );
 800275c:	f7ff fe94 	bl	8002488 <SX1276Read>
 8002760:	389d      	subs	r0, #157	; 0x9d
 8002762:	e7f3      	b.n	800274c <SX1276ReadRssi+0x1c>
            rssi = RSSI_OFFSET_LF + SX1276Read( REG_LR_RSSIVALUE );
 8002764:	f7ff fe90 	bl	8002488 <SX1276Read>
 8002768:	38a4      	subs	r0, #164	; 0xa4
 800276a:	e7ef      	b.n	800274c <SX1276ReadRssi+0x1c>
 800276c:	20000594 	.word	0x20000594
 8002770:	1f4add40 	.word	0x1f4add40

08002774 <SX1276SetOpMode.part.2>:
void SX1276SetOpMode( uint8_t opMode )
 8002774:	b510      	push	{r4, lr}
 8002776:	0004      	movs	r4, r0
      SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
 8002778:	2001      	movs	r0, #1
 800277a:	f7ff fe85 	bl	8002488 <SX1276Read>
 800277e:	2307      	movs	r3, #7
 8002780:	0001      	movs	r1, r0
 8002782:	4399      	bics	r1, r3
 8002784:	4321      	orrs	r1, r4
 8002786:	b2c9      	uxtb	r1, r1
 8002788:	2001      	movs	r0, #1
 800278a:	f7ff fe2a 	bl	80023e2 <SX1276Write>
      LoRaBoardCallbacks->SX1276BoardSetAntSwLowPower( true );
 800278e:	4c05      	ldr	r4, [pc, #20]	; (80027a4 <SX1276SetOpMode.part.2+0x30>)
 8002790:	2001      	movs	r0, #1
 8002792:	6823      	ldr	r3, [r4, #0]
 8002794:	691b      	ldr	r3, [r3, #16]
 8002796:	4798      	blx	r3
      LoRaBoardCallbacks->SX1276BoardSetXO( RESET ); 
 8002798:	6823      	ldr	r3, [r4, #0]
 800279a:	2000      	movs	r0, #0
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4798      	blx	r3
}
 80027a0:	bd10      	pop	{r4, pc}
 80027a2:	46c0      	nop			; (mov r8, r8)
 80027a4:	20000110 	.word	0x20000110

080027a8 <SX1276SetSleep>:
{
 80027a8:	b510      	push	{r4, lr}
    TimerStop( &RxTimeoutTimer );
 80027aa:	4806      	ldr	r0, [pc, #24]	; (80027c4 <SX1276SetSleep+0x1c>)
 80027ac:	f003 fb64 	bl	8005e78 <TimerStop>
    TimerStop( &TxTimeoutTimer );
 80027b0:	4805      	ldr	r0, [pc, #20]	; (80027c8 <SX1276SetSleep+0x20>)
 80027b2:	f003 fb61 	bl	8005e78 <TimerStop>
 80027b6:	2000      	movs	r0, #0
 80027b8:	f7ff ffdc 	bl	8002774 <SX1276SetOpMode.part.2>
    SX1276.Settings.State = RF_IDLE;
 80027bc:	2200      	movs	r2, #0
 80027be:	4b03      	ldr	r3, [pc, #12]	; (80027cc <SX1276SetSleep+0x24>)
 80027c0:	711a      	strb	r2, [r3, #4]
}
 80027c2:	bd10      	pop	{r4, pc}
 80027c4:	200005fc 	.word	0x200005fc
 80027c8:	2000056c 	.word	0x2000056c
 80027cc:	20000594 	.word	0x20000594

080027d0 <SX1276SetOpMode>:
{
 80027d0:	b570      	push	{r4, r5, r6, lr}
 80027d2:	1e04      	subs	r4, r0, #0
    if( opMode == RF_OPMODE_SLEEP )
 80027d4:	d102      	bne.n	80027dc <SX1276SetOpMode+0xc>
 80027d6:	f7ff ffcd 	bl	8002774 <SX1276SetOpMode.part.2>
}
 80027da:	bd70      	pop	{r4, r5, r6, pc}
      LoRaBoardCallbacks->SX1276BoardSetXO( SET ); 
 80027dc:	4d0c      	ldr	r5, [pc, #48]	; (8002810 <SX1276SetOpMode+0x40>)
 80027de:	2001      	movs	r0, #1
 80027e0:	682b      	ldr	r3, [r5, #0]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4798      	blx	r3
      LoRaBoardCallbacks->SX1276BoardSetAntSwLowPower( false );
 80027e6:	682b      	ldr	r3, [r5, #0]
 80027e8:	2000      	movs	r0, #0
 80027ea:	691b      	ldr	r3, [r3, #16]
 80027ec:	4798      	blx	r3
      LoRaBoardCallbacks->SX1276BoardSetAntSw( opMode );
 80027ee:	682b      	ldr	r3, [r5, #0]
 80027f0:	0020      	movs	r0, r4
 80027f2:	695b      	ldr	r3, [r3, #20]
 80027f4:	4798      	blx	r3
      SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
 80027f6:	2001      	movs	r0, #1
 80027f8:	f7ff fe46 	bl	8002488 <SX1276Read>
 80027fc:	2307      	movs	r3, #7
 80027fe:	0001      	movs	r1, r0
 8002800:	4399      	bics	r1, r3
 8002802:	4321      	orrs	r1, r4
 8002804:	b2c9      	uxtb	r1, r1
 8002806:	2001      	movs	r0, #1
 8002808:	f7ff fdeb 	bl	80023e2 <SX1276Write>
}
 800280c:	e7e5      	b.n	80027da <SX1276SetOpMode+0xa>
 800280e:	46c0      	nop			; (mov r8, r8)
 8002810:	20000110 	.word	0x20000110

08002814 <SX1276SetStby>:
{
 8002814:	b510      	push	{r4, lr}
    TimerStop( &RxTimeoutTimer );
 8002816:	4806      	ldr	r0, [pc, #24]	; (8002830 <SX1276SetStby+0x1c>)
 8002818:	f003 fb2e 	bl	8005e78 <TimerStop>
    TimerStop( &TxTimeoutTimer );
 800281c:	4805      	ldr	r0, [pc, #20]	; (8002834 <SX1276SetStby+0x20>)
 800281e:	f003 fb2b 	bl	8005e78 <TimerStop>
    SX1276SetOpMode( RF_OPMODE_STANDBY );
 8002822:	2001      	movs	r0, #1
 8002824:	f7ff ffd4 	bl	80027d0 <SX1276SetOpMode>
    SX1276.Settings.State = RF_IDLE;
 8002828:	2200      	movs	r2, #0
 800282a:	4b03      	ldr	r3, [pc, #12]	; (8002838 <SX1276SetStby+0x24>)
 800282c:	711a      	strb	r2, [r3, #4]
}
 800282e:	bd10      	pop	{r4, pc}
 8002830:	200005fc 	.word	0x200005fc
 8002834:	2000056c 	.word	0x2000056c
 8002838:	20000594 	.word	0x20000594

0800283c <SX1276SetRx>:
{
 800283c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    switch( SX1276.Settings.Modem )
 800283e:	4c7a      	ldr	r4, [pc, #488]	; (8002a28 <SX1276SetRx+0x1ec>)
{
 8002840:	0006      	movs	r6, r0
    switch( SX1276.Settings.Modem )
 8002842:	7965      	ldrb	r5, [r4, #5]
 8002844:	2d00      	cmp	r5, #0
 8002846:	d003      	beq.n	8002850 <SX1276SetRx+0x14>
 8002848:	2d01      	cmp	r5, #1
 800284a:	d050      	beq.n	80028ee <SX1276SetRx+0xb2>
    bool rxContinuous = false;
 800284c:	2700      	movs	r7, #0
 800284e:	e029      	b.n	80028a4 <SX1276SetRx+0x68>
            rxContinuous = SX1276.Settings.Fsk.RxContinuous;
 8002850:	1de3      	adds	r3, r4, #7
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 8002852:	2040      	movs	r0, #64	; 0x40
            rxContinuous = SX1276.Settings.Fsk.RxContinuous;
 8002854:	7fdf      	ldrb	r7, [r3, #31]
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 8002856:	f7ff fe17 	bl	8002488 <SX1276Read>
                                                                            RF_DIOMAPPING1_DIO0_00 |
 800285a:	2103      	movs	r1, #3
 800285c:	4008      	ands	r0, r1
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 800285e:	3109      	adds	r1, #9
 8002860:	4301      	orrs	r1, r0
 8002862:	2040      	movs	r0, #64	; 0x40
 8002864:	f7ff fdbd 	bl	80023e2 <SX1276Write>
            SX1276Write( REG_DIOMAPPING2, ( SX1276Read( REG_DIOMAPPING2 ) & RF_DIOMAPPING2_DIO4_MASK &
 8002868:	2041      	movs	r0, #65	; 0x41
 800286a:	f7ff fe0d 	bl	8002488 <SX1276Read>
 800286e:	213f      	movs	r1, #63	; 0x3f
 8002870:	4249      	negs	r1, r1
 8002872:	4301      	orrs	r1, r0
 8002874:	b2c9      	uxtb	r1, r1
 8002876:	2041      	movs	r0, #65	; 0x41
 8002878:	f7ff fdb3 	bl	80023e2 <SX1276Write>
            SX1276.Settings.FskPacketHandler.FifoThresh = SX1276Read( REG_FIFOTHRESH ) & 0x3F;
 800287c:	2035      	movs	r0, #53	; 0x35
 800287e:	f7ff fe03 	bl	8002488 <SX1276Read>
 8002882:	233f      	movs	r3, #63	; 0x3f
 8002884:	4018      	ands	r0, r3
 8002886:	0023      	movs	r3, r4
 8002888:	333e      	adds	r3, #62	; 0x3e
 800288a:	7018      	strb	r0, [r3, #0]
            SX1276Write( REG_RXCONFIG, RF_RXCONFIG_AFCAUTO_ON | RF_RXCONFIG_AGCAUTO_ON | RF_RXCONFIG_RXTRIGER_PREAMBLEDETECT );
 800288c:	211e      	movs	r1, #30
 800288e:	200d      	movs	r0, #13
 8002890:	f7ff fda7 	bl	80023e2 <SX1276Write>
            SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 8002894:	0023      	movs	r3, r4
 8002896:	3330      	adds	r3, #48	; 0x30
 8002898:	701d      	strb	r5, [r3, #0]
            SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 800289a:	0023      	movs	r3, r4
 800289c:	3331      	adds	r3, #49	; 0x31
 800289e:	701d      	strb	r5, [r3, #0]
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 80028a0:	87a5      	strh	r5, [r4, #60]	; 0x3c
            SX1276.Settings.FskPacketHandler.Size = 0;
 80028a2:	8765      	strh	r5, [r4, #58]	; 0x3a
    memset( RxTxBuffer, 0, ( size_t )RX_BUFFER_SIZE );
 80028a4:	2280      	movs	r2, #128	; 0x80
 80028a6:	4861      	ldr	r0, [pc, #388]	; (8002a2c <SX1276SetRx+0x1f0>)
 80028a8:	0052      	lsls	r2, r2, #1
 80028aa:	2100      	movs	r1, #0
 80028ac:	3004      	adds	r0, #4
 80028ae:	f004 fc00 	bl	80070b2 <memset>
    SX1276.Settings.State = RF_RX_RUNNING;
 80028b2:	2301      	movs	r3, #1
 80028b4:	7123      	strb	r3, [r4, #4]
    if( timeout != 0 )
 80028b6:	2e00      	cmp	r6, #0
 80028b8:	d007      	beq.n	80028ca <SX1276SetRx+0x8e>
        TimerSetValue( &RxTimeoutTimer, timeout );
 80028ba:	4d5d      	ldr	r5, [pc, #372]	; (8002a30 <SX1276SetRx+0x1f4>)
 80028bc:	0031      	movs	r1, r6
 80028be:	0028      	movs	r0, r5
 80028c0:	f003 fb06 	bl	8005ed0 <TimerSetValue>
        TimerStart( &RxTimeoutTimer );
 80028c4:	0028      	movs	r0, r5
 80028c6:	f003 fa65 	bl	8005d94 <TimerStart>
    if( SX1276.Settings.Modem == MODEM_FSK )
 80028ca:	7963      	ldrb	r3, [r4, #5]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d000      	beq.n	80028d2 <SX1276SetRx+0x96>
 80028d0:	e0a2      	b.n	8002a18 <SX1276SetRx+0x1dc>
        SX1276SetOpMode( RF_OPMODE_RECEIVER );
 80028d2:	2005      	movs	r0, #5
 80028d4:	f7ff ff7c 	bl	80027d0 <SX1276SetOpMode>
        if( rxContinuous == false )
 80028d8:	2f00      	cmp	r7, #0
 80028da:	d107      	bne.n	80028ec <SX1276SetRx+0xb0>
            TimerSetValue( &RxTimeoutSyncWord, SX1276.Settings.Fsk.RxSingleTimeout );
 80028dc:	4d55      	ldr	r5, [pc, #340]	; (8002a34 <SX1276SetRx+0x1f8>)
 80028de:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80028e0:	0028      	movs	r0, r5
 80028e2:	f003 faf5 	bl	8005ed0 <TimerSetValue>
            TimerStart( &RxTimeoutSyncWord );
 80028e6:	0028      	movs	r0, r5
 80028e8:	f003 fa54 	bl	8005d94 <TimerStart>
}
 80028ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            if( SX1276.Settings.LoRa.IqInverted == true )
 80028ee:	0023      	movs	r3, r4
 80028f0:	3355      	adds	r3, #85	; 0x55
 80028f2:	781b      	ldrb	r3, [r3, #0]
 80028f4:	2741      	movs	r7, #65	; 0x41
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_ON | RFLR_INVERTIQ_TX_OFF ) );
 80028f6:	2033      	movs	r0, #51	; 0x33
            if( SX1276.Settings.LoRa.IqInverted == true )
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d023      	beq.n	8002944 <SX1276SetRx+0x108>
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_ON | RFLR_INVERTIQ_TX_OFF ) );
 80028fc:	f7ff fdc4 	bl	8002488 <SX1276Read>
 8002900:	4338      	orrs	r0, r7
 8002902:	b2c1      	uxtb	r1, r0
 8002904:	2033      	movs	r0, #51	; 0x33
 8002906:	f7ff fd6c 	bl	80023e2 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_ON );
 800290a:	2119      	movs	r1, #25
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 800290c:	203b      	movs	r0, #59	; 0x3b
 800290e:	f7ff fd68 	bl	80023e2 <SX1276Write>
            if( SX1276.Settings.LoRa.Bandwidth < 9 )
 8002912:	6c63      	ldr	r3, [r4, #68]	; 0x44
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) & 0x7F );
 8002914:	2031      	movs	r0, #49	; 0x31
            if( SX1276.Settings.LoRa.Bandwidth < 9 )
 8002916:	2b08      	cmp	r3, #8
 8002918:	d86d      	bhi.n	80029f6 <SX1276SetRx+0x1ba>
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) & 0x7F );
 800291a:	f7ff fdb5 	bl	8002488 <SX1276Read>
 800291e:	217f      	movs	r1, #127	; 0x7f
 8002920:	4001      	ands	r1, r0
 8002922:	2031      	movs	r0, #49	; 0x31
 8002924:	f7ff fd5d 	bl	80023e2 <SX1276Write>
                SX1276Write( REG_LR_TEST30, 0x00 );
 8002928:	2030      	movs	r0, #48	; 0x30
 800292a:	2100      	movs	r1, #0
 800292c:	f7ff fd59 	bl	80023e2 <SX1276Write>
                switch( SX1276.Settings.LoRa.Bandwidth )
 8002930:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8002932:	2808      	cmp	r0, #8
 8002934:	d81a      	bhi.n	800296c <SX1276SetRx+0x130>
 8002936:	f7fd fbe7 	bl	8000108 <__gnu_thumb1_case_uqi>
 800293a:	3610      	.short	0x3610
 800293c:	524b443d 	.word	0x524b443d
 8002940:	5959      	.short	0x5959
 8002942:	59          	.byte	0x59
 8002943:	00          	.byte	0x00
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_OFF ) );
 8002944:	f7ff fda0 	bl	8002488 <SX1276Read>
 8002948:	0001      	movs	r1, r0
 800294a:	43b9      	bics	r1, r7
 800294c:	4329      	orrs	r1, r5
 800294e:	b2c9      	uxtb	r1, r1
 8002950:	2033      	movs	r0, #51	; 0x33
 8002952:	f7ff fd46 	bl	80023e2 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 8002956:	211d      	movs	r1, #29
 8002958:	e7d8      	b.n	800290c <SX1276SetRx+0xd0>
                    SX1276Write( REG_LR_TEST2F, 0x48 );
 800295a:	2148      	movs	r1, #72	; 0x48
 800295c:	202f      	movs	r0, #47	; 0x2f
 800295e:	f7ff fd40 	bl	80023e2 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 7810 );
 8002962:	68a3      	ldr	r3, [r4, #8]
 8002964:	4a34      	ldr	r2, [pc, #208]	; (8002a38 <SX1276SetRx+0x1fc>)
                    SX1276SetChannel(SX1276.Settings.Channel + 41670 );
 8002966:	1898      	adds	r0, r3, r2
 8002968:	f7ff fd44 	bl	80023f4 <SX1276SetChannel>
            rxContinuous = SX1276.Settings.LoRa.RxContinuous;
 800296c:	0023      	movs	r3, r4
 800296e:	3356      	adds	r3, #86	; 0x56
 8002970:	781f      	ldrb	r7, [r3, #0]
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 8002972:	0023      	movs	r3, r4
 8002974:	3353      	adds	r3, #83	; 0x53
 8002976:	781b      	ldrb	r3, [r3, #0]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d044      	beq.n	8002a06 <SX1276SetRx+0x1ca>
                SX1276Write( REG_LR_IRQFLAGSMASK, //RFLR_IRQFLAGS_RXTIMEOUT |
 800297c:	211d      	movs	r1, #29
 800297e:	2011      	movs	r0, #17
 8002980:	f7ff fd2f 	bl	80023e2 <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK & RFLR_DIOMAPPING1_DIO2_MASK  ) | RFLR_DIOMAPPING1_DIO0_00 | RFLR_DIOMAPPING1_DIO2_00 );
 8002984:	2040      	movs	r0, #64	; 0x40
 8002986:	f7ff fd7f 	bl	8002488 <SX1276Read>
 800298a:	2133      	movs	r1, #51	; 0x33
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_00 );
 800298c:	4001      	ands	r1, r0
 800298e:	2040      	movs	r0, #64	; 0x40
 8002990:	f7ff fd27 	bl	80023e2 <SX1276Write>
            SX1276Write( REG_LR_FIFORXBASEADDR, 0 );
 8002994:	2100      	movs	r1, #0
 8002996:	200f      	movs	r0, #15
 8002998:	f7ff fd23 	bl	80023e2 <SX1276Write>
            SX1276Write( REG_LR_FIFOADDRPTR, 0 );
 800299c:	2100      	movs	r1, #0
 800299e:	200d      	movs	r0, #13
 80029a0:	f7ff fd1f 	bl	80023e2 <SX1276Write>
        break;
 80029a4:	e77e      	b.n	80028a4 <SX1276SetRx+0x68>
                    SX1276Write( REG_LR_TEST2F, 0x44 );
 80029a6:	2144      	movs	r1, #68	; 0x44
 80029a8:	202f      	movs	r0, #47	; 0x2f
 80029aa:	f7ff fd1a 	bl	80023e2 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 10420 );
 80029ae:	68a3      	ldr	r3, [r4, #8]
 80029b0:	4a22      	ldr	r2, [pc, #136]	; (8002a3c <SX1276SetRx+0x200>)
 80029b2:	e7d8      	b.n	8002966 <SX1276SetRx+0x12a>
                    SX1276Write( REG_LR_TEST2F, 0x44 );
 80029b4:	2144      	movs	r1, #68	; 0x44
 80029b6:	202f      	movs	r0, #47	; 0x2f
 80029b8:	f7ff fd13 	bl	80023e2 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 15620 );
 80029bc:	68a3      	ldr	r3, [r4, #8]
 80029be:	4a20      	ldr	r2, [pc, #128]	; (8002a40 <SX1276SetRx+0x204>)
 80029c0:	e7d1      	b.n	8002966 <SX1276SetRx+0x12a>
                    SX1276Write( REG_LR_TEST2F, 0x44 );
 80029c2:	2144      	movs	r1, #68	; 0x44
 80029c4:	202f      	movs	r0, #47	; 0x2f
 80029c6:	f7ff fd0c 	bl	80023e2 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 20830 );
 80029ca:	68a3      	ldr	r3, [r4, #8]
 80029cc:	4a1d      	ldr	r2, [pc, #116]	; (8002a44 <SX1276SetRx+0x208>)
 80029ce:	e7ca      	b.n	8002966 <SX1276SetRx+0x12a>
                    SX1276Write( REG_LR_TEST2F, 0x44 );
 80029d0:	2144      	movs	r1, #68	; 0x44
 80029d2:	202f      	movs	r0, #47	; 0x2f
 80029d4:	f7ff fd05 	bl	80023e2 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 31250 );
 80029d8:	68a3      	ldr	r3, [r4, #8]
 80029da:	4a1b      	ldr	r2, [pc, #108]	; (8002a48 <SX1276SetRx+0x20c>)
 80029dc:	e7c3      	b.n	8002966 <SX1276SetRx+0x12a>
                    SX1276Write( REG_LR_TEST2F, 0x44 );
 80029de:	2144      	movs	r1, #68	; 0x44
 80029e0:	202f      	movs	r0, #47	; 0x2f
 80029e2:	f7ff fcfe 	bl	80023e2 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 41670 );
 80029e6:	68a3      	ldr	r3, [r4, #8]
 80029e8:	4a18      	ldr	r2, [pc, #96]	; (8002a4c <SX1276SetRx+0x210>)
 80029ea:	e7bc      	b.n	8002966 <SX1276SetRx+0x12a>
                    SX1276Write( REG_LR_TEST2F, 0x40 );
 80029ec:	2140      	movs	r1, #64	; 0x40
 80029ee:	202f      	movs	r0, #47	; 0x2f
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) | 0x80 );
 80029f0:	f7ff fcf7 	bl	80023e2 <SX1276Write>
 80029f4:	e7ba      	b.n	800296c <SX1276SetRx+0x130>
 80029f6:	f7ff fd47 	bl	8002488 <SX1276Read>
 80029fa:	2180      	movs	r1, #128	; 0x80
 80029fc:	4249      	negs	r1, r1
 80029fe:	4301      	orrs	r1, r0
 8002a00:	b2c9      	uxtb	r1, r1
 8002a02:	2031      	movs	r0, #49	; 0x31
 8002a04:	e7f4      	b.n	80029f0 <SX1276SetRx+0x1b4>
                SX1276Write( REG_LR_IRQFLAGSMASK, //RFLR_IRQFLAGS_RXTIMEOUT |
 8002a06:	211f      	movs	r1, #31
 8002a08:	2011      	movs	r0, #17
 8002a0a:	f7ff fcea 	bl	80023e2 <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_00 );
 8002a0e:	2040      	movs	r0, #64	; 0x40
 8002a10:	f7ff fd3a 	bl	8002488 <SX1276Read>
 8002a14:	213f      	movs	r1, #63	; 0x3f
 8002a16:	e7b9      	b.n	800298c <SX1276SetRx+0x150>
            SX1276SetOpMode( RFLR_OPMODE_RECEIVER );
 8002a18:	2005      	movs	r0, #5
        if( rxContinuous == true )
 8002a1a:	2f00      	cmp	r7, #0
 8002a1c:	d100      	bne.n	8002a20 <SX1276SetRx+0x1e4>
            SX1276SetOpMode( RFLR_OPMODE_RECEIVER_SINGLE );
 8002a1e:	2006      	movs	r0, #6
 8002a20:	f7ff fed6 	bl	80027d0 <SX1276SetOpMode>
}
 8002a24:	e762      	b.n	80028ec <SX1276SetRx+0xb0>
 8002a26:	46c0      	nop			; (mov r8, r8)
 8002a28:	20000594 	.word	0x20000594
 8002a2c:	20000110 	.word	0x20000110
 8002a30:	200005fc 	.word	0x200005fc
 8002a34:	20000580 	.word	0x20000580
 8002a38:	00001e82 	.word	0x00001e82
 8002a3c:	000028b4 	.word	0x000028b4
 8002a40:	00003d04 	.word	0x00003d04
 8002a44:	0000515e 	.word	0x0000515e
 8002a48:	00007a12 	.word	0x00007a12
 8002a4c:	0000a2c6 	.word	0x0000a2c6

08002a50 <SX1276SetTx>:
{
 8002a50:	b570      	push	{r4, r5, r6, lr}
    TimerSetValue( &TxTimeoutTimer, timeout );
 8002a52:	4d25      	ldr	r5, [pc, #148]	; (8002ae8 <SX1276SetTx+0x98>)
{
 8002a54:	0001      	movs	r1, r0
    TimerSetValue( &TxTimeoutTimer, timeout );
 8002a56:	0028      	movs	r0, r5
 8002a58:	f003 fa3a 	bl	8005ed0 <TimerSetValue>
    switch( SX1276.Settings.Modem )
 8002a5c:	4c23      	ldr	r4, [pc, #140]	; (8002aec <SX1276SetTx+0x9c>)
 8002a5e:	7963      	ldrb	r3, [r4, #5]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d00a      	beq.n	8002a7a <SX1276SetTx+0x2a>
 8002a64:	2b01      	cmp	r3, #1
 8002a66:	d023      	beq.n	8002ab0 <SX1276SetTx+0x60>
    SX1276.Settings.State = RF_TX_RUNNING;
 8002a68:	2302      	movs	r3, #2
    TimerStart( &TxTimeoutTimer );
 8002a6a:	0028      	movs	r0, r5
    SX1276.Settings.State = RF_TX_RUNNING;
 8002a6c:	7123      	strb	r3, [r4, #4]
    TimerStart( &TxTimeoutTimer );
 8002a6e:	f003 f991 	bl	8005d94 <TimerStart>
    SX1276SetOpMode( RF_OPMODE_TRANSMITTER );
 8002a72:	2003      	movs	r0, #3
 8002a74:	f7ff feac 	bl	80027d0 <SX1276SetOpMode>
}
 8002a78:	bd70      	pop	{r4, r5, r6, pc}
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 8002a7a:	2040      	movs	r0, #64	; 0x40
 8002a7c:	f7ff fd04 	bl	8002488 <SX1276Read>
                                                                            RF_DIOMAPPING1_DIO1_MASK &
 8002a80:	2103      	movs	r1, #3
 8002a82:	4008      	ands	r0, r1
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 8002a84:	310d      	adds	r1, #13
 8002a86:	4301      	orrs	r1, r0
 8002a88:	2040      	movs	r0, #64	; 0x40
 8002a8a:	f7ff fcaa 	bl	80023e2 <SX1276Write>
            SX1276Write( REG_DIOMAPPING2, ( SX1276Read( REG_DIOMAPPING2 ) & RF_DIOMAPPING2_DIO4_MASK &
 8002a8e:	2041      	movs	r0, #65	; 0x41
 8002a90:	f7ff fcfa 	bl	8002488 <SX1276Read>
 8002a94:	213e      	movs	r1, #62	; 0x3e
 8002a96:	4001      	ands	r1, r0
 8002a98:	2041      	movs	r0, #65	; 0x41
 8002a9a:	f7ff fca2 	bl	80023e2 <SX1276Write>
            SX1276.Settings.FskPacketHandler.FifoThresh = SX1276Read( REG_FIFOTHRESH ) & 0x3F;
 8002a9e:	2035      	movs	r0, #53	; 0x35
 8002aa0:	f7ff fcf2 	bl	8002488 <SX1276Read>
 8002aa4:	233f      	movs	r3, #63	; 0x3f
 8002aa6:	4018      	ands	r0, r3
 8002aa8:	0023      	movs	r3, r4
 8002aaa:	333e      	adds	r3, #62	; 0x3e
 8002aac:	7018      	strb	r0, [r3, #0]
        break;
 8002aae:	e7db      	b.n	8002a68 <SX1276SetTx+0x18>
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 8002ab0:	0023      	movs	r3, r4
 8002ab2:	3353      	adds	r3, #83	; 0x53
 8002ab4:	781b      	ldrb	r3, [r3, #0]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d00d      	beq.n	8002ad6 <SX1276SetTx+0x86>
                SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 8002aba:	21f5      	movs	r1, #245	; 0xf5
 8002abc:	2011      	movs	r0, #17
 8002abe:	f7ff fc90 	bl	80023e2 <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK & RFLR_DIOMAPPING1_DIO2_MASK ) | RFLR_DIOMAPPING1_DIO0_01 | RFLR_DIOMAPPING1_DIO2_00 );
 8002ac2:	2040      	movs	r0, #64	; 0x40
 8002ac4:	f7ff fce0 	bl	8002488 <SX1276Read>
 8002ac8:	2133      	movs	r1, #51	; 0x33
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_01 );
 8002aca:	4001      	ands	r1, r0
 8002acc:	2040      	movs	r0, #64	; 0x40
 8002ace:	4301      	orrs	r1, r0
 8002ad0:	f7ff fc87 	bl	80023e2 <SX1276Write>
 8002ad4:	e7c8      	b.n	8002a68 <SX1276SetTx+0x18>
                SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 8002ad6:	21f7      	movs	r1, #247	; 0xf7
 8002ad8:	2011      	movs	r0, #17
 8002ada:	f7ff fc82 	bl	80023e2 <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_01 );
 8002ade:	2040      	movs	r0, #64	; 0x40
 8002ae0:	f7ff fcd2 	bl	8002488 <SX1276Read>
 8002ae4:	213f      	movs	r1, #63	; 0x3f
 8002ae6:	e7f0      	b.n	8002aca <SX1276SetTx+0x7a>
 8002ae8:	2000056c 	.word	0x2000056c
 8002aec:	20000594 	.word	0x20000594

08002af0 <SX1276StartCad>:
{
 8002af0:	b570      	push	{r4, r5, r6, lr}
    switch( SX1276.Settings.Modem )
 8002af2:	4c0b      	ldr	r4, [pc, #44]	; (8002b20 <SX1276StartCad+0x30>)
 8002af4:	7963      	ldrb	r3, [r4, #5]
 8002af6:	2b01      	cmp	r3, #1
 8002af8:	d110      	bne.n	8002b1c <SX1276StartCad+0x2c>
            SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 8002afa:	21fa      	movs	r1, #250	; 0xfa
 8002afc:	2011      	movs	r0, #17
 8002afe:	f7ff fc70 	bl	80023e2 <SX1276Write>
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO3_MASK ) | RFLR_DIOMAPPING1_DIO3_00 );
 8002b02:	2040      	movs	r0, #64	; 0x40
 8002b04:	f7ff fcc0 	bl	8002488 <SX1276Read>
 8002b08:	2503      	movs	r5, #3
 8002b0a:	43a8      	bics	r0, r5
 8002b0c:	b2c1      	uxtb	r1, r0
 8002b0e:	2040      	movs	r0, #64	; 0x40
 8002b10:	f7ff fc67 	bl	80023e2 <SX1276Write>
            SX1276SetOpMode( RFLR_OPMODE_CAD );
 8002b14:	2007      	movs	r0, #7
            SX1276.Settings.State = RF_CAD;
 8002b16:	7125      	strb	r5, [r4, #4]
            SX1276SetOpMode( RFLR_OPMODE_CAD );
 8002b18:	f7ff fe5a 	bl	80027d0 <SX1276SetOpMode>
}
 8002b1c:	bd70      	pop	{r4, r5, r6, pc}
 8002b1e:	46c0      	nop			; (mov r8, r8)
 8002b20:	20000594 	.word	0x20000594

08002b24 <SX1276SetModem>:
{
 8002b24:	b510      	push	{r4, lr}
    if( SX1276.Settings.Modem == modem )
 8002b26:	4b17      	ldr	r3, [pc, #92]	; (8002b84 <SX1276SetModem+0x60>)
{
 8002b28:	0004      	movs	r4, r0
    if( SX1276.Settings.Modem == modem )
 8002b2a:	795a      	ldrb	r2, [r3, #5]
 8002b2c:	4282      	cmp	r2, r0
 8002b2e:	d015      	beq.n	8002b5c <SX1276SetModem+0x38>
    SX1276.Settings.Modem = modem;
 8002b30:	7158      	strb	r0, [r3, #5]
 8002b32:	2000      	movs	r0, #0
    switch( SX1276.Settings.Modem )
 8002b34:	2c01      	cmp	r4, #1
 8002b36:	d012      	beq.n	8002b5e <SX1276SetModem+0x3a>
 8002b38:	f7ff fe1c 	bl	8002774 <SX1276SetOpMode.part.2>
        SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_MASK ) | RFLR_OPMODE_LONGRANGEMODE_OFF );
 8002b3c:	2001      	movs	r0, #1
 8002b3e:	f7ff fca3 	bl	8002488 <SX1276Read>
 8002b42:	217f      	movs	r1, #127	; 0x7f
 8002b44:	4001      	ands	r1, r0
 8002b46:	2001      	movs	r0, #1
 8002b48:	f7ff fc4b 	bl	80023e2 <SX1276Write>
        SX1276Write( REG_DIOMAPPING1, 0x00 );
 8002b4c:	2100      	movs	r1, #0
 8002b4e:	2040      	movs	r0, #64	; 0x40
 8002b50:	f7ff fc47 	bl	80023e2 <SX1276Write>
        SX1276Write( REG_DIOMAPPING2, 0x30 ); // DIO5=ModeReady
 8002b54:	2130      	movs	r1, #48	; 0x30
        SX1276Write( REG_DIOMAPPING2, 0x00 );
 8002b56:	2041      	movs	r0, #65	; 0x41
 8002b58:	f7ff fc43 	bl	80023e2 <SX1276Write>
}
 8002b5c:	bd10      	pop	{r4, pc}
 8002b5e:	f7ff fe09 	bl	8002774 <SX1276SetOpMode.part.2>
        SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_MASK ) | RFLR_OPMODE_LONGRANGEMODE_ON );
 8002b62:	0020      	movs	r0, r4
 8002b64:	f7ff fc90 	bl	8002488 <SX1276Read>
 8002b68:	2180      	movs	r1, #128	; 0x80
 8002b6a:	4249      	negs	r1, r1
 8002b6c:	4301      	orrs	r1, r0
 8002b6e:	b2c9      	uxtb	r1, r1
 8002b70:	0020      	movs	r0, r4
 8002b72:	f7ff fc36 	bl	80023e2 <SX1276Write>
        SX1276Write( REG_DIOMAPPING1, 0x00 );
 8002b76:	2100      	movs	r1, #0
 8002b78:	2040      	movs	r0, #64	; 0x40
 8002b7a:	f7ff fc32 	bl	80023e2 <SX1276Write>
        SX1276Write( REG_DIOMAPPING2, 0x00 );
 8002b7e:	2100      	movs	r1, #0
 8002b80:	e7e9      	b.n	8002b56 <SX1276SetModem+0x32>
 8002b82:	46c0      	nop			; (mov r8, r8)
 8002b84:	20000594 	.word	0x20000594

08002b88 <SX1276Init>:
{
 8002b88:	b570      	push	{r4, r5, r6, lr}
    RadioEvents = events;
 8002b8a:	4b1c      	ldr	r3, [pc, #112]	; (8002bfc <SX1276Init+0x74>)
    TimerInit( &TxTimeoutTimer, SX1276OnTimeoutIrq );
 8002b8c:	4c1c      	ldr	r4, [pc, #112]	; (8002c00 <SX1276Init+0x78>)
    RadioEvents = events;
 8002b8e:	6058      	str	r0, [r3, #4]
    TimerInit( &TxTimeoutTimer, SX1276OnTimeoutIrq );
 8002b90:	0021      	movs	r1, r4
 8002b92:	481c      	ldr	r0, [pc, #112]	; (8002c04 <SX1276Init+0x7c>)
 8002b94:	f003 f8f6 	bl	8005d84 <TimerInit>
    TimerInit( &RxTimeoutTimer, SX1276OnTimeoutIrq );
 8002b98:	0021      	movs	r1, r4
 8002b9a:	481b      	ldr	r0, [pc, #108]	; (8002c08 <SX1276Init+0x80>)
 8002b9c:	f003 f8f2 	bl	8005d84 <TimerInit>
    TimerInit( &RxTimeoutSyncWord, SX1276OnTimeoutIrq );
 8002ba0:	0021      	movs	r1, r4
    LoRaBoardCallbacks->SX1276BoardIoIrqInit( DioIrq );
 8002ba2:	2400      	movs	r4, #0
    TimerInit( &RxTimeoutSyncWord, SX1276OnTimeoutIrq );
 8002ba4:	4819      	ldr	r0, [pc, #100]	; (8002c0c <SX1276Init+0x84>)
 8002ba6:	f003 f8ed 	bl	8005d84 <TimerInit>
    LoRaBoardCallbacks->SX1276BoardSetXO( SET );
 8002baa:	4e19      	ldr	r6, [pc, #100]	; (8002c10 <SX1276Init+0x88>)
 8002bac:	2001      	movs	r0, #1
 8002bae:	6833      	ldr	r3, [r6, #0]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4798      	blx	r3
    SX1276Reset( );
 8002bb4:	f7ff fbce 	bl	8002354 <SX1276Reset>
    RxChainCalibration( );
 8002bb8:	f7ff fc70 	bl	800249c <RxChainCalibration>
 8002bbc:	2000      	movs	r0, #0
 8002bbe:	f7ff fdd9 	bl	8002774 <SX1276SetOpMode.part.2>
    LoRaBoardCallbacks->SX1276BoardIoIrqInit( DioIrq );
 8002bc2:	6833      	ldr	r3, [r6, #0]
 8002bc4:	4813      	ldr	r0, [pc, #76]	; (8002c14 <SX1276Init+0x8c>)
 8002bc6:	689b      	ldr	r3, [r3, #8]
 8002bc8:	4798      	blx	r3
        SX1276SetModem( RadioRegsInit[i].Modem );
 8002bca:	4d13      	ldr	r5, [pc, #76]	; (8002c18 <SX1276Init+0x90>)
 8002bcc:	3548      	adds	r5, #72	; 0x48
 8002bce:	5d60      	ldrb	r0, [r4, r5]
 8002bd0:	f7ff ffa8 	bl	8002b24 <SX1276SetModem>
 8002bd4:	192b      	adds	r3, r5, r4
        SX1276Write( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
 8002bd6:	7899      	ldrb	r1, [r3, #2]
 8002bd8:	7858      	ldrb	r0, [r3, #1]
 8002bda:	3403      	adds	r4, #3
 8002bdc:	f7ff fc01 	bl	80023e2 <SX1276Write>
    for( i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 8002be0:	2c30      	cmp	r4, #48	; 0x30
 8002be2:	d1f4      	bne.n	8002bce <SX1276Init+0x46>
    SX1276SetModem( MODEM_FSK );
 8002be4:	2000      	movs	r0, #0
 8002be6:	f7ff ff9d 	bl	8002b24 <SX1276SetModem>
    SX1276.Settings.State = RF_IDLE;
 8002bea:	2200      	movs	r2, #0
 8002bec:	4b0b      	ldr	r3, [pc, #44]	; (8002c1c <SX1276Init+0x94>)
 8002bee:	711a      	strb	r2, [r3, #4]
    return (uint32_t) LoRaBoardCallbacks->SX1276BoardGetWakeTime( ) + RADIO_WAKEUP_TIME;// BOARD_WAKEUP_TIME;
 8002bf0:	6833      	ldr	r3, [r6, #0]
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	4798      	blx	r3
 8002bf6:	3002      	adds	r0, #2
}
 8002bf8:	bd70      	pop	{r4, r5, r6, pc}
 8002bfa:	46c0      	nop			; (mov r8, r8)
 8002bfc:	20000210 	.word	0x20000210
 8002c00:	080032f9 	.word	0x080032f9
 8002c04:	2000056c 	.word	0x2000056c
 8002c08:	200005fc 	.word	0x200005fc
 8002c0c:	20000580 	.word	0x20000580
 8002c10:	20000110 	.word	0x20000110
 8002c14:	20000014 	.word	0x20000014
 8002c18:	08007c58 	.word	0x08007c58
 8002c1c:	20000594 	.word	0x20000594

08002c20 <SX1276IsChannelFree>:
{
 8002c20:	b570      	push	{r4, r5, r6, lr}
 8002c22:	000e      	movs	r6, r1
 8002c24:	0004      	movs	r4, r0
 8002c26:	0015      	movs	r5, r2
    SX1276SetModem( modem );
 8002c28:	f7ff ff7c 	bl	8002b24 <SX1276SetModem>
    SX1276SetChannel( freq );
 8002c2c:	0030      	movs	r0, r6
 8002c2e:	f7ff fbe1 	bl	80023f4 <SX1276SetChannel>
    SX1276SetOpMode( RF_OPMODE_RECEIVER );
 8002c32:	2005      	movs	r0, #5
 8002c34:	f7ff fdcc 	bl	80027d0 <SX1276SetOpMode>
    DelayMs( 1 );
 8002c38:	2001      	movs	r0, #1
 8002c3a:	f003 f84b 	bl	8005cd4 <DelayMs>
    rssi = SX1276ReadRssi( modem );
 8002c3e:	0020      	movs	r0, r4
 8002c40:	f7ff fd76 	bl	8002730 <SX1276ReadRssi>
 8002c44:	0004      	movs	r4, r0
    SX1276SetSleep( );
 8002c46:	f7ff fdaf 	bl	80027a8 <SX1276SetSleep>
    if( rssi > rssiThresh )
 8002c4a:	17eb      	asrs	r3, r5, #31
 8002c4c:	0fe0      	lsrs	r0, r4, #31
 8002c4e:	42a5      	cmp	r5, r4
 8002c50:	4158      	adcs	r0, r3
}
 8002c52:	b2c0      	uxtb	r0, r0
 8002c54:	bd70      	pop	{r4, r5, r6, pc}
	...

08002c58 <SX1276SetSyncWord>:
{
 8002c58:	b510      	push	{r4, lr}
 8002c5a:	0004      	movs	r4, r0
  LastSyncWord = data;
 8002c5c:	4b04      	ldr	r3, [pc, #16]	; (8002c70 <SX1276SetSyncWord+0x18>)
 8002c5e:	7218      	strb	r0, [r3, #8]
  SX1276SetModem( MODEM_LORA );
 8002c60:	2001      	movs	r0, #1
 8002c62:	f7ff ff5f 	bl	8002b24 <SX1276SetModem>
  SX1276Write( REG_LR_SYNCWORD, data);
 8002c66:	0021      	movs	r1, r4
 8002c68:	2039      	movs	r0, #57	; 0x39
 8002c6a:	f7ff fbba 	bl	80023e2 <SX1276Write>
}
 8002c6e:	bd10      	pop	{r4, pc}
 8002c70:	20000210 	.word	0x20000210

08002c74 <SX1276Random>:
{
 8002c74:	b570      	push	{r4, r5, r6, lr}
    SX1276SetOpMode( RF_OPMODE_RECEIVER );
 8002c76:	2400      	movs	r4, #0
    SX1276SetModem( MODEM_LORA );
 8002c78:	2001      	movs	r0, #1
 8002c7a:	f7ff ff53 	bl	8002b24 <SX1276SetModem>
    SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 8002c7e:	21ff      	movs	r1, #255	; 0xff
 8002c80:	2011      	movs	r0, #17
 8002c82:	f7ff fbae 	bl	80023e2 <SX1276Write>
    SX1276SetOpMode( RF_OPMODE_RECEIVER );
 8002c86:	2005      	movs	r0, #5
 8002c88:	f7ff fda2 	bl	80027d0 <SX1276SetOpMode>
    uint32_t rnd = 0;
 8002c8c:	0025      	movs	r5, r4
        DelayMs( 1 );
 8002c8e:	2601      	movs	r6, #1
 8002c90:	0030      	movs	r0, r6
 8002c92:	f003 f81f 	bl	8005cd4 <DelayMs>
        rnd |= ( ( uint32_t )SX1276Read( REG_LR_RSSIWIDEBAND ) & 0x01 ) << i;
 8002c96:	202c      	movs	r0, #44	; 0x2c
 8002c98:	f7ff fbf6 	bl	8002488 <SX1276Read>
 8002c9c:	4030      	ands	r0, r6
 8002c9e:	40a0      	lsls	r0, r4
 8002ca0:	3401      	adds	r4, #1
 8002ca2:	4305      	orrs	r5, r0
    for( i = 0; i < 32; i++ )
 8002ca4:	2c20      	cmp	r4, #32
 8002ca6:	d1f3      	bne.n	8002c90 <SX1276Random+0x1c>
    SX1276SetSleep( );
 8002ca8:	f7ff fd7e 	bl	80027a8 <SX1276SetSleep>
}
 8002cac:	0028      	movs	r0, r5
 8002cae:	bd70      	pop	{r4, r5, r6, pc}

08002cb0 <SX1276SetRxConfig>:
{
 8002cb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002cb2:	b08d      	sub	sp, #52	; 0x34
 8002cb4:	9306      	str	r3, [sp, #24]
 8002cb6:	ab12      	add	r3, sp, #72	; 0x48
 8002cb8:	0016      	movs	r6, r2
 8002cba:	cb04      	ldmia	r3!, {r2}
 8002cbc:	0004      	movs	r4, r0
 8002cbe:	881b      	ldrh	r3, [r3, #0]
 8002cc0:	9208      	str	r2, [sp, #32]
 8002cc2:	9301      	str	r3, [sp, #4]
 8002cc4:	ab14      	add	r3, sp, #80	; 0x50
 8002cc6:	881b      	ldrh	r3, [r3, #0]
 8002cc8:	aa0c      	add	r2, sp, #48	; 0x30
 8002cca:	9305      	str	r3, [sp, #20]
 8002ccc:	ab15      	add	r3, sp, #84	; 0x54
 8002cce:	781b      	ldrb	r3, [r3, #0]
 8002cd0:	000d      	movs	r5, r1
 8002cd2:	9302      	str	r3, [sp, #8]
 8002cd4:	ab16      	add	r3, sp, #88	; 0x58
 8002cd6:	781b      	ldrb	r3, [r3, #0]
 8002cd8:	9303      	str	r3, [sp, #12]
 8002cda:	ab17      	add	r3, sp, #92	; 0x5c
 8002cdc:	781b      	ldrb	r3, [r3, #0]
 8002cde:	9304      	str	r3, [sp, #16]
 8002ce0:	ab18      	add	r3, sp, #96	; 0x60
 8002ce2:	781b      	ldrb	r3, [r3, #0]
 8002ce4:	930a      	str	r3, [sp, #40]	; 0x28
 8002ce6:	ab19      	add	r3, sp, #100	; 0x64
 8002ce8:	781b      	ldrb	r3, [r3, #0]
 8002cea:	930b      	str	r3, [sp, #44]	; 0x2c
 8002cec:	2319      	movs	r3, #25
 8002cee:	189b      	adds	r3, r3, r2
 8002cf0:	7fdf      	ldrb	r7, [r3, #31]
 8002cf2:	231d      	movs	r3, #29
 8002cf4:	189b      	adds	r3, r3, r2
 8002cf6:	7fdb      	ldrb	r3, [r3, #31]
 8002cf8:	9309      	str	r3, [sp, #36]	; 0x24
    SX1276SetModem( modem );
 8002cfa:	f7ff ff13 	bl	8002b24 <SX1276SetModem>
    switch( modem )
 8002cfe:	2c00      	cmp	r4, #0
 8002d00:	d004      	beq.n	8002d0c <SX1276SetRxConfig+0x5c>
 8002d02:	2c01      	cmp	r4, #1
 8002d04:	d100      	bne.n	8002d08 <SX1276SetRxConfig+0x58>
 8002d06:	e08b      	b.n	8002e20 <SX1276SetRxConfig+0x170>
}
 8002d08:	b00d      	add	sp, #52	; 0x34
 8002d0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
            SX1276.Settings.Fsk.FixLen = fixLen;
 8002d0c:	466a      	mov	r2, sp
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
 8002d0e:	4cb2      	ldr	r4, [pc, #712]	; (8002fd8 <SX1276SetRxConfig+0x328>)
            SX1276.Settings.Fsk.BandwidthAfc = bandwidthAfc;
 8002d10:	9b08      	ldr	r3, [sp, #32]
            SX1276.Settings.Fsk.FixLen = fixLen;
 8002d12:	7a12      	ldrb	r2, [r2, #8]
            SX1276.Settings.Fsk.BandwidthAfc = bandwidthAfc;
 8002d14:	61a3      	str	r3, [r4, #24]
            SX1276.Settings.Fsk.FixLen = fixLen;
 8002d16:	1ce3      	adds	r3, r4, #3
 8002d18:	77da      	strb	r2, [r3, #31]
            SX1276.Settings.Fsk.PayloadLen = payloadLen;
 8002d1a:	466a      	mov	r2, sp
 8002d1c:	7b12      	ldrb	r2, [r2, #12]
 8002d1e:	1d23      	adds	r3, r4, #4
 8002d20:	77da      	strb	r2, [r3, #31]
            SX1276.Settings.Fsk.CrcOn = crcOn;
 8002d22:	466a      	mov	r2, sp
 8002d24:	7c12      	ldrb	r2, [r2, #16]
 8002d26:	1d63      	adds	r3, r4, #5
 8002d28:	77da      	strb	r2, [r3, #31]
            SX1276.Settings.Fsk.RxContinuous = rxContinuous;
 8002d2a:	2124      	movs	r1, #36	; 0x24
 8002d2c:	466a      	mov	r2, sp
 8002d2e:	1852      	adds	r2, r2, r1
 8002d30:	7812      	ldrb	r2, [r2, #0]
            SX1276.Settings.Fsk.IqInverted = iqInverted;
 8002d32:	1da3      	adds	r3, r4, #6
 8002d34:	77df      	strb	r7, [r3, #31]
            SX1276.Settings.Fsk.RxContinuous = rxContinuous;
 8002d36:	1de3      	adds	r3, r4, #7
 8002d38:	77da      	strb	r2, [r3, #31]
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
 8002d3a:	466b      	mov	r3, sp
 8002d3c:	889b      	ldrh	r3, [r3, #4]
            SX1276.Settings.Fsk.Datarate = datarate;
 8002d3e:	61e6      	str	r6, [r4, #28]
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
 8002d40:	8423      	strh	r3, [r4, #32]
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
 8002d42:	6165      	str	r5, [r4, #20]
            SX1276.Settings.Fsk.RxSingleTimeout = (uint32_t) (symbTimeout * ( ( 1.0 / ( double )datarate ) * 8.0 ) * 1e3);
 8002d44:	0030      	movs	r0, r6
 8002d46:	f7ff fa15 	bl	8002174 <__aeabi_ui2d>
 8002d4a:	0002      	movs	r2, r0
 8002d4c:	000b      	movs	r3, r1
 8002d4e:	0006      	movs	r6, r0
 8002d50:	000f      	movs	r7, r1
 8002d52:	2000      	movs	r0, #0
 8002d54:	49a1      	ldr	r1, [pc, #644]	; (8002fdc <SX1276SetRxConfig+0x32c>)
 8002d56:	f7fd ffcd 	bl	8000cf4 <__aeabi_ddiv>
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	4ba0      	ldr	r3, [pc, #640]	; (8002fe0 <SX1276SetRxConfig+0x330>)
 8002d5e:	f7fe fbfd 	bl	800155c <__aeabi_dmul>
 8002d62:	9006      	str	r0, [sp, #24]
 8002d64:	9107      	str	r1, [sp, #28]
 8002d66:	9805      	ldr	r0, [sp, #20]
 8002d68:	f7ff f9c2 	bl	80020f0 <__aeabi_i2d>
 8002d6c:	0002      	movs	r2, r0
 8002d6e:	000b      	movs	r3, r1
 8002d70:	9806      	ldr	r0, [sp, #24]
 8002d72:	9907      	ldr	r1, [sp, #28]
 8002d74:	f7fe fbf2 	bl	800155c <__aeabi_dmul>
 8002d78:	2200      	movs	r2, #0
 8002d7a:	4b9a      	ldr	r3, [pc, #616]	; (8002fe4 <SX1276SetRxConfig+0x334>)
 8002d7c:	f7fe fbee 	bl	800155c <__aeabi_dmul>
 8002d80:	f7fd fbca 	bl	8000518 <__aeabi_d2uiz>
            datarate = ( uint16_t )( ( double )XTAL_FREQ / ( double )datarate );
 8002d84:	0032      	movs	r2, r6
 8002d86:	003b      	movs	r3, r7
            SX1276.Settings.Fsk.RxSingleTimeout = (uint32_t) (symbTimeout * ( ( 1.0 / ( double )datarate ) * 8.0 ) * 1e3);
 8002d88:	62e0      	str	r0, [r4, #44]	; 0x2c
            datarate = ( uint16_t )( ( double )XTAL_FREQ / ( double )datarate );
 8002d8a:	4997      	ldr	r1, [pc, #604]	; (8002fe8 <SX1276SetRxConfig+0x338>)
 8002d8c:	2000      	movs	r0, #0
 8002d8e:	f7fd ffb1 	bl	8000cf4 <__aeabi_ddiv>
 8002d92:	f7fd fbc1 	bl	8000518 <__aeabi_d2uiz>
 8002d96:	b284      	uxth	r4, r0
            SX1276Write( REG_BITRATEMSB, ( uint8_t )( datarate >> 8 ) );
 8002d98:	0a21      	lsrs	r1, r4, #8
 8002d9a:	2002      	movs	r0, #2
 8002d9c:	f7ff fb21 	bl	80023e2 <SX1276Write>
            SX1276Write( REG_BITRATELSB, ( uint8_t )( datarate & 0xFF ) );
 8002da0:	b2e1      	uxtb	r1, r4
 8002da2:	2003      	movs	r0, #3
 8002da4:	f7ff fb1d 	bl	80023e2 <SX1276Write>
            SX1276Write( REG_RXBW, GetFskBandwidthRegValue( bandwidth ) );
 8002da8:	0028      	movs	r0, r5
 8002daa:	f7ff faa5 	bl	80022f8 <GetFskBandwidthRegValue>
 8002dae:	0001      	movs	r1, r0
 8002db0:	2012      	movs	r0, #18
 8002db2:	f7ff fb16 	bl	80023e2 <SX1276Write>
            SX1276Write( REG_AFCBW, GetFskBandwidthRegValue( bandwidthAfc ) );
 8002db6:	9808      	ldr	r0, [sp, #32]
 8002db8:	f7ff fa9e 	bl	80022f8 <GetFskBandwidthRegValue>
 8002dbc:	0001      	movs	r1, r0
 8002dbe:	2013      	movs	r0, #19
 8002dc0:	f7ff fb0f 	bl	80023e2 <SX1276Write>
            SX1276Write( REG_PREAMBLEMSB, ( uint8_t )( ( preambleLen >> 8 ) & 0xFF ) );
 8002dc4:	9b01      	ldr	r3, [sp, #4]
 8002dc6:	2025      	movs	r0, #37	; 0x25
 8002dc8:	0a19      	lsrs	r1, r3, #8
 8002dca:	f7ff fb0a 	bl	80023e2 <SX1276Write>
            SX1276Write( REG_PREAMBLELSB, ( uint8_t )( preambleLen & 0xFF ) );
 8002dce:	466b      	mov	r3, sp
 8002dd0:	2026      	movs	r0, #38	; 0x26
 8002dd2:	7919      	ldrb	r1, [r3, #4]
 8002dd4:	f7ff fb05 	bl	80023e2 <SX1276Write>
            if( fixLen == 1 )
 8002dd8:	9b02      	ldr	r3, [sp, #8]
                SX1276Write( REG_PAYLOADLENGTH, payloadLen );
 8002dda:	9903      	ldr	r1, [sp, #12]
            if( fixLen == 1 )
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d100      	bne.n	8002de2 <SX1276SetRxConfig+0x132>
                SX1276Write( REG_PAYLOADLENGTH, 0xFF ); // Set payload length to the maximum
 8002de0:	21ff      	movs	r1, #255	; 0xff
 8002de2:	2032      	movs	r0, #50	; 0x32
 8002de4:	f7ff fafd 	bl	80023e2 <SX1276Write>
                         ( SX1276Read( REG_PACKETCONFIG1 ) &
 8002de8:	2030      	movs	r0, #48	; 0x30
 8002dea:	f7ff fb4d 	bl	8002488 <SX1276Read>
                           RF_PACKETCONFIG1_CRC_MASK &
 8002dee:	216f      	movs	r1, #111	; 0x6f
 8002df0:	4008      	ands	r0, r1
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 8002df2:	2100      	movs	r1, #0
 8002df4:	9b02      	ldr	r3, [sp, #8]
 8002df6:	428b      	cmp	r3, r1
 8002df8:	d100      	bne.n	8002dfc <SX1276SetRxConfig+0x14c>
 8002dfa:	3980      	subs	r1, #128	; 0x80
                           ( crcOn << 4 ) );
 8002dfc:	9b04      	ldr	r3, [sp, #16]
 8002dfe:	011b      	lsls	r3, r3, #4
                           ( ( fixLen == 1 ) ? RF_PACKETCONFIG1_PACKETFORMAT_FIXED : RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE ) |
 8002e00:	4318      	orrs	r0, r3
 8002e02:	4301      	orrs	r1, r0
            SX1276Write( REG_PACKETCONFIG1,
 8002e04:	b2c9      	uxtb	r1, r1
 8002e06:	2030      	movs	r0, #48	; 0x30
 8002e08:	f7ff faeb 	bl	80023e2 <SX1276Write>
            SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) | RF_PACKETCONFIG2_DATAMODE_PACKET ) );
 8002e0c:	2031      	movs	r0, #49	; 0x31
 8002e0e:	f7ff fb3b 	bl	8002488 <SX1276Read>
 8002e12:	2140      	movs	r1, #64	; 0x40
 8002e14:	4301      	orrs	r1, r0
 8002e16:	2031      	movs	r0, #49	; 0x31
 8002e18:	b2c9      	uxtb	r1, r1
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 8002e1a:	f7ff fae2 	bl	80023e2 <SX1276Write>
}
 8002e1e:	e773      	b.n	8002d08 <SX1276SetRxConfig+0x58>
            if( bandwidth > 2 )
 8002e20:	2d02      	cmp	r5, #2
 8002e22:	d900      	bls.n	8002e26 <SX1276SetRxConfig+0x176>
 8002e24:	e7fe      	b.n	8002e24 <SX1276SetRxConfig+0x174>
            SX1276.Settings.LoRa.Bandwidth = bandwidth;
 8002e26:	4b6c      	ldr	r3, [pc, #432]	; (8002fd8 <SX1276SetRxConfig+0x328>)
            SX1276.Settings.LoRa.Coderate = coderate;
 8002e28:	4669      	mov	r1, sp
 8002e2a:	001a      	movs	r2, r3
 8002e2c:	7e09      	ldrb	r1, [r1, #24]
 8002e2e:	324d      	adds	r2, #77	; 0x4d
 8002e30:	7011      	strb	r1, [r2, #0]
            SX1276.Settings.LoRa.PreambleLen = preambleLen;
 8002e32:	4669      	mov	r1, sp
 8002e34:	001a      	movs	r2, r3
 8002e36:	8889      	ldrh	r1, [r1, #4]
 8002e38:	324e      	adds	r2, #78	; 0x4e
 8002e3a:	8011      	strh	r1, [r2, #0]
            SX1276.Settings.LoRa.FixLen = fixLen;
 8002e3c:	4669      	mov	r1, sp
 8002e3e:	001a      	movs	r2, r3
 8002e40:	7a09      	ldrb	r1, [r1, #8]
 8002e42:	3250      	adds	r2, #80	; 0x50
 8002e44:	7011      	strb	r1, [r2, #0]
            SX1276.Settings.LoRa.PayloadLen = payloadLen;
 8002e46:	4669      	mov	r1, sp
 8002e48:	001a      	movs	r2, r3
 8002e4a:	7b09      	ldrb	r1, [r1, #12]
 8002e4c:	3251      	adds	r2, #81	; 0x51
 8002e4e:	7011      	strb	r1, [r2, #0]
            SX1276.Settings.LoRa.CrcOn = crcOn;
 8002e50:	4669      	mov	r1, sp
 8002e52:	001a      	movs	r2, r3
 8002e54:	7c09      	ldrb	r1, [r1, #16]
 8002e56:	3252      	adds	r2, #82	; 0x52
 8002e58:	7011      	strb	r1, [r2, #0]
            SX1276.Settings.LoRa.FreqHopOn = freqHopOn;
 8002e5a:	2028      	movs	r0, #40	; 0x28
 8002e5c:	4669      	mov	r1, sp
 8002e5e:	001a      	movs	r2, r3
 8002e60:	1809      	adds	r1, r1, r0
 8002e62:	7809      	ldrb	r1, [r1, #0]
 8002e64:	3253      	adds	r2, #83	; 0x53
 8002e66:	7011      	strb	r1, [r2, #0]
            SX1276.Settings.LoRa.HopPeriod = hopPeriod;
 8002e68:	4669      	mov	r1, sp
 8002e6a:	001a      	movs	r2, r3
 8002e6c:	3004      	adds	r0, #4
 8002e6e:	1809      	adds	r1, r1, r0
 8002e70:	7809      	ldrb	r1, [r1, #0]
 8002e72:	3254      	adds	r2, #84	; 0x54
 8002e74:	7011      	strb	r1, [r2, #0]
            SX1276.Settings.LoRa.IqInverted = iqInverted;
 8002e76:	001a      	movs	r2, r3
            SX1276.Settings.LoRa.RxContinuous = rxContinuous;
 8002e78:	4669      	mov	r1, sp
            SX1276.Settings.LoRa.IqInverted = iqInverted;
 8002e7a:	3255      	adds	r2, #85	; 0x55
 8002e7c:	7017      	strb	r7, [r2, #0]
            SX1276.Settings.LoRa.RxContinuous = rxContinuous;
 8002e7e:	001a      	movs	r2, r3
 8002e80:	3808      	subs	r0, #8
 8002e82:	1809      	adds	r1, r1, r0
 8002e84:	7809      	ldrb	r1, [r1, #0]
            bandwidth += 7;
 8002e86:	1dec      	adds	r4, r5, #7
            SX1276.Settings.LoRa.RxContinuous = rxContinuous;
 8002e88:	3256      	adds	r2, #86	; 0x56
            SX1276.Settings.LoRa.Bandwidth = bandwidth;
 8002e8a:	645c      	str	r4, [r3, #68]	; 0x44
            SX1276.Settings.LoRa.Datarate = datarate;
 8002e8c:	649e      	str	r6, [r3, #72]	; 0x48
            SX1276.Settings.LoRa.RxContinuous = rxContinuous;
 8002e8e:	7011      	strb	r1, [r2, #0]
            if( datarate > 12 )
 8002e90:	2e0c      	cmp	r6, #12
 8002e92:	d900      	bls.n	8002e96 <SX1276SetRxConfig+0x1e6>
 8002e94:	e09c      	b.n	8002fd0 <SX1276SetRxConfig+0x320>
            else if( datarate < 6 )
 8002e96:	2e05      	cmp	r6, #5
 8002e98:	d800      	bhi.n	8002e9c <SX1276SetRxConfig+0x1ec>
 8002e9a:	e085      	b.n	8002fa8 <SX1276SetRxConfig+0x2f8>
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8002e9c:	2c07      	cmp	r4, #7
 8002e9e:	d17c      	bne.n	8002f9a <SX1276SetRxConfig+0x2ea>
 8002ea0:	0032      	movs	r2, r6
 8002ea2:	3a0b      	subs	r2, #11
 8002ea4:	2a01      	cmp	r2, #1
 8002ea6:	d87c      	bhi.n	8002fa2 <SX1276SetRxConfig+0x2f2>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x01;
 8002ea8:	2201      	movs	r2, #1
 8002eaa:	334c      	adds	r3, #76	; 0x4c
                         ( SX1276Read( REG_LR_MODEMCONFIG1 ) &
 8002eac:	201d      	movs	r0, #29
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x00;
 8002eae:	701a      	strb	r2, [r3, #0]
                         ( SX1276Read( REG_LR_MODEMCONFIG1 ) &
 8002eb0:	f7ff faea 	bl	8002488 <SX1276Read>
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 8002eb4:	9b06      	ldr	r3, [sp, #24]
            SX1276Write( REG_LR_MODEMCONFIG1,
 8002eb6:	201d      	movs	r0, #29
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 8002eb8:	0059      	lsls	r1, r3, #1
 8002eba:	9b02      	ldr	r3, [sp, #8]
                           RFLR_MODEMCONFIG2_RXPAYLOADCRC_MASK &
 8002ebc:	2708      	movs	r7, #8
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 8002ebe:	4319      	orrs	r1, r3
 8002ec0:	0123      	lsls	r3, r4, #4
 8002ec2:	4319      	orrs	r1, r3
            SX1276Write( REG_LR_MODEMCONFIG1,
 8002ec4:	b2c9      	uxtb	r1, r1
 8002ec6:	f7ff fa8c 	bl	80023e2 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG2 ) &
 8002eca:	201e      	movs	r0, #30
 8002ecc:	f7ff fadc 	bl	8002488 <SX1276Read>
                           ( ( symbTimeout >> 8 ) & ~RFLR_MODEMCONFIG2_SYMBTIMEOUTMSB_MASK ) );
 8002ed0:	9b05      	ldr	r3, [sp, #20]
                           RFLR_MODEMCONFIG2_RXPAYLOADCRC_MASK &
 8002ed2:	4038      	ands	r0, r7
                           ( ( symbTimeout >> 8 ) & ~RFLR_MODEMCONFIG2_SYMBTIMEOUTMSB_MASK ) );
 8002ed4:	0599      	lsls	r1, r3, #22
                           ( datarate << 4 ) | ( crcOn << 2 ) |
 8002ed6:	9b04      	ldr	r3, [sp, #16]
                           ( ( symbTimeout >> 8 ) & ~RFLR_MODEMCONFIG2_SYMBTIMEOUTMSB_MASK ) );
 8002ed8:	0f89      	lsrs	r1, r1, #30
                           ( datarate << 4 ) | ( crcOn << 2 ) |
 8002eda:	009b      	lsls	r3, r3, #2
            SX1276Write( REG_LR_MODEMCONFIG2,
 8002edc:	4319      	orrs	r1, r3
 8002ede:	4301      	orrs	r1, r0
                           ( datarate << 4 ) | ( crcOn << 2 ) |
 8002ee0:	0130      	lsls	r0, r6, #4
            SX1276Write( REG_LR_MODEMCONFIG2,
 8002ee2:	4301      	orrs	r1, r0
 8002ee4:	b2c9      	uxtb	r1, r1
 8002ee6:	201e      	movs	r0, #30
 8002ee8:	f7ff fa7b 	bl	80023e2 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
 8002eec:	2026      	movs	r0, #38	; 0x26
 8002eee:	f7ff facb 	bl	8002488 <SX1276Read>
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
 8002ef2:	4d39      	ldr	r5, [pc, #228]	; (8002fd8 <SX1276SetRxConfig+0x328>)
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
 8002ef4:	43b8      	bics	r0, r7
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
 8002ef6:	002b      	movs	r3, r5
 8002ef8:	334c      	adds	r3, #76	; 0x4c
 8002efa:	7819      	ldrb	r1, [r3, #0]
 8002efc:	00c9      	lsls	r1, r1, #3
                           RFLR_MODEMCONFIG3_LOWDATARATEOPTIMIZE_MASK ) |
 8002efe:	4301      	orrs	r1, r0
            SX1276Write( REG_LR_MODEMCONFIG3,
 8002f00:	b2c9      	uxtb	r1, r1
 8002f02:	2026      	movs	r0, #38	; 0x26
 8002f04:	f7ff fa6d 	bl	80023e2 <SX1276Write>
            SX1276Write( REG_LR_SYMBTIMEOUTLSB, ( uint8_t )( symbTimeout & 0xFF ) );
 8002f08:	466b      	mov	r3, sp
 8002f0a:	201f      	movs	r0, #31
 8002f0c:	7d19      	ldrb	r1, [r3, #20]
 8002f0e:	f7ff fa68 	bl	80023e2 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLEMSB, ( uint8_t )( ( preambleLen >> 8 ) & 0xFF ) );
 8002f12:	9b01      	ldr	r3, [sp, #4]
 8002f14:	2020      	movs	r0, #32
 8002f16:	0a19      	lsrs	r1, r3, #8
 8002f18:	f7ff fa63 	bl	80023e2 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLELSB, ( uint8_t )( preambleLen & 0xFF ) );
 8002f1c:	466b      	mov	r3, sp
 8002f1e:	2021      	movs	r0, #33	; 0x21
 8002f20:	7919      	ldrb	r1, [r3, #4]
 8002f22:	f7ff fa5e 	bl	80023e2 <SX1276Write>
            if( fixLen == 1 )
 8002f26:	9b02      	ldr	r3, [sp, #8]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d003      	beq.n	8002f34 <SX1276SetRxConfig+0x284>
                SX1276Write( REG_LR_PAYLOADLENGTH, payloadLen );
 8002f2c:	9903      	ldr	r1, [sp, #12]
 8002f2e:	2022      	movs	r0, #34	; 0x22
 8002f30:	f7ff fa57 	bl	80023e2 <SX1276Write>
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 8002f34:	002b      	movs	r3, r5
 8002f36:	3353      	adds	r3, #83	; 0x53
 8002f38:	781b      	ldrb	r3, [r3, #0]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d00f      	beq.n	8002f5e <SX1276SetRxConfig+0x2ae>
                SX1276Write( REG_LR_PLLHOP, ( SX1276Read( REG_LR_PLLHOP ) & RFLR_PLLHOP_FASTHOP_MASK ) | RFLR_PLLHOP_FASTHOP_ON );
 8002f3e:	2044      	movs	r0, #68	; 0x44
 8002f40:	f7ff faa2 	bl	8002488 <SX1276Read>
 8002f44:	2180      	movs	r1, #128	; 0x80
 8002f46:	4249      	negs	r1, r1
 8002f48:	4301      	orrs	r1, r0
 8002f4a:	b2c9      	uxtb	r1, r1
 8002f4c:	2044      	movs	r0, #68	; 0x44
 8002f4e:	f7ff fa48 	bl	80023e2 <SX1276Write>
                SX1276Write( REG_LR_HOPPERIOD, SX1276.Settings.LoRa.HopPeriod );
 8002f52:	002b      	movs	r3, r5
 8002f54:	3354      	adds	r3, #84	; 0x54
 8002f56:	7819      	ldrb	r1, [r3, #0]
 8002f58:	2024      	movs	r0, #36	; 0x24
 8002f5a:	f7ff fa42 	bl	80023e2 <SX1276Write>
            if( ( bandwidth == 9 ) && ( SX1276.Settings.Channel > RF_MID_BAND_THRESH ) )
 8002f5e:	2c09      	cmp	r4, #9
 8002f60:	d128      	bne.n	8002fb4 <SX1276SetRxConfig+0x304>
 8002f62:	4b22      	ldr	r3, [pc, #136]	; (8002fec <SX1276SetRxConfig+0x33c>)
 8002f64:	68aa      	ldr	r2, [r5, #8]
                SX1276Write( REG_LR_TEST36, 0x02 );
 8002f66:	2102      	movs	r1, #2
 8002f68:	2036      	movs	r0, #54	; 0x36
            if( ( bandwidth == 9 ) && ( SX1276.Settings.Channel > RF_MID_BAND_THRESH ) )
 8002f6a:	429a      	cmp	r2, r3
 8002f6c:	d91e      	bls.n	8002fac <SX1276SetRxConfig+0x2fc>
                SX1276Write( REG_LR_TEST36, 0x02 );
 8002f6e:	f7ff fa38 	bl	80023e2 <SX1276Write>
                SX1276Write( REG_LR_TEST3A, 0x64 );
 8002f72:	2164      	movs	r1, #100	; 0x64
                SX1276Write( REG_LR_TEST3A, 0x7F );
 8002f74:	203a      	movs	r0, #58	; 0x3a
                SX1276Write( REG_LR_TEST36, 0x03 );
 8002f76:	f7ff fa34 	bl	80023e2 <SX1276Write>
 8002f7a:	2407      	movs	r4, #7
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 8002f7c:	2031      	movs	r0, #49	; 0x31
            if( datarate == 6 )
 8002f7e:	2e06      	cmp	r6, #6
 8002f80:	d11b      	bne.n	8002fba <SX1276SetRxConfig+0x30a>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 8002f82:	f7ff fa81 	bl	8002488 <SX1276Read>
                               RFLR_DETECTIONOPTIMIZE_MASK ) |
 8002f86:	2105      	movs	r1, #5
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 8002f88:	43a0      	bics	r0, r4
                               RFLR_DETECTIONOPTIMIZE_MASK ) |
 8002f8a:	4301      	orrs	r1, r0
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 8002f8c:	b2c9      	uxtb	r1, r1
 8002f8e:	2031      	movs	r0, #49	; 0x31
 8002f90:	f7ff fa27 	bl	80023e2 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 8002f94:	210c      	movs	r1, #12
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 8002f96:	2037      	movs	r0, #55	; 0x37
 8002f98:	e73f      	b.n	8002e1a <SX1276SetRxConfig+0x16a>
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8002f9a:	2c08      	cmp	r4, #8
 8002f9c:	d101      	bne.n	8002fa2 <SX1276SetRxConfig+0x2f2>
                ( ( bandwidth == 8 ) && ( datarate == 12 ) ) )
 8002f9e:	2e0c      	cmp	r6, #12
 8002fa0:	d082      	beq.n	8002ea8 <SX1276SetRxConfig+0x1f8>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x00;
 8002fa2:	334c      	adds	r3, #76	; 0x4c
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	e781      	b.n	8002eac <SX1276SetRxConfig+0x1fc>
                datarate = 6;
 8002fa8:	2606      	movs	r6, #6
 8002faa:	e7fa      	b.n	8002fa2 <SX1276SetRxConfig+0x2f2>
                SX1276Write( REG_LR_TEST36, 0x02 );
 8002fac:	f7ff fa19 	bl	80023e2 <SX1276Write>
                SX1276Write( REG_LR_TEST3A, 0x7F );
 8002fb0:	217f      	movs	r1, #127	; 0x7f
 8002fb2:	e7df      	b.n	8002f74 <SX1276SetRxConfig+0x2c4>
                SX1276Write( REG_LR_TEST36, 0x03 );
 8002fb4:	2103      	movs	r1, #3
 8002fb6:	2036      	movs	r0, #54	; 0x36
 8002fb8:	e7dd      	b.n	8002f76 <SX1276SetRxConfig+0x2c6>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 8002fba:	f7ff fa65 	bl	8002488 <SX1276Read>
                             RFLR_DETECTIONOPTIMIZE_MASK ) |
 8002fbe:	2103      	movs	r1, #3
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 8002fc0:	43a0      	bics	r0, r4
                             RFLR_DETECTIONOPTIMIZE_MASK ) |
 8002fc2:	4301      	orrs	r1, r0
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 8002fc4:	b2c9      	uxtb	r1, r1
 8002fc6:	2031      	movs	r0, #49	; 0x31
 8002fc8:	f7ff fa0b 	bl	80023e2 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 8002fcc:	210a      	movs	r1, #10
 8002fce:	e7e2      	b.n	8002f96 <SX1276SetRxConfig+0x2e6>
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8002fd0:	260c      	movs	r6, #12
 8002fd2:	2d02      	cmp	r5, #2
 8002fd4:	d0e5      	beq.n	8002fa2 <SX1276SetRxConfig+0x2f2>
 8002fd6:	e767      	b.n	8002ea8 <SX1276SetRxConfig+0x1f8>
 8002fd8:	20000594 	.word	0x20000594
 8002fdc:	3ff00000 	.word	0x3ff00000
 8002fe0:	40200000 	.word	0x40200000
 8002fe4:	408f4000 	.word	0x408f4000
 8002fe8:	417e8480 	.word	0x417e8480
 8002fec:	1f4add40 	.word	0x1f4add40

08002ff0 <SX1276SetTxConfig>:
{
 8002ff0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ff2:	000e      	movs	r6, r1
 8002ff4:	b089      	sub	sp, #36	; 0x24
 8002ff6:	9300      	str	r3, [sp, #0]
 8002ff8:	ab0e      	add	r3, sp, #56	; 0x38
 8002ffa:	cb10      	ldmia	r3!, {r4}
 8002ffc:	0005      	movs	r5, r0
 8002ffe:	781b      	ldrb	r3, [r3, #0]
 8003000:	9203      	str	r2, [sp, #12]
 8003002:	9304      	str	r3, [sp, #16]
 8003004:	ab10      	add	r3, sp, #64	; 0x40
 8003006:	881f      	ldrh	r7, [r3, #0]
 8003008:	ab11      	add	r3, sp, #68	; 0x44
 800300a:	781b      	ldrb	r3, [r3, #0]
 800300c:	9301      	str	r3, [sp, #4]
 800300e:	ab12      	add	r3, sp, #72	; 0x48
 8003010:	781b      	ldrb	r3, [r3, #0]
 8003012:	9302      	str	r3, [sp, #8]
 8003014:	ab13      	add	r3, sp, #76	; 0x4c
 8003016:	781b      	ldrb	r3, [r3, #0]
 8003018:	9305      	str	r3, [sp, #20]
 800301a:	ab14      	add	r3, sp, #80	; 0x50
 800301c:	781b      	ldrb	r3, [r3, #0]
 800301e:	9307      	str	r3, [sp, #28]
 8003020:	ab15      	add	r3, sp, #84	; 0x54
 8003022:	781b      	ldrb	r3, [r3, #0]
 8003024:	9306      	str	r3, [sp, #24]
    SX1276SetModem( modem );
 8003026:	f7ff fd7d 	bl	8002b24 <SX1276SetModem>
    LoRaBoardCallbacks->SX1276BoardSetRfTxPower( power );
 800302a:	4b8a      	ldr	r3, [pc, #552]	; (8003254 <SX1276SetTxConfig+0x264>)
 800302c:	0030      	movs	r0, r6
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	68db      	ldr	r3, [r3, #12]
 8003032:	4798      	blx	r3
    switch( modem )
 8003034:	2d00      	cmp	r5, #0
 8003036:	d003      	beq.n	8003040 <SX1276SetTxConfig+0x50>
 8003038:	2d01      	cmp	r5, #1
 800303a:	d061      	beq.n	8003100 <SX1276SetTxConfig+0x110>
}
 800303c:	b009      	add	sp, #36	; 0x24
 800303e:	bdf0      	pop	{r4, r5, r6, r7, pc}
            SX1276.Settings.Fsk.FixLen = fixLen;
 8003040:	4669      	mov	r1, sp
            SX1276.Settings.Fsk.Power = power;
 8003042:	4b85      	ldr	r3, [pc, #532]	; (8003258 <SX1276SetTxConfig+0x268>)
            SX1276.Settings.Fsk.Fdev = fdev;
 8003044:	9a03      	ldr	r2, [sp, #12]
            SX1276.Settings.Fsk.FixLen = fixLen;
 8003046:	7909      	ldrb	r1, [r1, #4]
            SX1276.Settings.Fsk.Fdev = fdev;
 8003048:	611a      	str	r2, [r3, #16]
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
 800304a:	9a00      	ldr	r2, [sp, #0]
            SX1276.Settings.Fsk.Power = power;
 800304c:	731e      	strb	r6, [r3, #12]
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
 800304e:	615a      	str	r2, [r3, #20]
            SX1276.Settings.Fsk.FixLen = fixLen;
 8003050:	1cda      	adds	r2, r3, #3
 8003052:	77d1      	strb	r1, [r2, #31]
            SX1276.Settings.Fsk.CrcOn = crcOn;
 8003054:	4669      	mov	r1, sp
 8003056:	7a09      	ldrb	r1, [r1, #8]
 8003058:	1d5a      	adds	r2, r3, #5
 800305a:	77d1      	strb	r1, [r2, #31]
            SX1276.Settings.Fsk.IqInverted = iqInverted;
 800305c:	4669      	mov	r1, sp
 800305e:	7e09      	ldrb	r1, [r1, #24]
 8003060:	1d9a      	adds	r2, r3, #6
 8003062:	77d1      	strb	r1, [r2, #31]
            SX1276.Settings.Fsk.TxTimeout = timeout;
 8003064:	9a16      	ldr	r2, [sp, #88]	; 0x58
            SX1276.Settings.Fsk.Datarate = datarate;
 8003066:	61dc      	str	r4, [r3, #28]
            SX1276.Settings.Fsk.TxTimeout = timeout;
 8003068:	629a      	str	r2, [r3, #40]	; 0x28
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
 800306a:	841f      	strh	r7, [r3, #32]
            fdev = ( uint16_t )( ( double )fdev / ( double )FREQ_STEP );
 800306c:	9803      	ldr	r0, [sp, #12]
 800306e:	f7ff f881 	bl	8002174 <__aeabi_ui2d>
 8003072:	2200      	movs	r2, #0
 8003074:	4b79      	ldr	r3, [pc, #484]	; (800325c <SX1276SetTxConfig+0x26c>)
 8003076:	f7fd fe3d 	bl	8000cf4 <__aeabi_ddiv>
 800307a:	f7fd fa4d 	bl	8000518 <__aeabi_d2uiz>
 800307e:	b286      	uxth	r6, r0
            SX1276Write( REG_FDEVMSB, ( uint8_t )( fdev >> 8 ) );
 8003080:	0a31      	lsrs	r1, r6, #8
 8003082:	2004      	movs	r0, #4
 8003084:	f7ff f9ad 	bl	80023e2 <SX1276Write>
            SX1276Write( REG_FDEVLSB, ( uint8_t )( fdev & 0xFF ) );
 8003088:	b2f1      	uxtb	r1, r6
 800308a:	2005      	movs	r0, #5
 800308c:	f7ff f9a9 	bl	80023e2 <SX1276Write>
            datarate = ( uint16_t )( ( double )XTAL_FREQ / ( double )datarate );
 8003090:	0020      	movs	r0, r4
 8003092:	f7ff f86f 	bl	8002174 <__aeabi_ui2d>
 8003096:	000b      	movs	r3, r1
 8003098:	0002      	movs	r2, r0
 800309a:	4971      	ldr	r1, [pc, #452]	; (8003260 <SX1276SetTxConfig+0x270>)
 800309c:	2000      	movs	r0, #0
 800309e:	f7fd fe29 	bl	8000cf4 <__aeabi_ddiv>
 80030a2:	f7fd fa39 	bl	8000518 <__aeabi_d2uiz>
 80030a6:	b284      	uxth	r4, r0
            SX1276Write( REG_BITRATEMSB, ( uint8_t )( datarate >> 8 ) );
 80030a8:	0a21      	lsrs	r1, r4, #8
 80030aa:	2002      	movs	r0, #2
 80030ac:	f7ff f999 	bl	80023e2 <SX1276Write>
            SX1276Write( REG_BITRATELSB, ( uint8_t )( datarate & 0xFF ) );
 80030b0:	b2e1      	uxtb	r1, r4
 80030b2:	2003      	movs	r0, #3
 80030b4:	f7ff f995 	bl	80023e2 <SX1276Write>
            SX1276Write( REG_PREAMBLEMSB, ( preambleLen >> 8 ) & 0x00FF );
 80030b8:	0a39      	lsrs	r1, r7, #8
 80030ba:	2025      	movs	r0, #37	; 0x25
 80030bc:	f7ff f991 	bl	80023e2 <SX1276Write>
            SX1276Write( REG_PREAMBLELSB, preambleLen & 0xFF );
 80030c0:	b2f9      	uxtb	r1, r7
 80030c2:	2026      	movs	r0, #38	; 0x26
 80030c4:	f7ff f98d 	bl	80023e2 <SX1276Write>
                         ( SX1276Read( REG_PACKETCONFIG1 ) &
 80030c8:	2030      	movs	r0, #48	; 0x30
 80030ca:	f7ff f9dd 	bl	8002488 <SX1276Read>
                           RF_PACKETCONFIG1_CRC_MASK &
 80030ce:	216f      	movs	r1, #111	; 0x6f
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 80030d0:	9b01      	ldr	r3, [sp, #4]
                           RF_PACKETCONFIG1_CRC_MASK &
 80030d2:	4001      	ands	r1, r0
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d101      	bne.n	80030dc <SX1276SetTxConfig+0xec>
 80030d8:	2580      	movs	r5, #128	; 0x80
 80030da:	426d      	negs	r5, r5
                           ( crcOn << 4 ) );
 80030dc:	9b02      	ldr	r3, [sp, #8]
 80030de:	0118      	lsls	r0, r3, #4
                           ( ( fixLen == 1 ) ? RF_PACKETCONFIG1_PACKETFORMAT_FIXED : RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE ) |
 80030e0:	4301      	orrs	r1, r0
 80030e2:	4329      	orrs	r1, r5
            SX1276Write( REG_PACKETCONFIG1,
 80030e4:	b2c9      	uxtb	r1, r1
 80030e6:	2030      	movs	r0, #48	; 0x30
 80030e8:	f7ff f97b 	bl	80023e2 <SX1276Write>
            SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) | RF_PACKETCONFIG2_DATAMODE_PACKET ) );
 80030ec:	2031      	movs	r0, #49	; 0x31
 80030ee:	f7ff f9cb 	bl	8002488 <SX1276Read>
 80030f2:	2140      	movs	r1, #64	; 0x40
 80030f4:	4301      	orrs	r1, r0
 80030f6:	2031      	movs	r0, #49	; 0x31
 80030f8:	b2c9      	uxtb	r1, r1
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 80030fa:	f7ff f972 	bl	80023e2 <SX1276Write>
}
 80030fe:	e79d      	b.n	800303c <SX1276SetTxConfig+0x4c>
            SX1276.Settings.LoRa.Power = power;
 8003100:	4d55      	ldr	r5, [pc, #340]	; (8003258 <SX1276SetTxConfig+0x268>)
 8003102:	002b      	movs	r3, r5
 8003104:	3340      	adds	r3, #64	; 0x40
 8003106:	701e      	strb	r6, [r3, #0]
            if( bandwidth > 2 )
 8003108:	9b00      	ldr	r3, [sp, #0]
 800310a:	2b02      	cmp	r3, #2
 800310c:	d900      	bls.n	8003110 <SX1276SetTxConfig+0x120>
 800310e:	e7fe      	b.n	800310e <SX1276SetTxConfig+0x11e>
            bandwidth += 7;
 8003110:	9b00      	ldr	r3, [sp, #0]
            SX1276.Settings.LoRa.Coderate = coderate;
 8003112:	466a      	mov	r2, sp
            bandwidth += 7;
 8003114:	1dde      	adds	r6, r3, #7
            SX1276.Settings.LoRa.Coderate = coderate;
 8003116:	002b      	movs	r3, r5
 8003118:	7c12      	ldrb	r2, [r2, #16]
 800311a:	334d      	adds	r3, #77	; 0x4d
 800311c:	701a      	strb	r2, [r3, #0]
            SX1276.Settings.LoRa.PreambleLen = preambleLen;
 800311e:	002b      	movs	r3, r5
            SX1276.Settings.LoRa.FixLen = fixLen;
 8003120:	466a      	mov	r2, sp
            SX1276.Settings.LoRa.PreambleLen = preambleLen;
 8003122:	334e      	adds	r3, #78	; 0x4e
 8003124:	801f      	strh	r7, [r3, #0]
            SX1276.Settings.LoRa.FixLen = fixLen;
 8003126:	002b      	movs	r3, r5
 8003128:	7912      	ldrb	r2, [r2, #4]
 800312a:	3350      	adds	r3, #80	; 0x50
 800312c:	701a      	strb	r2, [r3, #0]
            SX1276.Settings.LoRa.FreqHopOn = freqHopOn;
 800312e:	466a      	mov	r2, sp
 8003130:	002b      	movs	r3, r5
 8003132:	7d12      	ldrb	r2, [r2, #20]
 8003134:	3353      	adds	r3, #83	; 0x53
 8003136:	701a      	strb	r2, [r3, #0]
            SX1276.Settings.LoRa.HopPeriod = hopPeriod;
 8003138:	466a      	mov	r2, sp
 800313a:	002b      	movs	r3, r5
 800313c:	7f12      	ldrb	r2, [r2, #28]
 800313e:	3354      	adds	r3, #84	; 0x54
 8003140:	701a      	strb	r2, [r3, #0]
            SX1276.Settings.LoRa.CrcOn = crcOn;
 8003142:	466a      	mov	r2, sp
 8003144:	002b      	movs	r3, r5
 8003146:	7a12      	ldrb	r2, [r2, #8]
 8003148:	3352      	adds	r3, #82	; 0x52
 800314a:	701a      	strb	r2, [r3, #0]
            SX1276.Settings.LoRa.IqInverted = iqInverted;
 800314c:	466a      	mov	r2, sp
 800314e:	002b      	movs	r3, r5
 8003150:	7e12      	ldrb	r2, [r2, #24]
 8003152:	3355      	adds	r3, #85	; 0x55
 8003154:	701a      	strb	r2, [r3, #0]
            SX1276.Settings.LoRa.TxTimeout = timeout;
 8003156:	9b16      	ldr	r3, [sp, #88]	; 0x58
            SX1276.Settings.LoRa.Bandwidth = bandwidth;
 8003158:	646e      	str	r6, [r5, #68]	; 0x44
            SX1276.Settings.LoRa.TxTimeout = timeout;
 800315a:	65ab      	str	r3, [r5, #88]	; 0x58
            SX1276.Settings.LoRa.Datarate = datarate;
 800315c:	64ac      	str	r4, [r5, #72]	; 0x48
 800315e:	002b      	movs	r3, r5
            if( datarate > 12 )
 8003160:	2c0c      	cmp	r4, #12
 8003162:	d872      	bhi.n	800324a <SX1276SetTxConfig+0x25a>
            else if( datarate < 6 )
 8003164:	2c05      	cmp	r4, #5
 8003166:	d963      	bls.n	8003230 <SX1276SetTxConfig+0x240>
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8003168:	2e07      	cmp	r6, #7
 800316a:	d15a      	bne.n	8003222 <SX1276SetTxConfig+0x232>
 800316c:	0022      	movs	r2, r4
 800316e:	3a0b      	subs	r2, #11
 8003170:	2a01      	cmp	r2, #1
 8003172:	d85a      	bhi.n	800322a <SX1276SetTxConfig+0x23a>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x01;
 8003174:	2201      	movs	r2, #1
 8003176:	334c      	adds	r3, #76	; 0x4c
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x00;
 8003178:	701a      	strb	r2, [r3, #0]
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 800317a:	9b05      	ldr	r3, [sp, #20]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d00f      	beq.n	80031a0 <SX1276SetTxConfig+0x1b0>
                SX1276Write( REG_LR_PLLHOP, ( SX1276Read( REG_LR_PLLHOP ) & RFLR_PLLHOP_FASTHOP_MASK ) | RFLR_PLLHOP_FASTHOP_ON );
 8003180:	2044      	movs	r0, #68	; 0x44
 8003182:	f7ff f981 	bl	8002488 <SX1276Read>
 8003186:	2180      	movs	r1, #128	; 0x80
 8003188:	4249      	negs	r1, r1
 800318a:	4301      	orrs	r1, r0
 800318c:	b2c9      	uxtb	r1, r1
 800318e:	2044      	movs	r0, #68	; 0x44
 8003190:	f7ff f927 	bl	80023e2 <SX1276Write>
                SX1276Write( REG_LR_HOPPERIOD, SX1276.Settings.LoRa.HopPeriod );
 8003194:	4b30      	ldr	r3, [pc, #192]	; (8003258 <SX1276SetTxConfig+0x268>)
 8003196:	2024      	movs	r0, #36	; 0x24
 8003198:	3354      	adds	r3, #84	; 0x54
 800319a:	7819      	ldrb	r1, [r3, #0]
 800319c:	f7ff f921 	bl	80023e2 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG1 ) &
 80031a0:	201d      	movs	r0, #29
 80031a2:	f7ff f971 	bl	8002488 <SX1276Read>
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 80031a6:	9b04      	ldr	r3, [sp, #16]
 80031a8:	0136      	lsls	r6, r6, #4
 80031aa:	0059      	lsls	r1, r3, #1
 80031ac:	9b01      	ldr	r3, [sp, #4]
            SX1276Write( REG_LR_MODEMCONFIG1,
 80031ae:	201d      	movs	r0, #29
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 80031b0:	430b      	orrs	r3, r1
 80031b2:	0019      	movs	r1, r3
 80031b4:	4331      	orrs	r1, r6
            SX1276Write( REG_LR_MODEMCONFIG1,
 80031b6:	b2c9      	uxtb	r1, r1
 80031b8:	f7ff f913 	bl	80023e2 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG2 ) &
 80031bc:	201e      	movs	r0, #30
 80031be:	f7ff f963 	bl	8002488 <SX1276Read>
                           ( datarate << 4 ) | ( crcOn << 2 ) );
 80031c2:	9b02      	ldr	r3, [sp, #8]
 80031c4:	0121      	lsls	r1, r4, #4
 80031c6:	009b      	lsls	r3, r3, #2
            SX1276Write( REG_LR_MODEMCONFIG2,
 80031c8:	4319      	orrs	r1, r3
                           RFLR_MODEMCONFIG2_SF_MASK &
 80031ca:	230b      	movs	r3, #11
 80031cc:	4018      	ands	r0, r3
            SX1276Write( REG_LR_MODEMCONFIG2,
 80031ce:	4301      	orrs	r1, r0
 80031d0:	b2c9      	uxtb	r1, r1
 80031d2:	201e      	movs	r0, #30
 80031d4:	f7ff f905 	bl	80023e2 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
 80031d8:	2026      	movs	r0, #38	; 0x26
 80031da:	f7ff f955 	bl	8002488 <SX1276Read>
 80031de:	2308      	movs	r3, #8
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
 80031e0:	354c      	adds	r5, #76	; 0x4c
 80031e2:	7829      	ldrb	r1, [r5, #0]
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
 80031e4:	4398      	bics	r0, r3
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
 80031e6:	00c9      	lsls	r1, r1, #3
                           RFLR_MODEMCONFIG3_LOWDATARATEOPTIMIZE_MASK ) |
 80031e8:	4301      	orrs	r1, r0
            SX1276Write( REG_LR_MODEMCONFIG3,
 80031ea:	b2c9      	uxtb	r1, r1
 80031ec:	2026      	movs	r0, #38	; 0x26
 80031ee:	f7ff f8f8 	bl	80023e2 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLEMSB, ( preambleLen >> 8 ) & 0x00FF );
 80031f2:	0a39      	lsrs	r1, r7, #8
 80031f4:	2020      	movs	r0, #32
 80031f6:	f7ff f8f4 	bl	80023e2 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLELSB, preambleLen & 0xFF );
 80031fa:	2021      	movs	r0, #33	; 0x21
 80031fc:	b2f9      	uxtb	r1, r7
 80031fe:	f7ff f8f0 	bl	80023e2 <SX1276Write>
 8003202:	2507      	movs	r5, #7
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 8003204:	2031      	movs	r0, #49	; 0x31
            if( datarate == 6 )
 8003206:	2c06      	cmp	r4, #6
 8003208:	d114      	bne.n	8003234 <SX1276SetTxConfig+0x244>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 800320a:	f7ff f93d 	bl	8002488 <SX1276Read>
                               RFLR_DETECTIONOPTIMIZE_MASK ) |
 800320e:	2105      	movs	r1, #5
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 8003210:	43a8      	bics	r0, r5
                               RFLR_DETECTIONOPTIMIZE_MASK ) |
 8003212:	4301      	orrs	r1, r0
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 8003214:	b2c9      	uxtb	r1, r1
 8003216:	2031      	movs	r0, #49	; 0x31
 8003218:	f7ff f8e3 	bl	80023e2 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 800321c:	210c      	movs	r1, #12
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 800321e:	2037      	movs	r0, #55	; 0x37
 8003220:	e76b      	b.n	80030fa <SX1276SetTxConfig+0x10a>
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8003222:	2e08      	cmp	r6, #8
 8003224:	d101      	bne.n	800322a <SX1276SetTxConfig+0x23a>
                ( ( bandwidth == 8 ) && ( datarate == 12 ) ) )
 8003226:	2c0c      	cmp	r4, #12
 8003228:	d0a4      	beq.n	8003174 <SX1276SetTxConfig+0x184>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x00;
 800322a:	334c      	adds	r3, #76	; 0x4c
 800322c:	2200      	movs	r2, #0
 800322e:	e7a3      	b.n	8003178 <SX1276SetTxConfig+0x188>
                datarate = 6;
 8003230:	2406      	movs	r4, #6
 8003232:	e7fa      	b.n	800322a <SX1276SetTxConfig+0x23a>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 8003234:	f7ff f928 	bl	8002488 <SX1276Read>
                             RFLR_DETECTIONOPTIMIZE_MASK ) |
 8003238:	2103      	movs	r1, #3
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 800323a:	43a8      	bics	r0, r5
                             RFLR_DETECTIONOPTIMIZE_MASK ) |
 800323c:	4301      	orrs	r1, r0
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 800323e:	b2c9      	uxtb	r1, r1
 8003240:	2031      	movs	r0, #49	; 0x31
 8003242:	f7ff f8ce 	bl	80023e2 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 8003246:	210a      	movs	r1, #10
 8003248:	e7e9      	b.n	800321e <SX1276SetTxConfig+0x22e>
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800324a:	9a00      	ldr	r2, [sp, #0]
 800324c:	240c      	movs	r4, #12
 800324e:	2a02      	cmp	r2, #2
 8003250:	d0eb      	beq.n	800322a <SX1276SetTxConfig+0x23a>
 8003252:	e78f      	b.n	8003174 <SX1276SetTxConfig+0x184>
 8003254:	20000110 	.word	0x20000110
 8003258:	20000594 	.word	0x20000594
 800325c:	404e8480 	.word	0x404e8480
 8003260:	417e8480 	.word	0x417e8480

08003264 <SX1276SetTxContinuousWave>:
{
 8003264:	b570      	push	{r4, r5, r6, lr}
 8003266:	0006      	movs	r6, r0
 8003268:	b08a      	sub	sp, #40	; 0x28
    uint32_t timeout = ( uint32_t )( time * 1e3 );
 800326a:	0010      	movs	r0, r2
{
 800326c:	000d      	movs	r5, r1
    uint32_t timeout = ( uint32_t )( time * 1e3 );
 800326e:	f7fe ff3f 	bl	80020f0 <__aeabi_i2d>
 8003272:	2200      	movs	r2, #0
 8003274:	4b1d      	ldr	r3, [pc, #116]	; (80032ec <SX1276SetTxContinuousWave+0x88>)
 8003276:	f7fe f971 	bl	800155c <__aeabi_dmul>
 800327a:	f7fd f94d 	bl	8000518 <__aeabi_d2uiz>
 800327e:	0004      	movs	r4, r0
    SX1276SetChannel( freq );
 8003280:	0030      	movs	r0, r6
 8003282:	f7ff f8b7 	bl	80023f4 <SX1276SetChannel>
    SX1276SetTxConfig( MODEM_FSK, power, 0, 0, 4800, 0, 5, false, false, 0, 0, 0, timeout );
 8003286:	2305      	movs	r3, #5
 8003288:	9302      	str	r3, [sp, #8]
 800328a:	2396      	movs	r3, #150	; 0x96
 800328c:	2000      	movs	r0, #0
 800328e:	015b      	lsls	r3, r3, #5
 8003290:	0002      	movs	r2, r0
 8003292:	0029      	movs	r1, r5
 8003294:	9007      	str	r0, [sp, #28]
 8003296:	9006      	str	r0, [sp, #24]
 8003298:	9005      	str	r0, [sp, #20]
 800329a:	9004      	str	r0, [sp, #16]
 800329c:	9003      	str	r0, [sp, #12]
 800329e:	9001      	str	r0, [sp, #4]
 80032a0:	9300      	str	r3, [sp, #0]
 80032a2:	9408      	str	r4, [sp, #32]
 80032a4:	0003      	movs	r3, r0
 80032a6:	f7ff fea3 	bl	8002ff0 <SX1276SetTxConfig>
    SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) & RF_PACKETCONFIG2_DATAMODE_MASK ) );
 80032aa:	2031      	movs	r0, #49	; 0x31
 80032ac:	f7ff f8ec 	bl	8002488 <SX1276Read>
 80032b0:	2540      	movs	r5, #64	; 0x40
 80032b2:	43a8      	bics	r0, r5
 80032b4:	b2c1      	uxtb	r1, r0
 80032b6:	2031      	movs	r0, #49	; 0x31
 80032b8:	f7ff f893 	bl	80023e2 <SX1276Write>
    SX1276Write( REG_DIOMAPPING1, RF_DIOMAPPING1_DIO0_11 | RF_DIOMAPPING1_DIO1_11 );
 80032bc:	0028      	movs	r0, r5
 80032be:	21f0      	movs	r1, #240	; 0xf0
 80032c0:	f7ff f88f 	bl	80023e2 <SX1276Write>
    SX1276Write( REG_DIOMAPPING2, RF_DIOMAPPING2_DIO4_10 | RF_DIOMAPPING2_DIO5_10 );
 80032c4:	21a0      	movs	r1, #160	; 0xa0
 80032c6:	2041      	movs	r0, #65	; 0x41
 80032c8:	f7ff f88b 	bl	80023e2 <SX1276Write>
    TimerSetValue( &TxTimeoutTimer, timeout );
 80032cc:	4d08      	ldr	r5, [pc, #32]	; (80032f0 <SX1276SetTxContinuousWave+0x8c>)
 80032ce:	0021      	movs	r1, r4
 80032d0:	0028      	movs	r0, r5
 80032d2:	f002 fdfd 	bl	8005ed0 <TimerSetValue>
    SX1276.Settings.State = RF_TX_RUNNING;
 80032d6:	2202      	movs	r2, #2
 80032d8:	4b06      	ldr	r3, [pc, #24]	; (80032f4 <SX1276SetTxContinuousWave+0x90>)
    TimerStart( &TxTimeoutTimer );
 80032da:	0028      	movs	r0, r5
    SX1276.Settings.State = RF_TX_RUNNING;
 80032dc:	711a      	strb	r2, [r3, #4]
    TimerStart( &TxTimeoutTimer );
 80032de:	f002 fd59 	bl	8005d94 <TimerStart>
    SX1276SetOpMode( RF_OPMODE_TRANSMITTER );
 80032e2:	2003      	movs	r0, #3
 80032e4:	f7ff fa74 	bl	80027d0 <SX1276SetOpMode>
}
 80032e8:	b00a      	add	sp, #40	; 0x28
 80032ea:	bd70      	pop	{r4, r5, r6, pc}
 80032ec:	408f4000 	.word	0x408f4000
 80032f0:	2000056c 	.word	0x2000056c
 80032f4:	20000594 	.word	0x20000594

080032f8 <SX1276OnTimeoutIrq>:
{
 80032f8:	b570      	push	{r4, r5, r6, lr}
    switch( SX1276.Settings.State )
 80032fa:	4c2e      	ldr	r4, [pc, #184]	; (80033b4 <SX1276OnTimeoutIrq+0xbc>)
 80032fc:	7923      	ldrb	r3, [r4, #4]
 80032fe:	2b01      	cmp	r3, #1
 8003300:	d002      	beq.n	8003308 <SX1276OnTimeoutIrq+0x10>
 8003302:	2b02      	cmp	r3, #2
 8003304:	d032      	beq.n	800336c <SX1276OnTimeoutIrq+0x74>
}
 8003306:	bd70      	pop	{r4, r5, r6, pc}
        if( SX1276.Settings.Modem == MODEM_FSK )
 8003308:	7963      	ldrb	r3, [r4, #5]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d120      	bne.n	8003350 <SX1276OnTimeoutIrq+0x58>
            SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 800330e:	0022      	movs	r2, r4
 8003310:	3230      	adds	r2, #48	; 0x30
 8003312:	7013      	strb	r3, [r2, #0]
            SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 8003314:	0022      	movs	r2, r4
            SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
 8003316:	210b      	movs	r1, #11
            SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 8003318:	3231      	adds	r2, #49	; 0x31
            SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
 800331a:	203e      	movs	r0, #62	; 0x3e
            SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 800331c:	7013      	strb	r3, [r2, #0]
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 800331e:	87a3      	strh	r3, [r4, #60]	; 0x3c
            SX1276.Settings.FskPacketHandler.Size = 0;
 8003320:	8763      	strh	r3, [r4, #58]	; 0x3a
            SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
 8003322:	f7ff f85e 	bl	80023e2 <SX1276Write>
            SX1276Write( REG_IRQFLAGS2, RF_IRQFLAGS2_FIFOOVERRUN );
 8003326:	2110      	movs	r1, #16
 8003328:	203f      	movs	r0, #63	; 0x3f
 800332a:	f7ff f85a 	bl	80023e2 <SX1276Write>
            if( SX1276.Settings.Fsk.RxContinuous == true )
 800332e:	1de3      	adds	r3, r4, #7
 8003330:	7fdb      	ldrb	r3, [r3, #31]
 8003332:	4d21      	ldr	r5, [pc, #132]	; (80033b8 <SX1276OnTimeoutIrq+0xc0>)
 8003334:	2b00      	cmp	r3, #0
 8003336:	d014      	beq.n	8003362 <SX1276OnTimeoutIrq+0x6a>
                SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 8003338:	200d      	movs	r0, #13
 800333a:	f7ff f8a5 	bl	8002488 <SX1276Read>
 800333e:	2140      	movs	r1, #64	; 0x40
 8003340:	4301      	orrs	r1, r0
 8003342:	b2c9      	uxtb	r1, r1
 8003344:	200d      	movs	r0, #13
 8003346:	f7ff f84c 	bl	80023e2 <SX1276Write>
                TimerStart( &RxTimeoutSyncWord );
 800334a:	0028      	movs	r0, r5
 800334c:	f002 fd22 	bl	8005d94 <TimerStart>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8003350:	4b1a      	ldr	r3, [pc, #104]	; (80033bc <SX1276OnTimeoutIrq+0xc4>)
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	2b00      	cmp	r3, #0
 8003356:	d0d6      	beq.n	8003306 <SX1276OnTimeoutIrq+0xe>
 8003358:	68db      	ldr	r3, [r3, #12]
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 800335a:	2b00      	cmp	r3, #0
 800335c:	d0d3      	beq.n	8003306 <SX1276OnTimeoutIrq+0xe>
            RadioEvents->TxTimeout( );
 800335e:	4798      	blx	r3
}
 8003360:	e7d1      	b.n	8003306 <SX1276OnTimeoutIrq+0xe>
                TimerStop( &RxTimeoutSyncWord );
 8003362:	0028      	movs	r0, r5
                SX1276.Settings.State = RF_IDLE;
 8003364:	7123      	strb	r3, [r4, #4]
                TimerStop( &RxTimeoutSyncWord );
 8003366:	f002 fd87 	bl	8005e78 <TimerStop>
 800336a:	e7f1      	b.n	8003350 <SX1276OnTimeoutIrq+0x58>
 800336c:	2500      	movs	r5, #0
        SX1276Reset( );
 800336e:	f7fe fff1 	bl	8002354 <SX1276Reset>
        RxChainCalibration( );
 8003372:	f7ff f893 	bl	800249c <RxChainCalibration>
 8003376:	2000      	movs	r0, #0
 8003378:	f7ff f9fc 	bl	8002774 <SX1276SetOpMode.part.2>
            SX1276SetModem( RadioRegsInit[i].Modem );
 800337c:	4e10      	ldr	r6, [pc, #64]	; (80033c0 <SX1276OnTimeoutIrq+0xc8>)
 800337e:	3648      	adds	r6, #72	; 0x48
 8003380:	5da8      	ldrb	r0, [r5, r6]
 8003382:	f7ff fbcf 	bl	8002b24 <SX1276SetModem>
 8003386:	1973      	adds	r3, r6, r5
            SX1276Write( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
 8003388:	7899      	ldrb	r1, [r3, #2]
 800338a:	7858      	ldrb	r0, [r3, #1]
 800338c:	3503      	adds	r5, #3
 800338e:	f7ff f828 	bl	80023e2 <SX1276Write>
        for( uint8_t i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 8003392:	2d30      	cmp	r5, #48	; 0x30
 8003394:	d1f4      	bne.n	8003380 <SX1276OnTimeoutIrq+0x88>
        SX1276SetModem( MODEM_FSK );
 8003396:	2000      	movs	r0, #0
 8003398:	f7ff fbc4 	bl	8002b24 <SX1276SetModem>
        SX1276SetSyncWord( LastSyncWord );
 800339c:	4d07      	ldr	r5, [pc, #28]	; (80033bc <SX1276OnTimeoutIrq+0xc4>)
 800339e:	7a28      	ldrb	r0, [r5, #8]
 80033a0:	f7ff fc5a 	bl	8002c58 <SX1276SetSyncWord>
        SX1276.Settings.State = RF_IDLE;
 80033a4:	2300      	movs	r3, #0
 80033a6:	7123      	strb	r3, [r4, #4]
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 80033a8:	686b      	ldr	r3, [r5, #4]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d0ab      	beq.n	8003306 <SX1276OnTimeoutIrq+0xe>
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	e7d3      	b.n	800335a <SX1276OnTimeoutIrq+0x62>
 80033b2:	46c0      	nop			; (mov r8, r8)
 80033b4:	20000594 	.word	0x20000594
 80033b8:	20000580 	.word	0x20000580
 80033bc:	20000210 	.word	0x20000210
 80033c0:	08007c58 	.word	0x08007c58

080033c4 <SX1276OnDio2Irq>:
{
 80033c4:	b570      	push	{r4, r5, r6, lr}
    switch( SX1276.Settings.State )
 80033c6:	4c2b      	ldr	r4, [pc, #172]	; (8003474 <SX1276OnDio2Irq+0xb0>)
 80033c8:	7921      	ldrb	r1, [r4, #4]
 80033ca:	2901      	cmp	r1, #1
 80033cc:	d002      	beq.n	80033d4 <SX1276OnDio2Irq+0x10>
 80033ce:	2902      	cmp	r1, #2
 80033d0:	d048      	beq.n	8003464 <SX1276OnDio2Irq+0xa0>
}
 80033d2:	bd70      	pop	{r4, r5, r6, pc}
            switch( SX1276.Settings.Modem )
 80033d4:	7963      	ldrb	r3, [r4, #5]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d017      	beq.n	800340a <SX1276OnDio2Irq+0x46>
 80033da:	2b01      	cmp	r3, #1
 80033dc:	d1f9      	bne.n	80033d2 <SX1276OnDio2Irq+0xe>
                if( SX1276.Settings.LoRa.FreqHopOn == true )
 80033de:	3453      	adds	r4, #83	; 0x53
 80033e0:	7823      	ldrb	r3, [r4, #0]
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL );
 80033e2:	2102      	movs	r1, #2
                if( SX1276.Settings.LoRa.FreqHopOn == true )
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d0f4      	beq.n	80033d2 <SX1276OnDio2Irq+0xe>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL );
 80033e8:	2012      	movs	r0, #18
 80033ea:	f7fe fffa 	bl	80023e2 <SX1276Write>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->FhssChangeChannel != NULL ) )
 80033ee:	4b22      	ldr	r3, [pc, #136]	; (8003478 <SX1276OnDio2Irq+0xb4>)
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d0ed      	beq.n	80033d2 <SX1276OnDio2Irq+0xe>
 80033f6:	695c      	ldr	r4, [r3, #20]
 80033f8:	2c00      	cmp	r4, #0
 80033fa:	d0ea      	beq.n	80033d2 <SX1276OnDio2Irq+0xe>
                        RadioEvents->FhssChangeChannel( ( SX1276Read( REG_LR_HOPCHANNEL ) & RFLR_HOPCHANNEL_CHANNEL_MASK ) );
 80033fc:	201c      	movs	r0, #28
 80033fe:	f7ff f843 	bl	8002488 <SX1276Read>
 8003402:	233f      	movs	r3, #63	; 0x3f
 8003404:	4018      	ands	r0, r3
 8003406:	47a0      	blx	r4
}
 8003408:	e7e3      	b.n	80033d2 <SX1276OnDio2Irq+0xe>
                SX1276.Settings.FskPacketHandler.PreambleDetected = true;
 800340a:	0023      	movs	r3, r4
 800340c:	3330      	adds	r3, #48	; 0x30
 800340e:	7019      	strb	r1, [r3, #0]
                if( ( SX1276.Settings.FskPacketHandler.PreambleDetected == true ) && ( SX1276.Settings.FskPacketHandler.SyncWordDetected == false ) )
 8003410:	8e25      	ldrh	r5, [r4, #48]	; 0x30
 8003412:	2d01      	cmp	r5, #1
 8003414:	d1dd      	bne.n	80033d2 <SX1276OnDio2Irq+0xe>
                    TimerStop( &RxTimeoutSyncWord );
 8003416:	4819      	ldr	r0, [pc, #100]	; (800347c <SX1276OnDio2Irq+0xb8>)
 8003418:	f002 fd2e 	bl	8005e78 <TimerStop>
                    SX1276.Settings.FskPacketHandler.SyncWordDetected = true;
 800341c:	0023      	movs	r3, r4
                    SX1276.Settings.FskPacketHandler.RssiValue = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
 800341e:	2011      	movs	r0, #17
                    SX1276.Settings.FskPacketHandler.SyncWordDetected = true;
 8003420:	3331      	adds	r3, #49	; 0x31
 8003422:	701d      	strb	r5, [r3, #0]
                    SX1276.Settings.FskPacketHandler.RssiValue = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
 8003424:	f7ff f830 	bl	8002488 <SX1276Read>
 8003428:	0023      	movs	r3, r4
 800342a:	0840      	lsrs	r0, r0, #1
 800342c:	3332      	adds	r3, #50	; 0x32
 800342e:	4240      	negs	r0, r0
 8003430:	7018      	strb	r0, [r3, #0]
                    afcChannel = ( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
 8003432:	201b      	movs	r0, #27
 8003434:	f7ff f828 	bl	8002488 <SX1276Read>
 8003438:	0005      	movs	r5, r0
                                     ( uint16_t )SX1276Read( REG_AFCLSB ) );
 800343a:	201c      	movs	r0, #28
 800343c:	f7ff f824 	bl	8002488 <SX1276Read>
                    afcChannel = ( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
 8003440:	022d      	lsls	r5, r5, #8
                    SX_CHANNEL_TO_FREQ( afcChannel, SX1276.Settings.FskPacketHandler.AfcValue);
 8003442:	4a0f      	ldr	r2, [pc, #60]	; (8003480 <SX1276OnDio2Irq+0xbc>)
                    afcChannel = ( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
 8003444:	4328      	orrs	r0, r5
                    SX_CHANNEL_TO_FREQ( afcChannel, SX1276.Settings.FskPacketHandler.AfcValue);
 8003446:	b2c3      	uxtb	r3, r0
 8003448:	4353      	muls	r3, r2
 800344a:	0a00      	lsrs	r0, r0, #8
 800344c:	4350      	muls	r0, r2
 800344e:	3380      	adds	r3, #128	; 0x80
 8003450:	0a1b      	lsrs	r3, r3, #8
 8003452:	1818      	adds	r0, r3, r0
 8003454:	6360      	str	r0, [r4, #52]	; 0x34
                    SX1276.Settings.FskPacketHandler.RxGain = ( SX1276Read( REG_LNA ) >> 5 ) & 0x07;
 8003456:	200c      	movs	r0, #12
 8003458:	f7ff f816 	bl	8002488 <SX1276Read>
 800345c:	3438      	adds	r4, #56	; 0x38
 800345e:	0940      	lsrs	r0, r0, #5
 8003460:	7020      	strb	r0, [r4, #0]
 8003462:	e7b6      	b.n	80033d2 <SX1276OnDio2Irq+0xe>
            switch( SX1276.Settings.Modem )
 8003464:	7963      	ldrb	r3, [r4, #5]
 8003466:	2b01      	cmp	r3, #1
 8003468:	d1b3      	bne.n	80033d2 <SX1276OnDio2Irq+0xe>
                if( SX1276.Settings.LoRa.FreqHopOn == true )
 800346a:	3453      	adds	r4, #83	; 0x53
 800346c:	7823      	ldrb	r3, [r4, #0]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d0af      	beq.n	80033d2 <SX1276OnDio2Irq+0xe>
 8003472:	e7b9      	b.n	80033e8 <SX1276OnDio2Irq+0x24>
 8003474:	20000594 	.word	0x20000594
 8003478:	20000210 	.word	0x20000210
 800347c:	20000580 	.word	0x20000580
 8003480:	00003d09 	.word	0x00003d09

08003484 <SX1276OnDio3Irq>:
{
 8003484:	b570      	push	{r4, r5, r6, lr}
    switch( SX1276.Settings.Modem )
 8003486:	4b12      	ldr	r3, [pc, #72]	; (80034d0 <SX1276OnDio3Irq+0x4c>)
 8003488:	795d      	ldrb	r5, [r3, #5]
 800348a:	2d01      	cmp	r5, #1
 800348c:	d111      	bne.n	80034b2 <SX1276OnDio3Irq+0x2e>
        if( ( SX1276Read( REG_LR_IRQFLAGS ) & RFLR_IRQFLAGS_CADDETECTED ) == RFLR_IRQFLAGS_CADDETECTED )
 800348e:	2012      	movs	r0, #18
 8003490:	f7fe fffa 	bl	8002488 <SX1276Read>
 8003494:	4028      	ands	r0, r5
 8003496:	1e04      	subs	r4, r0, #0
 8003498:	4e0e      	ldr	r6, [pc, #56]	; (80034d4 <SX1276OnDio3Irq+0x50>)
 800349a:	d00b      	beq.n	80034b4 <SX1276OnDio3Irq+0x30>
            SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_CADDETECTED | RFLR_IRQFLAGS_CADDONE );
 800349c:	2105      	movs	r1, #5
 800349e:	2012      	movs	r0, #18
 80034a0:	f7fe ff9f 	bl	80023e2 <SX1276Write>
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 80034a4:	6873      	ldr	r3, [r6, #4]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d003      	beq.n	80034b2 <SX1276OnDio3Irq+0x2e>
 80034aa:	699b      	ldr	r3, [r3, #24]
                RadioEvents->CadDone( true );
 80034ac:	0028      	movs	r0, r5
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d10b      	bne.n	80034ca <SX1276OnDio3Irq+0x46>
}
 80034b2:	bd70      	pop	{r4, r5, r6, pc}
            SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_CADDONE );
 80034b4:	2104      	movs	r1, #4
 80034b6:	2012      	movs	r0, #18
 80034b8:	f7fe ff93 	bl	80023e2 <SX1276Write>
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 80034bc:	6873      	ldr	r3, [r6, #4]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d0f7      	beq.n	80034b2 <SX1276OnDio3Irq+0x2e>
 80034c2:	699b      	ldr	r3, [r3, #24]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d0f4      	beq.n	80034b2 <SX1276OnDio3Irq+0x2e>
                RadioEvents->CadDone( false );
 80034c8:	0020      	movs	r0, r4
 80034ca:	4798      	blx	r3
}
 80034cc:	e7f1      	b.n	80034b2 <SX1276OnDio3Irq+0x2e>
 80034ce:	46c0      	nop			; (mov r8, r8)
 80034d0:	20000594 	.word	0x20000594
 80034d4:	20000210 	.word	0x20000210

080034d8 <SX1276WriteFifo>:
{
 80034d8:	b510      	push	{r4, lr}
 80034da:	000a      	movs	r2, r1
    SX1276WriteBuffer( 0, buffer, size );
 80034dc:	0001      	movs	r1, r0
 80034de:	2000      	movs	r0, #0
 80034e0:	f7fe ff60 	bl	80023a4 <SX1276WriteBuffer>
}
 80034e4:	bd10      	pop	{r4, pc}
	...

080034e8 <SX1276Send>:
{
 80034e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80034ea:	466b      	mov	r3, sp
    switch( SX1276.Settings.Modem )
 80034ec:	4c3b      	ldr	r4, [pc, #236]	; (80035dc <SX1276Send+0xf4>)
{
 80034ee:	1dde      	adds	r6, r3, #7
 80034f0:	7031      	strb	r1, [r6, #0]
    switch( SX1276.Settings.Modem )
 80034f2:	7965      	ldrb	r5, [r4, #5]
{
 80034f4:	0007      	movs	r7, r0
    switch( SX1276.Settings.Modem )
 80034f6:	2d00      	cmp	r5, #0
 80034f8:	d003      	beq.n	8003502 <SX1276Send+0x1a>
 80034fa:	2d01      	cmp	r5, #1
 80034fc:	d02f      	beq.n	800355e <SX1276Send+0x76>
    uint32_t txTimeout = 0;
 80034fe:	2000      	movs	r0, #0
 8003500:	e01c      	b.n	800353c <SX1276Send+0x54>
            SX1276.Settings.FskPacketHandler.Size = size;
 8003502:	7831      	ldrb	r1, [r6, #0]
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 8003504:	87a5      	strh	r5, [r4, #60]	; 0x3c
            SX1276.Settings.FskPacketHandler.Size = size;
 8003506:	8761      	strh	r1, [r4, #58]	; 0x3a
            if( SX1276.Settings.Fsk.FixLen == false )
 8003508:	1ce3      	adds	r3, r4, #3
 800350a:	7fdb      	ldrb	r3, [r3, #31]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d118      	bne.n	8003542 <SX1276Send+0x5a>
                SX1276WriteFifo( ( uint8_t* )&size, 1 );
 8003510:	2101      	movs	r1, #1
 8003512:	0030      	movs	r0, r6
 8003514:	f7ff ffe0 	bl	80034d8 <SX1276WriteFifo>
            if( ( size > 0 ) && ( size <= 64 ) )
 8003518:	7832      	ldrb	r2, [r6, #0]
 800351a:	1e53      	subs	r3, r2, #1
 800351c:	2b3f      	cmp	r3, #63	; 0x3f
 800351e:	d814      	bhi.n	800354a <SX1276Send+0x62>
                SX1276.Settings.FskPacketHandler.ChunkSize = size;
 8003520:	0023      	movs	r3, r4
 8003522:	333f      	adds	r3, #63	; 0x3f
            SX1276WriteFifo( buffer, SX1276.Settings.FskPacketHandler.ChunkSize );
 8003524:	0025      	movs	r5, r4
                SX1276.Settings.FskPacketHandler.ChunkSize = 32;
 8003526:	701a      	strb	r2, [r3, #0]
            SX1276WriteFifo( buffer, SX1276.Settings.FskPacketHandler.ChunkSize );
 8003528:	353f      	adds	r5, #63	; 0x3f
 800352a:	0038      	movs	r0, r7
 800352c:	7829      	ldrb	r1, [r5, #0]
 800352e:	f7ff ffd3 	bl	80034d8 <SX1276WriteFifo>
            SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
 8003532:	782b      	ldrb	r3, [r5, #0]
 8003534:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
            txTimeout = SX1276.Settings.Fsk.TxTimeout;
 8003536:	6aa0      	ldr	r0, [r4, #40]	; 0x28
            SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
 8003538:	189b      	adds	r3, r3, r2
 800353a:	87a3      	strh	r3, [r4, #60]	; 0x3c
    SX1276SetTx( txTimeout );
 800353c:	f7ff fa88 	bl	8002a50 <SX1276SetTx>
}
 8003540:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
                SX1276Write( REG_PAYLOADLENGTH, size );
 8003542:	2032      	movs	r0, #50	; 0x32
 8003544:	f7fe ff4d 	bl	80023e2 <SX1276Write>
 8003548:	e7e6      	b.n	8003518 <SX1276Send+0x30>
                memcpy1( RxTxBuffer, buffer, size );
 800354a:	4825      	ldr	r0, [pc, #148]	; (80035e0 <SX1276Send+0xf8>)
 800354c:	b292      	uxth	r2, r2
 800354e:	0039      	movs	r1, r7
 8003550:	3004      	adds	r0, #4
 8003552:	f002 fce0 	bl	8005f16 <memcpy1>
                SX1276.Settings.FskPacketHandler.ChunkSize = 32;
 8003556:	0023      	movs	r3, r4
 8003558:	2220      	movs	r2, #32
 800355a:	333f      	adds	r3, #63	; 0x3f
 800355c:	e7e2      	b.n	8003524 <SX1276Send+0x3c>
            if( SX1276.Settings.LoRa.IqInverted == true )
 800355e:	0023      	movs	r3, r4
 8003560:	3355      	adds	r3, #85	; 0x55
 8003562:	781b      	ldrb	r3, [r3, #0]
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_ON ) );
 8003564:	2033      	movs	r0, #51	; 0x33
            if( SX1276.Settings.LoRa.IqInverted == true )
 8003566:	2b00      	cmp	r3, #0
 8003568:	d02b      	beq.n	80035c2 <SX1276Send+0xda>
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_ON ) );
 800356a:	f7fe ff8d 	bl	8002488 <SX1276Read>
 800356e:	2341      	movs	r3, #65	; 0x41
 8003570:	4398      	bics	r0, r3
 8003572:	b2c1      	uxtb	r1, r0
 8003574:	2033      	movs	r0, #51	; 0x33
 8003576:	f7fe ff34 	bl	80023e2 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_ON );
 800357a:	2119      	movs	r1, #25
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 800357c:	203b      	movs	r0, #59	; 0x3b
 800357e:	f7fe ff30 	bl	80023e2 <SX1276Write>
            SX1276.Settings.LoRaPacketHandler.Size = size;
 8003582:	0023      	movs	r3, r4
 8003584:	7831      	ldrb	r1, [r6, #0]
 8003586:	3364      	adds	r3, #100	; 0x64
            SX1276Write( REG_LR_PAYLOADLENGTH, size );
 8003588:	2022      	movs	r0, #34	; 0x22
            SX1276.Settings.LoRaPacketHandler.Size = size;
 800358a:	7019      	strb	r1, [r3, #0]
            SX1276Write( REG_LR_PAYLOADLENGTH, size );
 800358c:	f7fe ff29 	bl	80023e2 <SX1276Write>
            SX1276Write( REG_LR_FIFOTXBASEADDR, 0 );
 8003590:	2100      	movs	r1, #0
 8003592:	200e      	movs	r0, #14
 8003594:	f7fe ff25 	bl	80023e2 <SX1276Write>
            SX1276Write( REG_LR_FIFOADDRPTR, 0 );
 8003598:	2100      	movs	r1, #0
 800359a:	200d      	movs	r0, #13
 800359c:	f7fe ff21 	bl	80023e2 <SX1276Write>
            if( ( SX1276Read( REG_OPMODE ) & ~RF_OPMODE_MASK ) == RF_OPMODE_SLEEP )
 80035a0:	2001      	movs	r0, #1
 80035a2:	f7fe ff71 	bl	8002488 <SX1276Read>
 80035a6:	23f8      	movs	r3, #248	; 0xf8
 80035a8:	4398      	bics	r0, r3
 80035aa:	d104      	bne.n	80035b6 <SX1276Send+0xce>
                SX1276SetStby( );
 80035ac:	f7ff f932 	bl	8002814 <SX1276SetStby>
                DelayMs( 1 );
 80035b0:	2001      	movs	r0, #1
 80035b2:	f002 fb8f 	bl	8005cd4 <DelayMs>
            SX1276WriteFifo( buffer, size );
 80035b6:	0038      	movs	r0, r7
 80035b8:	7831      	ldrb	r1, [r6, #0]
 80035ba:	f7ff ff8d 	bl	80034d8 <SX1276WriteFifo>
            txTimeout = SX1276.Settings.LoRa.TxTimeout;
 80035be:	6da0      	ldr	r0, [r4, #88]	; 0x58
        break;
 80035c0:	e7bc      	b.n	800353c <SX1276Send+0x54>
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_OFF ) );
 80035c2:	f7fe ff61 	bl	8002488 <SX1276Read>
 80035c6:	2341      	movs	r3, #65	; 0x41
 80035c8:	0001      	movs	r1, r0
 80035ca:	4399      	bics	r1, r3
 80035cc:	4329      	orrs	r1, r5
 80035ce:	b2c9      	uxtb	r1, r1
 80035d0:	2033      	movs	r0, #51	; 0x33
 80035d2:	f7fe ff06 	bl	80023e2 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 80035d6:	211d      	movs	r1, #29
 80035d8:	e7d0      	b.n	800357c <SX1276Send+0x94>
 80035da:	46c0      	nop			; (mov r8, r8)
 80035dc:	20000594 	.word	0x20000594
 80035e0:	20000110 	.word	0x20000110

080035e4 <SX1276ReadFifo>:
{
 80035e4:	b510      	push	{r4, lr}
 80035e6:	000a      	movs	r2, r1
    SX1276ReadBuffer( 0, buffer, size );
 80035e8:	0001      	movs	r1, r0
 80035ea:	2000      	movs	r0, #0
 80035ec:	f7fe ff2c 	bl	8002448 <SX1276ReadBuffer>
}
 80035f0:	bd10      	pop	{r4, pc}
	...

080035f4 <SX1276OnDio0Irq>:
{
 80035f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    volatile uint8_t irqFlags = 0;
 80035f6:	466b      	mov	r3, sp
 80035f8:	1ddd      	adds	r5, r3, #7
 80035fa:	2300      	movs	r3, #0
    switch( SX1276.Settings.State )
 80035fc:	4c8c      	ldr	r4, [pc, #560]	; (8003830 <SX1276OnDio0Irq+0x23c>)
    volatile uint8_t irqFlags = 0;
 80035fe:	702b      	strb	r3, [r5, #0]
    switch( SX1276.Settings.State )
 8003600:	7923      	ldrb	r3, [r4, #4]
 8003602:	2b01      	cmp	r3, #1
 8003604:	d003      	beq.n	800360e <SX1276OnDio0Irq+0x1a>
 8003606:	2b02      	cmp	r3, #2
 8003608:	d100      	bne.n	800360c <SX1276OnDio0Irq+0x18>
 800360a:	e0f8      	b.n	80037fe <SX1276OnDio0Irq+0x20a>
}
 800360c:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
            switch( SX1276.Settings.Modem )
 800360e:	7963      	ldrb	r3, [r4, #5]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d024      	beq.n	800365e <SX1276OnDio0Irq+0x6a>
 8003614:	2b01      	cmp	r3, #1
 8003616:	d1f9      	bne.n	800360c <SX1276OnDio0Irq+0x18>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_RXDONE );
 8003618:	2140      	movs	r1, #64	; 0x40
 800361a:	2012      	movs	r0, #18
 800361c:	f7fe fee1 	bl	80023e2 <SX1276Write>
                    irqFlags = SX1276Read( REG_LR_IRQFLAGS );
 8003620:	2012      	movs	r0, #18
 8003622:	f7fe ff31 	bl	8002488 <SX1276Read>
                    if( ( irqFlags & RFLR_IRQFLAGS_PAYLOADCRCERROR_MASK ) == RFLR_IRQFLAGS_PAYLOADCRCERROR )
 8003626:	2120      	movs	r1, #32
                    irqFlags = SX1276Read( REG_LR_IRQFLAGS );
 8003628:	7028      	strb	r0, [r5, #0]
                    if( ( irqFlags & RFLR_IRQFLAGS_PAYLOADCRCERROR_MASK ) == RFLR_IRQFLAGS_PAYLOADCRCERROR )
 800362a:	782b      	ldrb	r3, [r5, #0]
 800362c:	4f81      	ldr	r7, [pc, #516]	; (8003834 <SX1276OnDio0Irq+0x240>)
 800362e:	4e82      	ldr	r6, [pc, #520]	; (8003838 <SX1276OnDio0Irq+0x244>)
 8003630:	420b      	tst	r3, r1
 8003632:	d100      	bne.n	8003636 <SX1276OnDio0Irq+0x42>
 8003634:	e096      	b.n	8003764 <SX1276OnDio0Irq+0x170>
                        SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_PAYLOADCRCERROR );
 8003636:	2012      	movs	r0, #18
 8003638:	f7fe fed3 	bl	80023e2 <SX1276Write>
                        if( SX1276.Settings.LoRa.RxContinuous == false )
 800363c:	0023      	movs	r3, r4
 800363e:	3356      	adds	r3, #86	; 0x56
 8003640:	781b      	ldrb	r3, [r3, #0]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d100      	bne.n	8003648 <SX1276OnDio0Irq+0x54>
                            SX1276.Settings.State = RF_IDLE;
 8003646:	7123      	strb	r3, [r4, #4]
                        TimerStop( &RxTimeoutTimer );
 8003648:	0038      	movs	r0, r7
 800364a:	f002 fc15 	bl	8005e78 <TimerStop>
                        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError != NULL ) )
 800364e:	6873      	ldr	r3, [r6, #4]
 8003650:	2b00      	cmp	r3, #0
 8003652:	d0db      	beq.n	800360c <SX1276OnDio0Irq+0x18>
 8003654:	691b      	ldr	r3, [r3, #16]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d0d8      	beq.n	800360c <SX1276OnDio0Irq+0x18>
                            RadioEvents->RxError( );
 800365a:	4798      	blx	r3
 800365c:	e7d6      	b.n	800360c <SX1276OnDio0Irq+0x18>
                if( SX1276.Settings.Fsk.CrcOn == true )
 800365e:	1d63      	adds	r3, r4, #5
 8003660:	7fdb      	ldrb	r3, [r3, #31]
 8003662:	4e76      	ldr	r6, [pc, #472]	; (800383c <SX1276OnDio0Irq+0x248>)
 8003664:	4f74      	ldr	r7, [pc, #464]	; (8003838 <SX1276OnDio0Irq+0x244>)
 8003666:	2b00      	cmp	r3, #0
 8003668:	d037      	beq.n	80036da <SX1276OnDio0Irq+0xe6>
                    irqFlags = SX1276Read( REG_IRQFLAGS2 );
 800366a:	203f      	movs	r0, #63	; 0x3f
 800366c:	f7fe ff0c 	bl	8002488 <SX1276Read>
 8003670:	7028      	strb	r0, [r5, #0]
                    if( ( irqFlags & RF_IRQFLAGS2_CRCOK ) != RF_IRQFLAGS2_CRCOK )
 8003672:	782b      	ldrb	r3, [r5, #0]
 8003674:	079b      	lsls	r3, r3, #30
 8003676:	d430      	bmi.n	80036da <SX1276OnDio0Irq+0xe6>
                        SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI | 
 8003678:	210b      	movs	r1, #11
 800367a:	203e      	movs	r0, #62	; 0x3e
 800367c:	f7fe feb1 	bl	80023e2 <SX1276Write>
                        SX1276Write( REG_IRQFLAGS2, RF_IRQFLAGS2_FIFOOVERRUN );
 8003680:	2110      	movs	r1, #16
 8003682:	203f      	movs	r0, #63	; 0x3f
 8003684:	f7fe fead 	bl	80023e2 <SX1276Write>
                        TimerStop( &RxTimeoutTimer );
 8003688:	486a      	ldr	r0, [pc, #424]	; (8003834 <SX1276OnDio0Irq+0x240>)
 800368a:	f002 fbf5 	bl	8005e78 <TimerStop>
                        if( SX1276.Settings.Fsk.RxContinuous == false )
 800368e:	1de3      	adds	r3, r4, #7
 8003690:	7fdd      	ldrb	r5, [r3, #31]
 8003692:	2d00      	cmp	r5, #0
 8003694:	d114      	bne.n	80036c0 <SX1276OnDio0Irq+0xcc>
                            TimerStop( &RxTimeoutSyncWord );
 8003696:	0030      	movs	r0, r6
 8003698:	f002 fbee 	bl	8005e78 <TimerStop>
                            SX1276.Settings.State = RF_IDLE;
 800369c:	7125      	strb	r5, [r4, #4]
                        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError != NULL ) )
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d003      	beq.n	80036ac <SX1276OnDio0Irq+0xb8>
 80036a4:	691b      	ldr	r3, [r3, #16]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d000      	beq.n	80036ac <SX1276OnDio0Irq+0xb8>
                            RadioEvents->RxError( );
 80036aa:	4798      	blx	r3
                        SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 80036ac:	0022      	movs	r2, r4
 80036ae:	2300      	movs	r3, #0
 80036b0:	3230      	adds	r2, #48	; 0x30
 80036b2:	7013      	strb	r3, [r2, #0]
                        SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 80036b4:	0022      	movs	r2, r4
 80036b6:	3231      	adds	r2, #49	; 0x31
 80036b8:	7013      	strb	r3, [r2, #0]
                        SX1276.Settings.FskPacketHandler.NbBytes = 0;
 80036ba:	87a3      	strh	r3, [r4, #60]	; 0x3c
                        SX1276.Settings.FskPacketHandler.Size = 0;
 80036bc:	8763      	strh	r3, [r4, #58]	; 0x3a
                        break;
 80036be:	e7a5      	b.n	800360c <SX1276OnDio0Irq+0x18>
                            SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 80036c0:	200d      	movs	r0, #13
 80036c2:	f7fe fee1 	bl	8002488 <SX1276Read>
 80036c6:	2140      	movs	r1, #64	; 0x40
 80036c8:	4301      	orrs	r1, r0
 80036ca:	b2c9      	uxtb	r1, r1
 80036cc:	200d      	movs	r0, #13
 80036ce:	f7fe fe88 	bl	80023e2 <SX1276Write>
                            TimerStart( &RxTimeoutSyncWord );
 80036d2:	0030      	movs	r0, r6
 80036d4:	f002 fb5e 	bl	8005d94 <TimerStart>
 80036d8:	e7e1      	b.n	800369e <SX1276OnDio0Irq+0xaa>
                if( ( SX1276.Settings.FskPacketHandler.Size == 0 ) && ( SX1276.Settings.FskPacketHandler.NbBytes == 0 ) )
 80036da:	8f61      	ldrh	r1, [r4, #58]	; 0x3a
 80036dc:	4d58      	ldr	r5, [pc, #352]	; (8003840 <SX1276OnDio0Irq+0x24c>)
 80036de:	2900      	cmp	r1, #0
 80036e0:	d131      	bne.n	8003746 <SX1276OnDio0Irq+0x152>
 80036e2:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d12e      	bne.n	8003746 <SX1276OnDio0Irq+0x152>
                    if( SX1276.Settings.Fsk.FixLen == false )
 80036e8:	1ce3      	adds	r3, r4, #3
 80036ea:	7fdb      	ldrb	r3, [r3, #31]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d125      	bne.n	800373c <SX1276OnDio0Irq+0x148>
                        SX1276ReadFifo( ( uint8_t* )&SX1276.Settings.FskPacketHandler.Size, 1 );
 80036f0:	3101      	adds	r1, #1
 80036f2:	4854      	ldr	r0, [pc, #336]	; (8003844 <SX1276OnDio0Irq+0x250>)
 80036f4:	f7ff ff76 	bl	80035e4 <SX1276ReadFifo>
                    SX1276ReadFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 80036f8:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
 80036fa:	8f61      	ldrh	r1, [r4, #58]	; 0x3a
                    SX1276ReadFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 80036fc:	1ac9      	subs	r1, r1, r3
 80036fe:	1d28      	adds	r0, r5, #4
 8003700:	18c0      	adds	r0, r0, r3
 8003702:	b2c9      	uxtb	r1, r1
 8003704:	f7ff ff6e 	bl	80035e4 <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8003708:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
                TimerStop( &RxTimeoutTimer );
 800370a:	484a      	ldr	r0, [pc, #296]	; (8003834 <SX1276OnDio0Irq+0x240>)
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 800370c:	87a3      	strh	r3, [r4, #60]	; 0x3c
                TimerStop( &RxTimeoutTimer );
 800370e:	f002 fbb3 	bl	8005e78 <TimerStop>
                if( SX1276.Settings.Fsk.RxContinuous == false )
 8003712:	1de3      	adds	r3, r4, #7
 8003714:	7fdb      	ldrb	r3, [r3, #31]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d117      	bne.n	800374a <SX1276OnDio0Irq+0x156>
                    TimerStop( &RxTimeoutSyncWord );
 800371a:	0030      	movs	r0, r6
                    SX1276.Settings.State = RF_IDLE;
 800371c:	7123      	strb	r3, [r4, #4]
                    TimerStop( &RxTimeoutSyncWord );
 800371e:	f002 fbab 	bl	8005e78 <TimerStop>
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d0c1      	beq.n	80036ac <SX1276OnDio0Irq+0xb8>
 8003728:	689e      	ldr	r6, [r3, #8]
 800372a:	2e00      	cmp	r6, #0
 800372c:	d0be      	beq.n	80036ac <SX1276OnDio0Irq+0xb8>
                    RadioEvents->RxDone( RxTxBuffer, SX1276.Settings.FskPacketHandler.Size, SX1276.Settings.FskPacketHandler.RssiValue, 0 );
 800372e:	2232      	movs	r2, #50	; 0x32
 8003730:	8f61      	ldrh	r1, [r4, #58]	; 0x3a
 8003732:	56a2      	ldrsb	r2, [r4, r2]
 8003734:	1d28      	adds	r0, r5, #4
 8003736:	2300      	movs	r3, #0
 8003738:	47b0      	blx	r6
 800373a:	e7b7      	b.n	80036ac <SX1276OnDio0Irq+0xb8>
                        SX1276.Settings.FskPacketHandler.Size = SX1276Read( REG_PAYLOADLENGTH );
 800373c:	2032      	movs	r0, #50	; 0x32
 800373e:	f7fe fea3 	bl	8002488 <SX1276Read>
 8003742:	8760      	strh	r0, [r4, #58]	; 0x3a
 8003744:	e7d8      	b.n	80036f8 <SX1276OnDio0Irq+0x104>
                    SX1276ReadFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8003746:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
 8003748:	e7d8      	b.n	80036fc <SX1276OnDio0Irq+0x108>
                    SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 800374a:	200d      	movs	r0, #13
 800374c:	f7fe fe9c 	bl	8002488 <SX1276Read>
 8003750:	2140      	movs	r1, #64	; 0x40
 8003752:	4301      	orrs	r1, r0
 8003754:	b2c9      	uxtb	r1, r1
 8003756:	200d      	movs	r0, #13
 8003758:	f7fe fe43 	bl	80023e2 <SX1276Write>
                    TimerStart( &RxTimeoutSyncWord );
 800375c:	0030      	movs	r0, r6
 800375e:	f002 fb19 	bl	8005d94 <TimerStart>
 8003762:	e7de      	b.n	8003722 <SX1276OnDio0Irq+0x12e>
                    SX1276.Settings.LoRaPacketHandler.SnrValue = SX1276Read( REG_LR_PKTSNRVALUE );
 8003764:	2019      	movs	r0, #25
 8003766:	f7fe fe8f 	bl	8002488 <SX1276Read>
 800376a:	0023      	movs	r3, r4
 800376c:	b240      	sxtb	r0, r0
 800376e:	3360      	adds	r3, #96	; 0x60
 8003770:	7018      	strb	r0, [r3, #0]
                        snr = ( SX1276.Settings.LoRaPacketHandler.SnrValue & 0xFF ) >> 2;
 8003772:	1085      	asrs	r5, r0, #2
                    if( SX1276.Settings.LoRaPacketHandler.SnrValue & 0x80 ) // The SNR sign bit is 1
 8003774:	2800      	cmp	r0, #0
 8003776:	da03      	bge.n	8003780 <SX1276OnDio0Irq+0x18c>
                        snr = ( ( ~SX1276.Settings.LoRaPacketHandler.SnrValue + 1 ) & 0xFF ) >> 2;
 8003778:	4245      	negs	r5, r0
 800377a:	10ad      	asrs	r5, r5, #2
                        snr = -snr;
 800377c:	426d      	negs	r5, r5
 800377e:	b26d      	sxtb	r5, r5
                    int16_t rssi = SX1276Read( REG_LR_PKTRSSIVALUE );
 8003780:	201a      	movs	r0, #26
 8003782:	f7fe fe81 	bl	8002488 <SX1276Read>
 8003786:	b203      	sxth	r3, r0
 8003788:	492f      	ldr	r1, [pc, #188]	; (8003848 <SX1276OnDio0Irq+0x254>)
 800378a:	111b      	asrs	r3, r3, #4
                    if( snr < 0 )
 800378c:	2d00      	cmp	r5, #0
 800378e:	da00      	bge.n	8003792 <SX1276OnDio0Irq+0x19e>
 8003790:	1940      	adds	r0, r0, r5
 8003792:	0022      	movs	r2, r4
                        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 8003794:	68a5      	ldr	r5, [r4, #8]
 8003796:	3262      	adds	r2, #98	; 0x62
 8003798:	428d      	cmp	r5, r1
 800379a:	d92e      	bls.n	80037fa <SX1276OnDio0Irq+0x206>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 );
 800379c:	389d      	subs	r0, #157	; 0x9d
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 );
 800379e:	18c0      	adds	r0, r0, r3
 80037a0:	8010      	strh	r0, [r2, #0]
                    SX1276.Settings.LoRaPacketHandler.Size = SX1276Read( REG_LR_RXNBBYTES );
 80037a2:	2013      	movs	r0, #19
 80037a4:	f7fe fe70 	bl	8002488 <SX1276Read>
 80037a8:	0023      	movs	r3, r4
                    SX1276ReadFifo( RxTxBuffer, SX1276.Settings.LoRaPacketHandler.Size );
 80037aa:	4d25      	ldr	r5, [pc, #148]	; (8003840 <SX1276OnDio0Irq+0x24c>)
                    SX1276.Settings.LoRaPacketHandler.Size = SX1276Read( REG_LR_RXNBBYTES );
 80037ac:	3364      	adds	r3, #100	; 0x64
 80037ae:	7018      	strb	r0, [r3, #0]
 80037b0:	0001      	movs	r1, r0
                    SX1276ReadFifo( RxTxBuffer, SX1276.Settings.LoRaPacketHandler.Size );
 80037b2:	1d28      	adds	r0, r5, #4
 80037b4:	f7ff ff16 	bl	80035e4 <SX1276ReadFifo>
                    if( SX1276.Settings.LoRa.RxContinuous == false )
 80037b8:	0023      	movs	r3, r4
 80037ba:	3356      	adds	r3, #86	; 0x56
 80037bc:	781b      	ldrb	r3, [r3, #0]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d100      	bne.n	80037c4 <SX1276OnDio0Irq+0x1d0>
                        SX1276.Settings.State = RF_IDLE;
 80037c2:	7123      	strb	r3, [r4, #4]
                    TimerStop( &RxTimeoutTimer );
 80037c4:	0038      	movs	r0, r7
 80037c6:	f002 fb57 	bl	8005e78 <TimerStop>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 80037ca:	6873      	ldr	r3, [r6, #4]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d100      	bne.n	80037d2 <SX1276OnDio0Irq+0x1de>
 80037d0:	e71c      	b.n	800360c <SX1276OnDio0Irq+0x18>
 80037d2:	689e      	ldr	r6, [r3, #8]
 80037d4:	2e00      	cmp	r6, #0
 80037d6:	d100      	bne.n	80037da <SX1276OnDio0Irq+0x1e6>
 80037d8:	e718      	b.n	800360c <SX1276OnDio0Irq+0x18>
                        RadioEvents->RxDone( RxTxBuffer, SX1276.Settings.LoRaPacketHandler.Size, SX1276.Settings.LoRaPacketHandler.RssiValue, SX1276.Settings.LoRaPacketHandler.SnrValue );
 80037da:	0023      	movs	r3, r4
 80037dc:	0022      	movs	r2, r4
 80037de:	3360      	adds	r3, #96	; 0x60
 80037e0:	781b      	ldrb	r3, [r3, #0]
 80037e2:	3262      	adds	r2, #98	; 0x62
 80037e4:	3464      	adds	r4, #100	; 0x64
 80037e6:	2100      	movs	r1, #0
 80037e8:	5e52      	ldrsh	r2, [r2, r1]
 80037ea:	1d28      	adds	r0, r5, #4
 80037ec:	b25b      	sxtb	r3, r3
 80037ee:	7821      	ldrb	r1, [r4, #0]
 80037f0:	47b0      	blx	r6
                        PRINTF("rxDone\n\r");
 80037f2:	4816      	ldr	r0, [pc, #88]	; (800384c <SX1276OnDio0Irq+0x258>)
                   PRINTF("txDone\n\r");
 80037f4:	f003 fb1e 	bl	8006e34 <vcom_Send>
}
 80037f8:	e708      	b.n	800360c <SX1276OnDio0Irq+0x18>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 );
 80037fa:	38a4      	subs	r0, #164	; 0xa4
 80037fc:	e7cf      	b.n	800379e <SX1276OnDio0Irq+0x1aa>
            TimerStop( &TxTimeoutTimer );
 80037fe:	4814      	ldr	r0, [pc, #80]	; (8003850 <SX1276OnDio0Irq+0x25c>)
 8003800:	f002 fb3a 	bl	8005e78 <TimerStop>
            switch( SX1276.Settings.Modem )
 8003804:	7963      	ldrb	r3, [r4, #5]
 8003806:	2b01      	cmp	r3, #1
 8003808:	d103      	bne.n	8003812 <SX1276OnDio0Irq+0x21e>
                SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_TXDONE );
 800380a:	2108      	movs	r1, #8
 800380c:	2012      	movs	r0, #18
 800380e:	f7fe fde8 	bl	80023e2 <SX1276Write>
                SX1276.Settings.State = RF_IDLE;
 8003812:	2300      	movs	r3, #0
 8003814:	7123      	strb	r3, [r4, #4]
                if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 8003816:	4b08      	ldr	r3, [pc, #32]	; (8003838 <SX1276OnDio0Irq+0x244>)
 8003818:	685b      	ldr	r3, [r3, #4]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d100      	bne.n	8003820 <SX1276OnDio0Irq+0x22c>
 800381e:	e6f5      	b.n	800360c <SX1276OnDio0Irq+0x18>
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d100      	bne.n	8003828 <SX1276OnDio0Irq+0x234>
 8003826:	e6f1      	b.n	800360c <SX1276OnDio0Irq+0x18>
                    RadioEvents->TxDone( );
 8003828:	4798      	blx	r3
                   PRINTF("txDone\n\r");
 800382a:	480a      	ldr	r0, [pc, #40]	; (8003854 <SX1276OnDio0Irq+0x260>)
 800382c:	e7e2      	b.n	80037f4 <SX1276OnDio0Irq+0x200>
 800382e:	46c0      	nop			; (mov r8, r8)
 8003830:	20000594 	.word	0x20000594
 8003834:	200005fc 	.word	0x200005fc
 8003838:	20000210 	.word	0x20000210
 800383c:	20000580 	.word	0x20000580
 8003840:	20000110 	.word	0x20000110
 8003844:	200005ce 	.word	0x200005ce
 8003848:	1f4add40 	.word	0x1f4add40
 800384c:	08007e04 	.word	0x08007e04
 8003850:	2000056c 	.word	0x2000056c
 8003854:	08007e0d 	.word	0x08007e0d

08003858 <SX1276OnDio1Irq>:
{
 8003858:	b570      	push	{r4, r5, r6, lr}
    switch( SX1276.Settings.State )
 800385a:	4c31      	ldr	r4, [pc, #196]	; (8003920 <SX1276OnDio1Irq+0xc8>)
 800385c:	7921      	ldrb	r1, [r4, #4]
 800385e:	2901      	cmp	r1, #1
 8003860:	d002      	beq.n	8003868 <SX1276OnDio1Irq+0x10>
 8003862:	2902      	cmp	r1, #2
 8003864:	d045      	beq.n	80038f2 <SX1276OnDio1Irq+0x9a>
}
 8003866:	bd70      	pop	{r4, r5, r6, pc}
            switch( SX1276.Settings.Modem )
 8003868:	7963      	ldrb	r3, [r4, #5]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d016      	beq.n	800389c <SX1276OnDio1Irq+0x44>
 800386e:	2b01      	cmp	r3, #1
 8003870:	d1f9      	bne.n	8003866 <SX1276OnDio1Irq+0xe>
                TimerStop( &RxTimeoutTimer );
 8003872:	482c      	ldr	r0, [pc, #176]	; (8003924 <SX1276OnDio1Irq+0xcc>)
 8003874:	f002 fb00 	bl	8005e78 <TimerStop>
                SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_RXTIMEOUT );
 8003878:	2180      	movs	r1, #128	; 0x80
 800387a:	2012      	movs	r0, #18
 800387c:	f7fe fdb1 	bl	80023e2 <SX1276Write>
                SX1276.Settings.State = RF_IDLE;
 8003880:	2300      	movs	r3, #0
 8003882:	7123      	strb	r3, [r4, #4]
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8003884:	4b28      	ldr	r3, [pc, #160]	; (8003928 <SX1276OnDio1Irq+0xd0>)
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d0ec      	beq.n	8003866 <SX1276OnDio1Irq+0xe>
 800388c:	68db      	ldr	r3, [r3, #12]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d0e9      	beq.n	8003866 <SX1276OnDio1Irq+0xe>
                    RadioEvents->RxTimeout( );
 8003892:	4798      	blx	r3
                    PRINTF("rxTimeOut\n\r");
 8003894:	4825      	ldr	r0, [pc, #148]	; (800392c <SX1276OnDio1Irq+0xd4>)
 8003896:	f003 facd 	bl	8006e34 <vcom_Send>
 800389a:	e7e4      	b.n	8003866 <SX1276OnDio1Irq+0xe>
                if( ( SX1276.Settings.FskPacketHandler.Size == 0 ) && ( SX1276.Settings.FskPacketHandler.NbBytes == 0 ) )
 800389c:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d109      	bne.n	80038b6 <SX1276OnDio1Irq+0x5e>
 80038a2:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d106      	bne.n	80038b6 <SX1276OnDio1Irq+0x5e>
                    if( SX1276.Settings.Fsk.FixLen == false )
 80038a8:	1ce3      	adds	r3, r4, #3
 80038aa:	7fdb      	ldrb	r3, [r3, #31]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d114      	bne.n	80038da <SX1276OnDio1Irq+0x82>
                        SX1276ReadFifo( ( uint8_t* )&SX1276.Settings.FskPacketHandler.Size, 1 );
 80038b0:	481f      	ldr	r0, [pc, #124]	; (8003930 <SX1276OnDio1Irq+0xd8>)
 80038b2:	f7ff fe97 	bl	80035e4 <SX1276ReadFifo>
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) > SX1276.Settings.FskPacketHandler.FifoThresh )
 80038b6:	0025      	movs	r5, r4
 80038b8:	353e      	adds	r5, #62	; 0x3e
 80038ba:	8f62      	ldrh	r2, [r4, #58]	; 0x3a
 80038bc:	8fa6      	ldrh	r6, [r4, #60]	; 0x3c
 80038be:	7829      	ldrb	r1, [r5, #0]
 80038c0:	1b92      	subs	r2, r2, r6
 80038c2:	481c      	ldr	r0, [pc, #112]	; (8003934 <SX1276OnDio1Irq+0xdc>)
 80038c4:	428a      	cmp	r2, r1
 80038c6:	dd0d      	ble.n	80038e4 <SX1276OnDio1Irq+0x8c>
                    SX1276ReadFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.FifoThresh );
 80038c8:	3004      	adds	r0, #4
 80038ca:	1980      	adds	r0, r0, r6
 80038cc:	f7ff fe8a 	bl	80035e4 <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
 80038d0:	782b      	ldrb	r3, [r5, #0]
 80038d2:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
 80038d4:	189b      	adds	r3, r3, r2
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes;
 80038d6:	87a3      	strh	r3, [r4, #60]	; 0x3c
}
 80038d8:	e7c5      	b.n	8003866 <SX1276OnDio1Irq+0xe>
                        SX1276.Settings.FskPacketHandler.Size = SX1276Read( REG_PAYLOADLENGTH );
 80038da:	2032      	movs	r0, #50	; 0x32
 80038dc:	f7fe fdd4 	bl	8002488 <SX1276Read>
 80038e0:	8760      	strh	r0, [r4, #58]	; 0x3a
 80038e2:	e7e8      	b.n	80038b6 <SX1276OnDio1Irq+0x5e>
                    SX1276ReadFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 80038e4:	3004      	adds	r0, #4
 80038e6:	b2d1      	uxtb	r1, r2
 80038e8:	1980      	adds	r0, r0, r6
 80038ea:	f7ff fe7b 	bl	80035e4 <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes;
 80038ee:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
 80038f0:	e7f1      	b.n	80038d6 <SX1276OnDio1Irq+0x7e>
            switch( SX1276.Settings.Modem )
 80038f2:	7963      	ldrb	r3, [r4, #5]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d1b6      	bne.n	8003866 <SX1276OnDio1Irq+0xe>
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) > SX1276.Settings.FskPacketHandler.ChunkSize )
 80038f8:	0025      	movs	r5, r4
 80038fa:	353f      	adds	r5, #63	; 0x3f
 80038fc:	8f62      	ldrh	r2, [r4, #58]	; 0x3a
 80038fe:	8fa6      	ldrh	r6, [r4, #60]	; 0x3c
 8003900:	7829      	ldrb	r1, [r5, #0]
 8003902:	1b92      	subs	r2, r2, r6
 8003904:	480b      	ldr	r0, [pc, #44]	; (8003934 <SX1276OnDio1Irq+0xdc>)
 8003906:	428a      	cmp	r2, r1
 8003908:	dd04      	ble.n	8003914 <SX1276OnDio1Irq+0xbc>
                    SX1276WriteFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.ChunkSize );
 800390a:	3004      	adds	r0, #4
 800390c:	1980      	adds	r0, r0, r6
 800390e:	f7ff fde3 	bl	80034d8 <SX1276WriteFifo>
 8003912:	e7dd      	b.n	80038d0 <SX1276OnDio1Irq+0x78>
                    SX1276WriteFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8003914:	3004      	adds	r0, #4
 8003916:	b2d1      	uxtb	r1, r2
 8003918:	1980      	adds	r0, r0, r6
 800391a:	f7ff fddd 	bl	80034d8 <SX1276WriteFifo>
 800391e:	e7e6      	b.n	80038ee <SX1276OnDio1Irq+0x96>
 8003920:	20000594 	.word	0x20000594
 8003924:	200005fc 	.word	0x200005fc
 8003928:	20000210 	.word	0x20000210
 800392c:	08007e16 	.word	0x08007e16
 8003930:	200005ce 	.word	0x200005ce
 8003934:	20000110 	.word	0x20000110

08003938 <SX1276SetMaxPayloadLength>:
{
 8003938:	b570      	push	{r4, r5, r6, lr}
 800393a:	0004      	movs	r4, r0
 800393c:	000d      	movs	r5, r1
    SX1276SetModem( modem );
 800393e:	f7ff f8f1 	bl	8002b24 <SX1276SetModem>
    switch( modem )
 8003942:	2c00      	cmp	r4, #0
 8003944:	d002      	beq.n	800394c <SX1276SetMaxPayloadLength+0x14>
 8003946:	2c01      	cmp	r4, #1
 8003948:	d00a      	beq.n	8003960 <SX1276SetMaxPayloadLength+0x28>
}
 800394a:	bd70      	pop	{r4, r5, r6, pc}
        if( SX1276.Settings.Fsk.FixLen == false )
 800394c:	4b06      	ldr	r3, [pc, #24]	; (8003968 <SX1276SetMaxPayloadLength+0x30>)
 800394e:	3303      	adds	r3, #3
 8003950:	7fdb      	ldrb	r3, [r3, #31]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d1f9      	bne.n	800394a <SX1276SetMaxPayloadLength+0x12>
            SX1276Write( REG_PAYLOADLENGTH, max );
 8003956:	0029      	movs	r1, r5
 8003958:	2032      	movs	r0, #50	; 0x32
        SX1276Write( REG_LR_PAYLOADMAXLENGTH, max );
 800395a:	f7fe fd42 	bl	80023e2 <SX1276Write>
}
 800395e:	e7f4      	b.n	800394a <SX1276SetMaxPayloadLength+0x12>
        SX1276Write( REG_LR_PAYLOADMAXLENGTH, max );
 8003960:	0029      	movs	r1, r5
 8003962:	2023      	movs	r0, #35	; 0x23
 8003964:	e7f9      	b.n	800395a <SX1276SetMaxPayloadLength+0x22>
 8003966:	46c0      	nop			; (mov r8, r8)
 8003968:	20000594 	.word	0x20000594

0800396c <SX1276GetRadioWakeUpTime>:
  return (uint32_t) LoRaBoardCallbacks->SX1276BoardGetWakeTime( ) + RADIO_WAKEUP_TIME;// BOARD_WAKEUP_TIME;
 800396c:	4b03      	ldr	r3, [pc, #12]	; (800397c <SX1276GetRadioWakeUpTime+0x10>)
{
 800396e:	b510      	push	{r4, lr}
  return (uint32_t) LoRaBoardCallbacks->SX1276BoardGetWakeTime( ) + RADIO_WAKEUP_TIME;// BOARD_WAKEUP_TIME;
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	4798      	blx	r3
 8003976:	3002      	adds	r0, #2
}
 8003978:	bd10      	pop	{r4, pc}
 800397a:	46c0      	nop			; (mov r8, r8)
 800397c:	20000110 	.word	0x20000110

08003980 <SX1276GetWakeTime>:
};

uint32_t SX1276GetWakeTime( void )
{
  return  BOARD_WAKEUP_TIME;
}
 8003980:	2005      	movs	r0, #5
 8003982:	4770      	bx	lr

08003984 <SX1276CheckRfFrequency>:

bool SX1276CheckRfFrequency( uint32_t frequency )
{
    // Implement check. Currently all frequencies are supported
    return true;
}
 8003984:	2001      	movs	r0, #1
 8003986:	4770      	bx	lr

08003988 <SX1276SetRfTxPower>:
{
 8003988:	b570      	push	{r4, r5, r6, lr}
 800398a:	0005      	movs	r5, r0
    paConfig = SX1276Read( REG_PACONFIG );
 800398c:	2009      	movs	r0, #9
 800398e:	f7fe fd7b 	bl	8002488 <SX1276Read>
    paDac = SX1276Read( REG_PADAC );
 8003992:	204d      	movs	r0, #77	; 0x4d
 8003994:	f7fe fd78 	bl	8002488 <SX1276Read>
 8003998:	1c29      	adds	r1, r5, #0
 800399a:	0004      	movs	r4, r0
 800399c:	2d0e      	cmp	r5, #14
 800399e:	dd00      	ble.n	80039a2 <SX1276SetRfTxPower+0x1a>
 80039a0:	210e      	movs	r1, #14
        paConfig = ( paConfig & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( uint8_t )( ( uint16_t )( power + 1 ) & 0x0F );
 80039a2:	060b      	lsls	r3, r1, #24
 80039a4:	d501      	bpl.n	80039aa <SX1276SetRfTxPower+0x22>
 80039a6:	4b07      	ldr	r3, [pc, #28]	; (80039c4 <SX1276SetRfTxPower+0x3c>)
 80039a8:	7819      	ldrb	r1, [r3, #0]
 80039aa:	2370      	movs	r3, #112	; 0x70
 80039ac:	3101      	adds	r1, #1
 80039ae:	4319      	orrs	r1, r3
    SX1276Write( REG_PACONFIG, paConfig );
 80039b0:	b2c9      	uxtb	r1, r1
 80039b2:	2009      	movs	r0, #9
 80039b4:	f7fe fd15 	bl	80023e2 <SX1276Write>
    SX1276Write( REG_PADAC, paDac );
 80039b8:	0021      	movs	r1, r4
 80039ba:	204d      	movs	r0, #77	; 0x4d
 80039bc:	f7fe fd11 	bl	80023e2 <SX1276Write>
}
 80039c0:	bd70      	pop	{r4, r5, r6, pc}
 80039c2:	46c0      	nop			; (mov r8, r8)
 80039c4:	08007e22 	.word	0x08007e22

080039c8 <SX1276IoInit>:
{
 80039c8:	b530      	push	{r4, r5, lr}
 80039ca:	b087      	sub	sp, #28
  GPIO_InitTypeDef initStruct={0};
 80039cc:	2214      	movs	r2, #20
 80039ce:	2100      	movs	r1, #0
 80039d0:	a801      	add	r0, sp, #4
 80039d2:	f003 fb6e 	bl	80070b2 <memset>
  SX1276BoardInit( &BoardCallbacks );
 80039d6:	4815      	ldr	r0, [pc, #84]	; (8003a2c <SX1276IoInit+0x64>)
 80039d8:	f7fe fcb0 	bl	800233c <SX1276BoardInit>
  initStruct.Mode =GPIO_MODE_IT_RISING;
 80039dc:	4b14      	ldr	r3, [pc, #80]	; (8003a30 <SX1276IoInit+0x68>)
  initStruct.Pull = GPIO_PULLUP;
 80039de:	2401      	movs	r4, #1
  initStruct.Mode =GPIO_MODE_IT_RISING;
 80039e0:	9302      	str	r3, [sp, #8]
  initStruct.Speed = GPIO_SPEED_HIGH;
 80039e2:	2303      	movs	r3, #3
  HW_GPIO_Init( RADIO_DIO_0_PORT, RADIO_DIO_0_PIN, &initStruct );
 80039e4:	4d13      	ldr	r5, [pc, #76]	; (8003a34 <SX1276IoInit+0x6c>)
 80039e6:	aa01      	add	r2, sp, #4
 80039e8:	0028      	movs	r0, r5
 80039ea:	2110      	movs	r1, #16
  initStruct.Speed = GPIO_SPEED_HIGH;
 80039ec:	9304      	str	r3, [sp, #16]
  initStruct.Pull = GPIO_PULLUP;
 80039ee:	9403      	str	r4, [sp, #12]
  HW_GPIO_Init( RADIO_DIO_0_PORT, RADIO_DIO_0_PIN, &initStruct );
 80039f0:	f002 fade 	bl	8005fb0 <HW_GPIO_Init>
  HW_GPIO_Init( RADIO_DIO_1_PORT, RADIO_DIO_1_PIN, &initStruct );
 80039f4:	aa01      	add	r2, sp, #4
 80039f6:	0028      	movs	r0, r5
 80039f8:	2102      	movs	r1, #2
 80039fa:	f002 fad9 	bl	8005fb0 <HW_GPIO_Init>
  HW_GPIO_Init( RADIO_DIO_2_PORT, RADIO_DIO_2_PIN, &initStruct );
 80039fe:	aa01      	add	r2, sp, #4
 8003a00:	0021      	movs	r1, r4
 8003a02:	0028      	movs	r0, r5
 8003a04:	f002 fad4 	bl	8005fb0 <HW_GPIO_Init>
  HW_GPIO_Init( RADIO_DIO_3_PORT, RADIO_DIO_3_PIN, &initStruct );
 8003a08:	2180      	movs	r1, #128	; 0x80
 8003a0a:	aa01      	add	r2, sp, #4
 8003a0c:	0189      	lsls	r1, r1, #6
 8003a0e:	480a      	ldr	r0, [pc, #40]	; (8003a38 <SX1276IoInit+0x70>)
 8003a10:	f002 face 	bl	8005fb0 <HW_GPIO_Init>
  HW_GPIO_Init( RADIO_TCXO_VCC_PORT, RADIO_TCXO_VCC_PIN, &initStruct );
 8003a14:	2180      	movs	r1, #128	; 0x80
 8003a16:	20a0      	movs	r0, #160	; 0xa0
  initStruct.Pull = GPIO_NOPULL;  
 8003a18:	2300      	movs	r3, #0
  HW_GPIO_Init( RADIO_TCXO_VCC_PORT, RADIO_TCXO_VCC_PIN, &initStruct );
 8003a1a:	aa01      	add	r2, sp, #4
 8003a1c:	0149      	lsls	r1, r1, #5
 8003a1e:	05c0      	lsls	r0, r0, #23
  initStruct.Mode =GPIO_MODE_OUTPUT_PP;
 8003a20:	9402      	str	r4, [sp, #8]
  initStruct.Pull = GPIO_NOPULL;  
 8003a22:	9303      	str	r3, [sp, #12]
  HW_GPIO_Init( RADIO_TCXO_VCC_PORT, RADIO_TCXO_VCC_PIN, &initStruct );
 8003a24:	f002 fac4 	bl	8005fb0 <HW_GPIO_Init>
}
 8003a28:	b007      	add	sp, #28
 8003a2a:	bd30      	pop	{r4, r5, pc}
 8003a2c:	2000002c 	.word	0x2000002c
 8003a30:	10110000 	.word	0x10110000
 8003a34:	50000400 	.word	0x50000400
 8003a38:	50000800 	.word	0x50000800

08003a3c <SX1276IoDeInit>:
{
 8003a3c:	b510      	push	{r4, lr}
 8003a3e:	b086      	sub	sp, #24
  HW_GPIO_Init( RADIO_DIO_0_PORT, RADIO_DIO_0_PIN, &initStruct );
 8003a40:	4c0f      	ldr	r4, [pc, #60]	; (8003a80 <SX1276IoDeInit+0x44>)
  GPIO_InitTypeDef initStruct={0};
 8003a42:	2214      	movs	r2, #20
 8003a44:	2100      	movs	r1, #0
 8003a46:	a801      	add	r0, sp, #4
 8003a48:	f003 fb33 	bl	80070b2 <memset>
  initStruct.Mode = GPIO_MODE_IT_RISING ; //GPIO_MODE_ANALOG;
 8003a4c:	4b0d      	ldr	r3, [pc, #52]	; (8003a84 <SX1276IoDeInit+0x48>)
  HW_GPIO_Init( RADIO_DIO_0_PORT, RADIO_DIO_0_PIN, &initStruct );
 8003a4e:	aa01      	add	r2, sp, #4
 8003a50:	0020      	movs	r0, r4
 8003a52:	2110      	movs	r1, #16
  initStruct.Mode = GPIO_MODE_IT_RISING ; //GPIO_MODE_ANALOG;
 8003a54:	9302      	str	r3, [sp, #8]
  HW_GPIO_Init( RADIO_DIO_0_PORT, RADIO_DIO_0_PIN, &initStruct );
 8003a56:	f002 faab 	bl	8005fb0 <HW_GPIO_Init>
  HW_GPIO_Init( RADIO_DIO_1_PORT, RADIO_DIO_1_PIN, &initStruct );
 8003a5a:	aa01      	add	r2, sp, #4
 8003a5c:	0020      	movs	r0, r4
 8003a5e:	2102      	movs	r1, #2
 8003a60:	f002 faa6 	bl	8005fb0 <HW_GPIO_Init>
  HW_GPIO_Init( RADIO_DIO_2_PORT, RADIO_DIO_2_PIN, &initStruct );
 8003a64:	aa01      	add	r2, sp, #4
 8003a66:	0020      	movs	r0, r4
 8003a68:	2101      	movs	r1, #1
 8003a6a:	f002 faa1 	bl	8005fb0 <HW_GPIO_Init>
  HW_GPIO_Init( RADIO_DIO_3_PORT, RADIO_DIO_3_PIN, &initStruct );
 8003a6e:	2180      	movs	r1, #128	; 0x80
 8003a70:	aa01      	add	r2, sp, #4
 8003a72:	0189      	lsls	r1, r1, #6
 8003a74:	4804      	ldr	r0, [pc, #16]	; (8003a88 <SX1276IoDeInit+0x4c>)
 8003a76:	f002 fa9b 	bl	8005fb0 <HW_GPIO_Init>
}
 8003a7a:	b006      	add	sp, #24
 8003a7c:	bd10      	pop	{r4, pc}
 8003a7e:	46c0      	nop			; (mov r8, r8)
 8003a80:	50000400 	.word	0x50000400
 8003a84:	10110000 	.word	0x10110000
 8003a88:	50000800 	.word	0x50000800

08003a8c <SX1276SetAntSwLowPower>:
{
 8003a8c:	b510      	push	{r4, lr}
  GPIO_InitTypeDef initStruct={0};
 8003a8e:	2214      	movs	r2, #20
{
 8003a90:	b086      	sub	sp, #24
    if( status == false )
 8003a92:	2800      	cmp	r0, #0
 8003a94:	d129      	bne.n	8003aea <SX1276SetAntSwLowPower+0x5e>
  GPIO_InitTypeDef initStruct={0};
 8003a96:	0001      	movs	r1, r0
 8003a98:	a801      	add	r0, sp, #4
 8003a9a:	f003 fb0a 	bl	80070b2 <memset>
  initStruct.Mode =GPIO_MODE_OUTPUT_PP;
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	9302      	str	r3, [sp, #8]
  initStruct.Speed = GPIO_SPEED_HIGH;
 8003aa2:	3302      	adds	r3, #2
  HW_GPIO_Init( RADIO_ANT_SWITCH_PORT_RX, RADIO_ANT_SWITCH_PIN_RX, &initStruct  ); 
 8003aa4:	20a0      	movs	r0, #160	; 0xa0
 8003aa6:	aa01      	add	r2, sp, #4
 8003aa8:	2102      	movs	r1, #2
 8003aaa:	05c0      	lsls	r0, r0, #23
  initStruct.Speed = GPIO_SPEED_HIGH;
 8003aac:	9304      	str	r3, [sp, #16]
  HW_GPIO_Init( RADIO_ANT_SWITCH_PORT_RX, RADIO_ANT_SWITCH_PIN_RX, &initStruct  ); 
 8003aae:	f002 fa7f 	bl	8005fb0 <HW_GPIO_Init>
  HW_GPIO_Write( RADIO_ANT_SWITCH_PORT_RX, RADIO_ANT_SWITCH_PIN_RX, 0);
 8003ab2:	20a0      	movs	r0, #160	; 0xa0
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	2102      	movs	r1, #2
 8003ab8:	05c0      	lsls	r0, r0, #23
 8003aba:	f002 faeb 	bl	8006094 <HW_GPIO_Write>
  HW_GPIO_Init( RADIO_ANT_SWITCH_PORT_TX_BOOST, RADIO_ANT_SWITCH_PIN_TX_BOOST, &initStruct  ); 
 8003abe:	aa01      	add	r2, sp, #4
 8003ac0:	2102      	movs	r1, #2
 8003ac2:	480d      	ldr	r0, [pc, #52]	; (8003af8 <SX1276SetAntSwLowPower+0x6c>)
 8003ac4:	f002 fa74 	bl	8005fb0 <HW_GPIO_Init>
  HW_GPIO_Write( RADIO_ANT_SWITCH_PORT_TX_BOOST, RADIO_ANT_SWITCH_PIN_TX_BOOST, 0);
 8003ac8:	2200      	movs	r2, #0
 8003aca:	2102      	movs	r1, #2
 8003acc:	480a      	ldr	r0, [pc, #40]	; (8003af8 <SX1276SetAntSwLowPower+0x6c>)
 8003ace:	f002 fae1 	bl	8006094 <HW_GPIO_Write>
  HW_GPIO_Init( RADIO_ANT_SWITCH_PORT_TX_RFO, RADIO_ANT_SWITCH_PIN_TX_RFO, &initStruct  ); 
 8003ad2:	aa01      	add	r2, sp, #4
 8003ad4:	2104      	movs	r1, #4
 8003ad6:	4808      	ldr	r0, [pc, #32]	; (8003af8 <SX1276SetAntSwLowPower+0x6c>)
 8003ad8:	f002 fa6a 	bl	8005fb0 <HW_GPIO_Init>
  HW_GPIO_Write( RADIO_ANT_SWITCH_PORT_TX_RFO, RADIO_ANT_SWITCH_PIN_TX_RFO, 0);
 8003adc:	2200      	movs	r2, #0
 8003ade:	2104      	movs	r1, #4
 8003ae0:	4805      	ldr	r0, [pc, #20]	; (8003af8 <SX1276SetAntSwLowPower+0x6c>)
 8003ae2:	f002 fad7 	bl	8006094 <HW_GPIO_Write>
}
 8003ae6:	b006      	add	sp, #24
 8003ae8:	bd10      	pop	{r4, pc}
  GPIO_InitTypeDef initStruct={0};
 8003aea:	2100      	movs	r1, #0
 8003aec:	a801      	add	r0, sp, #4
 8003aee:	f003 fae0 	bl	80070b2 <memset>
  initStruct.Mode = GPIO_MODE_ANALOG ;
 8003af2:	2303      	movs	r3, #3
 8003af4:	9302      	str	r3, [sp, #8]
 8003af6:	e7d5      	b.n	8003aa4 <SX1276SetAntSwLowPower+0x18>
 8003af8:	50000800 	.word	0x50000800

08003afc <SX1276IoIrqInit>:
{
 8003afc:	b570      	push	{r4, r5, r6, lr}
 8003afe:	0004      	movs	r4, r0
  HW_GPIO_SetIrq( RADIO_DIO_0_PORT, RADIO_DIO_0_PIN, IRQ_HIGH_PRIORITY, irqHandlers[0] );
 8003b00:	4d0d      	ldr	r5, [pc, #52]	; (8003b38 <SX1276IoIrqInit+0x3c>)
 8003b02:	6803      	ldr	r3, [r0, #0]
 8003b04:	2200      	movs	r2, #0
 8003b06:	0028      	movs	r0, r5
 8003b08:	2110      	movs	r1, #16
 8003b0a:	f002 fa9d 	bl	8006048 <HW_GPIO_SetIrq>
  HW_GPIO_SetIrq( RADIO_DIO_1_PORT, RADIO_DIO_1_PIN, IRQ_HIGH_PRIORITY, irqHandlers[1] );
 8003b0e:	0028      	movs	r0, r5
 8003b10:	6863      	ldr	r3, [r4, #4]
 8003b12:	2200      	movs	r2, #0
 8003b14:	2102      	movs	r1, #2
 8003b16:	f002 fa97 	bl	8006048 <HW_GPIO_SetIrq>
  HW_GPIO_SetIrq( RADIO_DIO_2_PORT, RADIO_DIO_2_PIN, IRQ_HIGH_PRIORITY, irqHandlers[2] );
 8003b1a:	0028      	movs	r0, r5
 8003b1c:	68a3      	ldr	r3, [r4, #8]
 8003b1e:	2200      	movs	r2, #0
 8003b20:	2101      	movs	r1, #1
 8003b22:	f002 fa91 	bl	8006048 <HW_GPIO_SetIrq>
  HW_GPIO_SetIrq( RADIO_DIO_3_PORT, RADIO_DIO_3_PIN, IRQ_HIGH_PRIORITY, irqHandlers[3] );
 8003b26:	2180      	movs	r1, #128	; 0x80
 8003b28:	68e3      	ldr	r3, [r4, #12]
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	0189      	lsls	r1, r1, #6
 8003b2e:	4803      	ldr	r0, [pc, #12]	; (8003b3c <SX1276IoIrqInit+0x40>)
 8003b30:	f002 fa8a 	bl	8006048 <HW_GPIO_SetIrq>
}
 8003b34:	bd70      	pop	{r4, r5, r6, pc}
 8003b36:	46c0      	nop			; (mov r8, r8)
 8003b38:	50000400 	.word	0x50000400
 8003b3c:	50000800 	.word	0x50000800

08003b40 <SX1276SetAntSw>:
{
 8003b40:	b570      	push	{r4, r5, r6, lr}
 8003b42:	0005      	movs	r5, r0
 uint8_t paConfig =  SX1276Read( REG_PACONFIG );
 8003b44:	2009      	movs	r0, #9
 8003b46:	f7fe fc9f 	bl	8002488 <SX1276Read>
 8003b4a:	4c0b      	ldr	r4, [pc, #44]	; (8003b78 <SX1276SetAntSw+0x38>)
    switch( opMode )
 8003b4c:	2d03      	cmp	r5, #3
 8003b4e:	d10a      	bne.n	8003b66 <SX1276SetAntSw+0x26>
        HW_GPIO_Write( RADIO_ANT_SWITCH_PORT_TX_BOOST, RADIO_ANT_SWITCH_PIN_TX_BOOST, 1 );
 8003b50:	2201      	movs	r2, #1
 8003b52:	2102      	movs	r1, #2
      if( ( paConfig & RF_PACONFIG_PASELECT_PABOOST ) == RF_PACONFIG_PASELECT_PABOOST )
 8003b54:	0603      	lsls	r3, r0, #24
 8003b56:	d400      	bmi.n	8003b5a <SX1276SetAntSw+0x1a>
        HW_GPIO_Write( RADIO_ANT_SWITCH_PORT_TX_RFO, RADIO_ANT_SWITCH_PIN_TX_RFO, 1 );
 8003b58:	2104      	movs	r1, #4
 8003b5a:	4808      	ldr	r0, [pc, #32]	; (8003b7c <SX1276SetAntSw+0x3c>)
 8003b5c:	f002 fa9a 	bl	8006094 <HW_GPIO_Write>
      SX1276.RxTx = 1;
 8003b60:	2301      	movs	r3, #1
 8003b62:	7023      	strb	r3, [r4, #0]
}
 8003b64:	bd70      	pop	{r4, r5, r6, pc}
     HW_GPIO_Write( RADIO_ANT_SWITCH_PORT_RX, RADIO_ANT_SWITCH_PIN_RX, 1 );
 8003b66:	20a0      	movs	r0, #160	; 0xa0
     SX1276.RxTx = 0;
 8003b68:	2300      	movs	r3, #0
     HW_GPIO_Write( RADIO_ANT_SWITCH_PORT_RX, RADIO_ANT_SWITCH_PIN_RX, 1 );
 8003b6a:	2201      	movs	r2, #1
 8003b6c:	2102      	movs	r1, #2
 8003b6e:	05c0      	lsls	r0, r0, #23
     SX1276.RxTx = 0;
 8003b70:	7023      	strb	r3, [r4, #0]
     HW_GPIO_Write( RADIO_ANT_SWITCH_PORT_RX, RADIO_ANT_SWITCH_PIN_RX, 1 );
 8003b72:	f002 fa8f 	bl	8006094 <HW_GPIO_Write>
}
 8003b76:	e7f5      	b.n	8003b64 <SX1276SetAntSw+0x24>
 8003b78:	20000594 	.word	0x20000594
 8003b7c:	50000800 	.word	0x50000800

08003b80 <SX1276SetXO>:
{
 8003b80:	b510      	push	{r4, lr}
 8003b82:	0002      	movs	r2, r0
  if (state == SET )
 8003b84:	2801      	cmp	r0, #1
 8003b86:	d109      	bne.n	8003b9c <SX1276SetXO+0x1c>
    TCXO_ON(); 
 8003b88:	2180      	movs	r1, #128	; 0x80
 8003b8a:	20a0      	movs	r0, #160	; 0xa0
 8003b8c:	0149      	lsls	r1, r1, #5
 8003b8e:	05c0      	lsls	r0, r0, #23
 8003b90:	f002 fa80 	bl	8006094 <HW_GPIO_Write>
    DelayMs( BOARD_WAKEUP_TIME ); //start up time of TCXO
 8003b94:	2005      	movs	r0, #5
 8003b96:	f002 f89d 	bl	8005cd4 <DelayMs>
}
 8003b9a:	bd10      	pop	{r4, pc}
    TCXO_OFF(); 
 8003b9c:	2180      	movs	r1, #128	; 0x80
 8003b9e:	20a0      	movs	r0, #160	; 0xa0
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	0149      	lsls	r1, r1, #5
 8003ba4:	05c0      	lsls	r0, r0, #23
 8003ba6:	f002 fa75 	bl	8006094 <HW_GPIO_Write>
}
 8003baa:	e7f6      	b.n	8003b9a <SX1276SetXO+0x1a>

08003bac <SystemInit>:
  * @retval None
  */
void SystemInit (void)
{    
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 8003bac:	2280      	movs	r2, #128	; 0x80
 8003bae:	4b10      	ldr	r3, [pc, #64]	; (8003bf0 <SystemInit+0x44>)
 8003bb0:	0052      	lsls	r2, r2, #1
 8003bb2:	6819      	ldr	r1, [r3, #0]
 8003bb4:	430a      	orrs	r2, r1
 8003bb6:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 8003bb8:	68da      	ldr	r2, [r3, #12]
 8003bba:	490e      	ldr	r1, [pc, #56]	; (8003bf4 <SystemInit+0x48>)
 8003bbc:	400a      	ands	r2, r1
 8003bbe:	60da      	str	r2, [r3, #12]
 
  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 8003bc0:	681a      	ldr	r2, [r3, #0]
 8003bc2:	490d      	ldr	r1, [pc, #52]	; (8003bf8 <SystemInit+0x4c>)
 8003bc4:	400a      	ands	r2, r1
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8003bc6:	2101      	movs	r1, #1
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 8003bc8:	601a      	str	r2, [r3, #0]
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8003bca:	689a      	ldr	r2, [r3, #8]
 8003bcc:	438a      	bics	r2, r1
 8003bce:	609a      	str	r2, [r3, #8]
  
  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8003bd0:	681a      	ldr	r2, [r3, #0]
 8003bd2:	490a      	ldr	r1, [pc, #40]	; (8003bfc <SystemInit+0x50>)
 8003bd4:	400a      	ands	r2, r1
 8003bd6:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 8003bd8:	68da      	ldr	r2, [r3, #12]
 8003bda:	4909      	ldr	r1, [pc, #36]	; (8003c00 <SystemInit+0x54>)
 8003bdc:	400a      	ands	r2, r1
 8003bde:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8003be0:	2200      	movs	r2, #0
 8003be2:	611a      	str	r2, [r3, #16]
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003be4:	2280      	movs	r2, #128	; 0x80
 8003be6:	4b07      	ldr	r3, [pc, #28]	; (8003c04 <SystemInit+0x58>)
 8003be8:	0512      	lsls	r2, r2, #20
 8003bea:	609a      	str	r2, [r3, #8]
#endif
}
 8003bec:	4770      	bx	lr
 8003bee:	46c0      	nop			; (mov r8, r8)
 8003bf0:	40021000 	.word	0x40021000
 8003bf4:	88ff400c 	.word	0x88ff400c
 8003bf8:	fef6fff6 	.word	0xfef6fff6
 8003bfc:	fffbffff 	.word	0xfffbffff
 8003c00:	ff02ffff 	.word	0xff02ffff
 8003c04:	e000ed00 	.word	0xe000ed00

08003c08 <HAL_Init>:
#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
#endif /* PREREAD_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003c08:	2302      	movs	r3, #2
 8003c0a:	4a06      	ldr	r2, [pc, #24]	; (8003c24 <HAL_Init+0x1c>)
{
 8003c0c:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003c0e:	6811      	ldr	r1, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8003c10:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003c12:	430b      	orrs	r3, r1
 8003c14:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8003c16:	f002 ff4b 	bl	8006ab0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003c1a:	f002 ff4b 	bl	8006ab4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8003c1e:	2000      	movs	r0, #0
 8003c20:	bd10      	pop	{r4, pc}
 8003c22:	46c0      	nop			; (mov r8, r8)
 8003c24:	40022000 	.word	0x40022000

08003c28 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8003c28:	4a02      	ldr	r2, [pc, #8]	; (8003c34 <HAL_IncTick+0xc>)
 8003c2a:	6813      	ldr	r3, [r2, #0]
 8003c2c:	3301      	adds	r3, #1
 8003c2e:	6013      	str	r3, [r2, #0]
}
 8003c30:	4770      	bx	lr
 8003c32:	46c0      	nop			; (mov r8, r8)
 8003c34:	20000610 	.word	0x20000610

08003c38 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8003c38:	4b01      	ldr	r3, [pc, #4]	; (8003c40 <HAL_GetTick+0x8>)
 8003c3a:	6818      	ldr	r0, [r3, #0]
}
 8003c3c:	4770      	bx	lr
 8003c3e:	46c0      	nop			; (mov r8, r8)
 8003c40:	20000610 	.word	0x20000610

08003c44 <HAL_DBGMCU_DisableDBGSleepMode>:
  * @brief  Disables the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGSleepMode(void)
{
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8003c44:	2101      	movs	r1, #1
 8003c46:	4a02      	ldr	r2, [pc, #8]	; (8003c50 <HAL_DBGMCU_DisableDBGSleepMode+0xc>)
 8003c48:	6853      	ldr	r3, [r2, #4]
 8003c4a:	438b      	bics	r3, r1
 8003c4c:	6053      	str	r3, [r2, #4]
}
 8003c4e:	4770      	bx	lr
 8003c50:	40015800 	.word	0x40015800

08003c54 <HAL_DBGMCU_DisableDBGStopMode>:
  * @brief  Disables the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStopMode(void)
{
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8003c54:	2102      	movs	r1, #2
 8003c56:	4a02      	ldr	r2, [pc, #8]	; (8003c60 <HAL_DBGMCU_DisableDBGStopMode+0xc>)
 8003c58:	6853      	ldr	r3, [r2, #4]
 8003c5a:	438b      	bics	r3, r1
 8003c5c:	6053      	str	r3, [r2, #4]
}
 8003c5e:	4770      	bx	lr
 8003c60:	40015800 	.word	0x40015800

08003c64 <HAL_DBGMCU_DisableDBGStandbyMode>:
  * @brief  Disables the Debug Module during STANDBY mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStandbyMode(void)
{
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8003c64:	2104      	movs	r1, #4
 8003c66:	4a02      	ldr	r2, [pc, #8]	; (8003c70 <HAL_DBGMCU_DisableDBGStandbyMode+0xc>)
 8003c68:	6853      	ldr	r3, [r2, #4]
 8003c6a:	438b      	bics	r3, r1
 8003c6c:	6053      	str	r3, [r2, #4]
}
 8003c6e:	4770      	bx	lr
 8003c70:	40015800 	.word	0x40015800

08003c74 <HAL_ADC_MspInit>:
 8003c74:	4770      	bx	lr
	...

08003c78 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.  
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003c78:	b570      	push	{r4, r5, r6, lr}
 8003c7a:	0004      	movs	r4, r0
 
  /* Check ADC handle */
  if(hadc == NULL)
  {
    return HAL_ERROR;
 8003c7c:	2001      	movs	r0, #1
  if(hadc == NULL)
 8003c7e:	2c00      	cmp	r4, #0
 8003c80:	d019      	beq.n	8003cb6 <HAL_ADC_Init+0x3e>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003c82:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d106      	bne.n	8003c96 <HAL_ADC_Init+0x1e>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003c88:	0022      	movs	r2, r4
 8003c8a:	3254      	adds	r2, #84	; 0x54
    ADC_CLEAR_ERRORCODE(hadc);
 8003c8c:	65e3      	str	r3, [r4, #92]	; 0x5c
    
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003c8e:	0020      	movs	r0, r4
    hadc->Lock = HAL_UNLOCKED;
 8003c90:	7013      	strb	r3, [r2, #0]
    HAL_ADC_MspInit(hadc);
 8003c92:	f7ff ffef 	bl	8003c74 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8003c96:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003c98:	06db      	lsls	r3, r3, #27
 8003c9a:	d404      	bmi.n	8003ca6 <HAL_ADC_Init+0x2e>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 8003c9c:	2204      	movs	r2, #4
 8003c9e:	6823      	ldr	r3, [r4, #0]
 8003ca0:	6898      	ldr	r0, [r3, #8]
 8003ca2:	4010      	ands	r0, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8003ca4:	d008      	beq.n	8003cb8 <HAL_ADC_Init+0x40>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ca6:	2310      	movs	r3, #16
 8003ca8:	6da2      	ldr	r2, [r4, #88]	; 0x58
        
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
    return HAL_ERROR;
 8003caa:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003cac:	4313      	orrs	r3, r2
 8003cae:	65a3      	str	r3, [r4, #88]	; 0x58
    __HAL_UNLOCK(hadc);
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	3454      	adds	r4, #84	; 0x54
 8003cb4:	7023      	strb	r3, [r4, #0]
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
}
 8003cb6:	bd70      	pop	{r4, r5, r6, pc}
  ADC_STATE_CLR_SET(hadc->State,
 8003cb8:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8003cba:	4953      	ldr	r1, [pc, #332]	; (8003e08 <HAL_ADC_Init+0x190>)
 8003cbc:	4011      	ands	r1, r2
 8003cbe:	2202      	movs	r2, #2
 8003cc0:	430a      	orrs	r2, r1
 8003cc2:	65a2      	str	r2, [r4, #88]	; 0x58
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003cc4:	2203      	movs	r2, #3
 8003cc6:	6899      	ldr	r1, [r3, #8]
 8003cc8:	4011      	ands	r1, r2
 8003cca:	4a50      	ldr	r2, [pc, #320]	; (8003e0c <HAL_ADC_Init+0x194>)
 8003ccc:	2901      	cmp	r1, #1
 8003cce:	d102      	bne.n	8003cd6 <HAL_ADC_Init+0x5e>
 8003cd0:	681d      	ldr	r5, [r3, #0]
 8003cd2:	420d      	tst	r5, r1
 8003cd4:	d119      	bne.n	8003d0a <HAL_ADC_Init+0x92>
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8003cd6:	2680      	movs	r6, #128	; 0x80
 8003cd8:	6865      	ldr	r5, [r4, #4]
 8003cda:	05f6      	lsls	r6, r6, #23
 8003cdc:	0069      	lsls	r1, r5, #1
 8003cde:	0849      	lsrs	r1, r1, #1
 8003ce0:	42b1      	cmp	r1, r6
 8003ce2:	d003      	beq.n	8003cec <HAL_ADC_Init+0x74>
 8003ce4:	2180      	movs	r1, #128	; 0x80
 8003ce6:	0609      	lsls	r1, r1, #24
 8003ce8:	428d      	cmp	r5, r1
 8003cea:	d172      	bne.n	8003dd2 <HAL_ADC_Init+0x15a>
 8003cec:	6919      	ldr	r1, [r3, #16]
 8003cee:	0089      	lsls	r1, r1, #2
 8003cf0:	0889      	lsrs	r1, r1, #2
 8003cf2:	6119      	str	r1, [r3, #16]
 8003cf4:	6919      	ldr	r1, [r3, #16]
 8003cf6:	430d      	orrs	r5, r1
 8003cf8:	611d      	str	r5, [r3, #16]
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 8003cfa:	2518      	movs	r5, #24
 8003cfc:	68d9      	ldr	r1, [r3, #12]
 8003cfe:	43a9      	bics	r1, r5
 8003d00:	60d9      	str	r1, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 8003d02:	68d9      	ldr	r1, [r3, #12]
 8003d04:	68a5      	ldr	r5, [r4, #8]
 8003d06:	4329      	orrs	r1, r5
 8003d08:	60d9      	str	r1, [r3, #12]
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8003d0a:	6811      	ldr	r1, [r2, #0]
 8003d0c:	4d40      	ldr	r5, [pc, #256]	; (8003e10 <HAL_ADC_Init+0x198>)
 8003d0e:	4029      	ands	r1, r5
 8003d10:	6011      	str	r1, [r2, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 8003d12:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8003d14:	6815      	ldr	r5, [r2, #0]
 8003d16:	0649      	lsls	r1, r1, #25
 8003d18:	4329      	orrs	r1, r5
 8003d1a:	6011      	str	r1, [r2, #0]
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8003d1c:	2280      	movs	r2, #128	; 0x80
 8003d1e:	6899      	ldr	r1, [r3, #8]
 8003d20:	0552      	lsls	r2, r2, #21
 8003d22:	4211      	tst	r1, r2
 8003d24:	d102      	bne.n	8003d2c <HAL_ADC_Init+0xb4>
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8003d26:	6899      	ldr	r1, [r3, #8]
 8003d28:	430a      	orrs	r2, r1
 8003d2a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8003d2c:	68da      	ldr	r2, [r3, #12]
 8003d2e:	4939      	ldr	r1, [pc, #228]	; (8003e14 <HAL_ADC_Init+0x19c>)
 8003d30:	400a      	ands	r2, r1
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8003d32:	6921      	ldr	r1, [r4, #16]
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8003d34:	60da      	str	r2, [r3, #12]
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8003d36:	68dd      	ldr	r5, [r3, #12]
 8003d38:	68e2      	ldr	r2, [r4, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8003d3a:	2902      	cmp	r1, #2
 8003d3c:	d100      	bne.n	8003d40 <HAL_ADC_Init+0xc8>
 8003d3e:	2004      	movs	r0, #4
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8003d40:	6b66      	ldr	r6, [r4, #52]	; 0x34
                            ADC_CONTINUOUS(hadc->Init.ContinuousConvMode)    |
 8003d42:	6a21      	ldr	r1, [r4, #32]
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8003d44:	4332      	orrs	r2, r6
 8003d46:	432a      	orrs	r2, r5
                            ADC_CONTINUOUS(hadc->Init.ContinuousConvMode)    |
 8003d48:	034d      	lsls	r5, r1, #13
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8003d4a:	432a      	orrs	r2, r5
                            ADC_DMACONTREQ(hadc->Init.DMAContinuousRequests) |
 8003d4c:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8003d4e:	006d      	lsls	r5, r5, #1
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8003d50:	432a      	orrs	r2, r5
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8003d52:	69a5      	ldr	r5, [r4, #24]
 8003d54:	03ad      	lsls	r5, r5, #14
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8003d56:	432a      	orrs	r2, r5
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8003d58:	69e5      	ldr	r5, [r4, #28]
 8003d5a:	03ed      	lsls	r5, r5, #15
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8003d5c:	432a      	orrs	r2, r5
 8003d5e:	4302      	orrs	r2, r0
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003d60:	20c2      	movs	r0, #194	; 0xc2
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8003d62:	60da      	str	r2, [r3, #12]
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003d64:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8003d66:	30ff      	adds	r0, #255	; 0xff
 8003d68:	4282      	cmp	r2, r0
 8003d6a:	d004      	beq.n	8003d76 <HAL_ADC_Init+0xfe>
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8003d6c:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 8003d6e:	68d8      	ldr	r0, [r3, #12]
 8003d70:	432a      	orrs	r2, r5
 8003d72:	4302      	orrs	r2, r0
 8003d74:	60da      	str	r2, [r3, #12]
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003d76:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003d78:	2a01      	cmp	r2, #1
 8003d7a:	d106      	bne.n	8003d8a <HAL_ADC_Init+0x112>
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8003d7c:	2900      	cmp	r1, #0
 8003d7e:	d134      	bne.n	8003dea <HAL_ADC_Init+0x172>
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8003d80:	2280      	movs	r2, #128	; 0x80
 8003d82:	68d9      	ldr	r1, [r3, #12]
 8003d84:	0252      	lsls	r2, r2, #9
 8003d86:	430a      	orrs	r2, r1
 8003d88:	60da      	str	r2, [r3, #12]
  if (hadc->Init.OversamplingMode == ENABLE)
 8003d8a:	6c21      	ldr	r1, [r4, #64]	; 0x40
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 8003d8c:	691a      	ldr	r2, [r3, #16]
  if (hadc->Init.OversamplingMode == ENABLE)
 8003d8e:	2901      	cmp	r1, #1
 8003d90:	d133      	bne.n	8003dfa <HAL_ADC_Init+0x182>
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 8003d92:	4821      	ldr	r0, [pc, #132]	; (8003e18 <HAL_ADC_Init+0x1a0>)
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8003d94:	6ca5      	ldr	r5, [r4, #72]	; 0x48
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 8003d96:	4002      	ands	r2, r0
 8003d98:	611a      	str	r2, [r3, #16]
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8003d9a:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8003d9c:	6918      	ldr	r0, [r3, #16]
 8003d9e:	432a      	orrs	r2, r5
                               hadc->Init.Oversample.RightBitShift             |
 8003da0:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8003da2:	432a      	orrs	r2, r5
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8003da4:	4302      	orrs	r2, r0
 8003da6:	611a      	str	r2, [r3, #16]
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8003da8:	691a      	ldr	r2, [r3, #16]
 8003daa:	4311      	orrs	r1, r2
 8003dac:	6119      	str	r1, [r3, #16]
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8003dae:	2107      	movs	r1, #7
 8003db0:	695a      	ldr	r2, [r3, #20]
  ADC_CLEAR_ERRORCODE(hadc);
 8003db2:	2000      	movs	r0, #0
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8003db4:	438a      	bics	r2, r1
 8003db6:	615a      	str	r2, [r3, #20]
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8003db8:	695a      	ldr	r2, [r3, #20]
 8003dba:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8003dbc:	430a      	orrs	r2, r1
 8003dbe:	615a      	str	r2, [r3, #20]
  ADC_STATE_CLR_SET(hadc->State,
 8003dc0:	2203      	movs	r2, #3
  ADC_CLEAR_ERRORCODE(hadc);
 8003dc2:	65e0      	str	r0, [r4, #92]	; 0x5c
  ADC_STATE_CLR_SET(hadc->State,
 8003dc4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003dc6:	4393      	bics	r3, r2
 8003dc8:	001a      	movs	r2, r3
 8003dca:	2301      	movs	r3, #1
 8003dcc:	4313      	orrs	r3, r2
 8003dce:	65a3      	str	r3, [r4, #88]	; 0x58
  return HAL_OK;
 8003dd0:	e771      	b.n	8003cb6 <HAL_ADC_Init+0x3e>
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8003dd2:	6919      	ldr	r1, [r3, #16]
 8003dd4:	4e11      	ldr	r6, [pc, #68]	; (8003e1c <HAL_ADC_Init+0x1a4>)
 8003dd6:	0089      	lsls	r1, r1, #2
 8003dd8:	0889      	lsrs	r1, r1, #2
 8003dda:	6119      	str	r1, [r3, #16]
 8003ddc:	6811      	ldr	r1, [r2, #0]
 8003dde:	4031      	ands	r1, r6
 8003de0:	6011      	str	r1, [r2, #0]
 8003de2:	6811      	ldr	r1, [r2, #0]
 8003de4:	430d      	orrs	r5, r1
 8003de6:	6015      	str	r5, [r2, #0]
 8003de8:	e787      	b.n	8003cfa <HAL_ADC_Init+0x82>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003dea:	2120      	movs	r1, #32
 8003dec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003dee:	4301      	orrs	r1, r0
 8003df0:	65a1      	str	r1, [r4, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003df2:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8003df4:	430a      	orrs	r2, r1
 8003df6:	65e2      	str	r2, [r4, #92]	; 0x5c
 8003df8:	e7c7      	b.n	8003d8a <HAL_ADC_Init+0x112>
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8003dfa:	2101      	movs	r1, #1
 8003dfc:	420a      	tst	r2, r1
 8003dfe:	d0d6      	beq.n	8003dae <HAL_ADC_Init+0x136>
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8003e00:	691a      	ldr	r2, [r3, #16]
 8003e02:	438a      	bics	r2, r1
 8003e04:	611a      	str	r2, [r3, #16]
 8003e06:	e7d2      	b.n	8003dae <HAL_ADC_Init+0x136>
 8003e08:	fffffefd 	.word	0xfffffefd
 8003e0c:	40012708 	.word	0x40012708
 8003e10:	fdffffff 	.word	0xfdffffff
 8003e14:	fffe0219 	.word	0xfffe0219
 8003e18:	fffffc03 	.word	0xfffffc03
 8003e1c:	ffc3ffff 	.word	0xffc3ffff

08003e20 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003e20:	b570      	push	{r4, r5, r6, lr}
 8003e22:	0189      	lsls	r1, r1, #6
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 8003e24:	2800      	cmp	r0, #0
 8003e26:	da14      	bge.n	8003e52 <HAL_NVIC_SetPriority+0x32>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003e28:	230f      	movs	r3, #15
 8003e2a:	b2c0      	uxtb	r0, r0
 8003e2c:	4003      	ands	r3, r0
 8003e2e:	3b08      	subs	r3, #8
 8003e30:	4a11      	ldr	r2, [pc, #68]	; (8003e78 <HAL_NVIC_SetPriority+0x58>)
 8003e32:	089b      	lsrs	r3, r3, #2
 8003e34:	009b      	lsls	r3, r3, #2
 8003e36:	189b      	adds	r3, r3, r2
 8003e38:	2203      	movs	r2, #3
 8003e3a:	4010      	ands	r0, r2
 8003e3c:	4090      	lsls	r0, r2
 8003e3e:	32fc      	adds	r2, #252	; 0xfc
 8003e40:	0015      	movs	r5, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003e42:	4011      	ands	r1, r2
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003e44:	4085      	lsls	r5, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003e46:	4081      	lsls	r1, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003e48:	69dc      	ldr	r4, [r3, #28]
 8003e4a:	43ac      	bics	r4, r5
 8003e4c:	4321      	orrs	r1, r4
 8003e4e:	61d9      	str	r1, [r3, #28]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 8003e50:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003e52:	2503      	movs	r5, #3
 8003e54:	0883      	lsrs	r3, r0, #2
 8003e56:	4028      	ands	r0, r5
 8003e58:	40a8      	lsls	r0, r5
 8003e5a:	35fc      	adds	r5, #252	; 0xfc
 8003e5c:	002e      	movs	r6, r5
 8003e5e:	4a07      	ldr	r2, [pc, #28]	; (8003e7c <HAL_NVIC_SetPriority+0x5c>)
 8003e60:	009b      	lsls	r3, r3, #2
 8003e62:	189b      	adds	r3, r3, r2
 8003e64:	22c0      	movs	r2, #192	; 0xc0
 8003e66:	4086      	lsls	r6, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003e68:	4029      	ands	r1, r5
 8003e6a:	4081      	lsls	r1, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003e6c:	0092      	lsls	r2, r2, #2
 8003e6e:	589c      	ldr	r4, [r3, r2]
 8003e70:	43b4      	bics	r4, r6
 8003e72:	4321      	orrs	r1, r4
 8003e74:	5099      	str	r1, [r3, r2]
 8003e76:	e7eb      	b.n	8003e50 <HAL_NVIC_SetPriority+0x30>
 8003e78:	e000ed00 	.word	0xe000ed00
 8003e7c:	e000e100 	.word	0xe000e100

08003e80 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8003e80:	231f      	movs	r3, #31
 8003e82:	4018      	ands	r0, r3
 8003e84:	3b1e      	subs	r3, #30
 8003e86:	4083      	lsls	r3, r0
 8003e88:	4a01      	ldr	r2, [pc, #4]	; (8003e90 <HAL_NVIC_EnableIRQ+0x10>)
 8003e8a:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8003e8c:	4770      	bx	lr
 8003e8e:	46c0      	nop			; (mov r8, r8)
 8003e90:	e000e100 	.word	0xe000e100

08003e94 <HAL_NVIC_SetPendingIRQ>:
  NVIC->ISPR[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8003e94:	231f      	movs	r3, #31
 8003e96:	4018      	ands	r0, r3
 8003e98:	3b1e      	subs	r3, #30
 8003e9a:	4083      	lsls	r3, r0
 8003e9c:	4a01      	ldr	r2, [pc, #4]	; (8003ea4 <HAL_NVIC_SetPendingIRQ+0x10>)
 8003e9e:	6053      	str	r3, [r2, #4]
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{ 
  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
}
 8003ea0:	4770      	bx	lr
 8003ea2:	46c0      	nop			; (mov r8, r8)
 8003ea4:	e000e1fc 	.word	0xe000e1fc

08003ea8 <HAL_NVIC_GetPendingIRQ>:
  return((uint32_t)(((NVIC->ISPR[0U] & (1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
 8003ea8:	4a04      	ldr	r2, [pc, #16]	; (8003ebc <HAL_NVIC_GetPendingIRQ+0x14>)
  *          (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval status: - 0  Interrupt status is not pending.
  *                 - 1  Interrupt status is pending.
  */
uint32_t HAL_NVIC_GetPendingIRQ(IRQn_Type IRQn)
{ 
 8003eaa:	0003      	movs	r3, r0
 8003eac:	6850      	ldr	r0, [r2, #4]
 8003eae:	221f      	movs	r2, #31
 8003eb0:	4013      	ands	r3, r2
 8003eb2:	40d8      	lsrs	r0, r3
 8003eb4:	2301      	movs	r3, #1
 8003eb6:	4018      	ands	r0, r3
  /* Return 1 if pending else 0 */
  return NVIC_GetPendingIRQ(IRQn);
}
 8003eb8:	4770      	bx	lr
 8003eba:	46c0      	nop			; (mov r8, r8)
 8003ebc:	e000e1fc 	.word	0xe000e1fc

08003ec0 <HAL_NVIC_ClearPendingIRQ>:
  NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8003ec0:	231f      	movs	r3, #31
 8003ec2:	22c0      	movs	r2, #192	; 0xc0
 8003ec4:	4018      	ands	r0, r3
 8003ec6:	3b1e      	subs	r3, #30
 8003ec8:	4083      	lsls	r3, r0
 8003eca:	4902      	ldr	r1, [pc, #8]	; (8003ed4 <HAL_NVIC_ClearPendingIRQ+0x14>)
 8003ecc:	0052      	lsls	r2, r2, #1
 8003ece:	508b      	str	r3, [r1, r2]
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{ 
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
}
 8003ed0:	4770      	bx	lr
 8003ed2:	46c0      	nop			; (mov r8, r8)
 8003ed4:	e000e100 	.word	0xe000e100

08003ed8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ed8:	b5f0      	push	{r4, r5, r6, r7, lr}
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
        
        temp = SYSCFG->EXTICR[position >> 2U];
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8003eda:	4a55      	ldr	r2, [pc, #340]	; (8004030 <HAL_GPIO_Init+0x158>)
  while (((GPIO_Init->Pin) >> position) != 0)
 8003edc:	680b      	ldr	r3, [r1, #0]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8003ede:	1882      	adds	r2, r0, r2
 8003ee0:	1e54      	subs	r4, r2, #1
 8003ee2:	41a2      	sbcs	r2, r4
{
 8003ee4:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0)
 8003ee6:	9301      	str	r3, [sp, #4]
  uint32_t position = 0x00U;
 8003ee8:	2300      	movs	r3, #0
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8003eea:	3205      	adds	r2, #5
 8003eec:	9203      	str	r2, [sp, #12]
  while (((GPIO_Init->Pin) >> position) != 0)
 8003eee:	9a01      	ldr	r2, [sp, #4]
 8003ef0:	40da      	lsrs	r2, r3
 8003ef2:	d101      	bne.n	8003ef8 <HAL_GPIO_Init+0x20>
        EXTI->FTSR = temp;
      }
    }
    position++;
  }
}
 8003ef4:	b005      	add	sp, #20
 8003ef6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8003ef8:	2501      	movs	r5, #1
 8003efa:	409d      	lsls	r5, r3
 8003efc:	9a01      	ldr	r2, [sp, #4]
 8003efe:	402a      	ands	r2, r5
 8003f00:	9200      	str	r2, [sp, #0]
    if(iocurrent)
 8003f02:	d100      	bne.n	8003f06 <HAL_GPIO_Init+0x2e>
 8003f04:	e091      	b.n	800402a <HAL_GPIO_Init+0x152>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8003f06:	684a      	ldr	r2, [r1, #4]
 8003f08:	4694      	mov	ip, r2
 8003f0a:	2210      	movs	r2, #16
 8003f0c:	4664      	mov	r4, ip
 8003f0e:	4394      	bics	r4, r2
 8003f10:	0022      	movs	r2, r4
 8003f12:	3c01      	subs	r4, #1
 8003f14:	2a02      	cmp	r2, #2
 8003f16:	d11f      	bne.n	8003f58 <HAL_GPIO_Init+0x80>
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 8003f18:	2407      	movs	r4, #7
 8003f1a:	270f      	movs	r7, #15
 8003f1c:	401c      	ands	r4, r3
 8003f1e:	00a4      	lsls	r4, r4, #2
 8003f20:	40a7      	lsls	r7, r4
        temp = GPIOx->AFR[position >> 3U];
 8003f22:	08da      	lsrs	r2, r3, #3
 8003f24:	0092      	lsls	r2, r2, #2
 8003f26:	1882      	adds	r2, r0, r2
 8003f28:	6a16      	ldr	r6, [r2, #32]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 8003f2a:	43be      	bics	r6, r7
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U)) ;
 8003f2c:	690f      	ldr	r7, [r1, #16]
 8003f2e:	40a7      	lsls	r7, r4
 8003f30:	433e      	orrs	r6, r7
        GPIOx->AFR[position >> 3U] = temp;
 8003f32:	6216      	str	r6, [r2, #32]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8003f34:	2403      	movs	r4, #3
 8003f36:	005e      	lsls	r6, r3, #1
 8003f38:	40b4      	lsls	r4, r6
        temp = GPIOx->OSPEEDR;
 8003f3a:	6882      	ldr	r2, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8003f3c:	43a2      	bics	r2, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003f3e:	68cc      	ldr	r4, [r1, #12]
 8003f40:	40b4      	lsls	r4, r6
 8003f42:	4322      	orrs	r2, r4
        GPIOx->OSPEEDR = temp;
 8003f44:	6082      	str	r2, [r0, #8]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003f46:	4662      	mov	r2, ip
 8003f48:	06d2      	lsls	r2, r2, #27
 8003f4a:	0fd2      	lsrs	r2, r2, #31
 8003f4c:	409a      	lsls	r2, r3
        temp= GPIOx->OTYPER;
 8003f4e:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003f50:	43ac      	bics	r4, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003f52:	4322      	orrs	r2, r4
        GPIOx->OTYPER = temp;
 8003f54:	6042      	str	r2, [r0, #4]
 8003f56:	e001      	b.n	8003f5c <HAL_GPIO_Init+0x84>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003f58:	2c01      	cmp	r4, #1
 8003f5a:	d9eb      	bls.n	8003f34 <HAL_GPIO_Init+0x5c>
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003f5c:	2603      	movs	r6, #3
 8003f5e:	0034      	movs	r4, r6
 8003f60:	005d      	lsls	r5, r3, #1
 8003f62:	40ac      	lsls	r4, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003f64:	4662      	mov	r2, ip
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003f66:	43e4      	mvns	r4, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003f68:	4032      	ands	r2, r6
 8003f6a:	40aa      	lsls	r2, r5
      temp = GPIOx->MODER;
 8003f6c:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003f6e:	4027      	ands	r7, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003f70:	433a      	orrs	r2, r7
      GPIOx->MODER = temp;
 8003f72:	6002      	str	r2, [r0, #0]
      temp = GPIOx->PUPDR;
 8003f74:	68c2      	ldr	r2, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003f76:	4014      	ands	r4, r2
      temp |= ((GPIO_Init->Pull) << (position * 2U)); 
 8003f78:	688a      	ldr	r2, [r1, #8]
 8003f7a:	40aa      	lsls	r2, r5
 8003f7c:	4314      	orrs	r4, r2
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8003f7e:	4662      	mov	r2, ip
      GPIOx->PUPDR = temp;
 8003f80:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8003f82:	00d2      	lsls	r2, r2, #3
 8003f84:	d551      	bpl.n	800402a <HAL_GPIO_Init+0x152>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f86:	2501      	movs	r5, #1
 8003f88:	4c2a      	ldr	r4, [pc, #168]	; (8004034 <HAL_GPIO_Init+0x15c>)
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8003f8a:	270f      	movs	r7, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f8c:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8003f8e:	432a      	orrs	r2, r5
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8003f90:	001d      	movs	r5, r3
 8003f92:	4035      	ands	r5, r6
 8003f94:	00ad      	lsls	r5, r5, #2
 8003f96:	40af      	lsls	r7, r5
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f98:	6362      	str	r2, [r4, #52]	; 0x34
 8003f9a:	4a27      	ldr	r2, [pc, #156]	; (8004038 <HAL_GPIO_Init+0x160>)
        temp = SYSCFG->EXTICR[position >> 2U];
 8003f9c:	089c      	lsrs	r4, r3, #2
 8003f9e:	00a4      	lsls	r4, r4, #2
 8003fa0:	18a4      	adds	r4, r4, r2
 8003fa2:	68a2      	ldr	r2, [r4, #8]
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8003fa4:	43ba      	bics	r2, r7
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8003fa6:	27a0      	movs	r7, #160	; 0xa0
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8003fa8:	9202      	str	r2, [sp, #8]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8003faa:	05ff      	lsls	r7, r7, #23
 8003fac:	2200      	movs	r2, #0
 8003fae:	42b8      	cmp	r0, r7
 8003fb0:	d010      	beq.n	8003fd4 <HAL_GPIO_Init+0xfc>
 8003fb2:	4f22      	ldr	r7, [pc, #136]	; (800403c <HAL_GPIO_Init+0x164>)
 8003fb4:	3201      	adds	r2, #1
 8003fb6:	42b8      	cmp	r0, r7
 8003fb8:	d00c      	beq.n	8003fd4 <HAL_GPIO_Init+0xfc>
 8003fba:	4f21      	ldr	r7, [pc, #132]	; (8004040 <HAL_GPIO_Init+0x168>)
 8003fbc:	3201      	adds	r2, #1
 8003fbe:	42b8      	cmp	r0, r7
 8003fc0:	d008      	beq.n	8003fd4 <HAL_GPIO_Init+0xfc>
 8003fc2:	4f20      	ldr	r7, [pc, #128]	; (8004044 <HAL_GPIO_Init+0x16c>)
 8003fc4:	0032      	movs	r2, r6
 8003fc6:	42b8      	cmp	r0, r7
 8003fc8:	d004      	beq.n	8003fd4 <HAL_GPIO_Init+0xfc>
 8003fca:	4e1f      	ldr	r6, [pc, #124]	; (8004048 <HAL_GPIO_Init+0x170>)
 8003fcc:	3201      	adds	r2, #1
 8003fce:	42b0      	cmp	r0, r6
 8003fd0:	d000      	beq.n	8003fd4 <HAL_GPIO_Init+0xfc>
 8003fd2:	9a03      	ldr	r2, [sp, #12]
 8003fd4:	40aa      	lsls	r2, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003fd6:	4667      	mov	r7, ip
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8003fd8:	9d02      	ldr	r5, [sp, #8]
 8003fda:	432a      	orrs	r2, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003fdc:	60a2      	str	r2, [r4, #8]
        temp = EXTI->IMR;
 8003fde:	4a1b      	ldr	r2, [pc, #108]	; (800404c <HAL_GPIO_Init+0x174>)
        temp &= ~((uint32_t)iocurrent);
 8003fe0:	9c00      	ldr	r4, [sp, #0]
        temp = EXTI->IMR;
 8003fe2:	6816      	ldr	r6, [r2, #0]
          temp |= iocurrent;
 8003fe4:	9d00      	ldr	r5, [sp, #0]
        temp &= ~((uint32_t)iocurrent);
 8003fe6:	43e4      	mvns	r4, r4
          temp |= iocurrent;
 8003fe8:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003fea:	03ff      	lsls	r7, r7, #15
 8003fec:	d401      	bmi.n	8003ff2 <HAL_GPIO_Init+0x11a>
        temp &= ~((uint32_t)iocurrent);
 8003fee:	0035      	movs	r5, r6
 8003ff0:	4025      	ands	r5, r4
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003ff2:	4667      	mov	r7, ip
        EXTI->IMR = temp;
 8003ff4:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 8003ff6:	6856      	ldr	r6, [r2, #4]
          temp |= iocurrent;
 8003ff8:	9d00      	ldr	r5, [sp, #0]
 8003ffa:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003ffc:	03bf      	lsls	r7, r7, #14
 8003ffe:	d401      	bmi.n	8004004 <HAL_GPIO_Init+0x12c>
        temp &= ~((uint32_t)iocurrent);
 8004000:	0035      	movs	r5, r6
 8004002:	4025      	ands	r5, r4
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004004:	4667      	mov	r7, ip
        EXTI->EMR = temp;
 8004006:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 8004008:	6896      	ldr	r6, [r2, #8]
          temp |= iocurrent;
 800400a:	9d00      	ldr	r5, [sp, #0]
 800400c:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800400e:	02ff      	lsls	r7, r7, #11
 8004010:	d401      	bmi.n	8004016 <HAL_GPIO_Init+0x13e>
        temp &= ~((uint32_t)iocurrent);
 8004012:	0035      	movs	r5, r6
 8004014:	4025      	ands	r5, r4
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004016:	4667      	mov	r7, ip
        EXTI->RTSR = temp;
 8004018:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 800401a:	68d5      	ldr	r5, [r2, #12]
          temp |= iocurrent;
 800401c:	9e00      	ldr	r6, [sp, #0]
 800401e:	432e      	orrs	r6, r5
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004020:	02bf      	lsls	r7, r7, #10
 8004022:	d401      	bmi.n	8004028 <HAL_GPIO_Init+0x150>
        temp &= ~((uint32_t)iocurrent);
 8004024:	4025      	ands	r5, r4
 8004026:	002e      	movs	r6, r5
        EXTI->FTSR = temp;
 8004028:	60d6      	str	r6, [r2, #12]
    position++;
 800402a:	3301      	adds	r3, #1
 800402c:	e75f      	b.n	8003eee <HAL_GPIO_Init+0x16>
 800402e:	46c0      	nop			; (mov r8, r8)
 8004030:	afffe400 	.word	0xafffe400
 8004034:	40021000 	.word	0x40021000
 8004038:	40010000 	.word	0x40010000
 800403c:	50000400 	.word	0x50000400
 8004040:	50000800 	.word	0x50000800
 8004044:	50000c00 	.word	0x50000c00
 8004048:	50001000 	.word	0x50001000
 800404c:	40010400 	.word	0x40010400

08004050 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;
  
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));
  
  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004050:	6900      	ldr	r0, [r0, #16]
 8004052:	4008      	ands	r0, r1
 8004054:	1e41      	subs	r1, r0, #1
 8004056:	4188      	sbcs	r0, r1
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
 8004058:	b2c0      	uxtb	r0, r0
}
 800405a:	4770      	bx	lr

0800405c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));
  
  if(PinState != GPIO_PIN_RESET)
 800405c:	2a00      	cmp	r2, #0
 800405e:	d001      	beq.n	8004064 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004060:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8004062:	4770      	bx	lr
    GPIOx->BRR = GPIO_Pin ;
 8004064:	6281      	str	r1, [r0, #40]	; 0x28
}
 8004066:	e7fc      	b.n	8004062 <HAL_GPIO_WritePin+0x6>

08004068 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8004068:	6943      	ldr	r3, [r0, #20]
 800406a:	4059      	eors	r1, r3
 800406c:	6141      	str	r1, [r0, #20]
}
 800406e:	4770      	bx	lr

08004070 <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET) 
 8004070:	4b04      	ldr	r3, [pc, #16]	; (8004084 <HAL_GPIO_EXTI_IRQHandler+0x14>)
{
 8004072:	b510      	push	{r4, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET) 
 8004074:	695a      	ldr	r2, [r3, #20]
 8004076:	4210      	tst	r0, r2
 8004078:	d002      	beq.n	8004080 <HAL_GPIO_EXTI_IRQHandler+0x10>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800407a:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800407c:	f002 fd5c 	bl	8006b38 <HAL_GPIO_EXTI_Callback>
  }
}
 8004080:	bd10      	pop	{r4, pc}
 8004082:	46c0      	nop			; (mov r8, r8)
 8004084:	40010400 	.word	0x40010400

08004088 <HAL_PWR_DisablePVD>:
  * @retval None
  */
void HAL_PWR_DisablePVD(void)
{
  /* Disable the power voltage detector */
  CLEAR_BIT(PWR->CR, PWR_CR_PVDE);
 8004088:	2110      	movs	r1, #16
 800408a:	4a02      	ldr	r2, [pc, #8]	; (8004094 <HAL_PWR_DisablePVD+0xc>)
 800408c:	6813      	ldr	r3, [r2, #0]
 800408e:	438b      	bics	r3, r1
 8004090:	6013      	str	r3, [r2, #0]
}
 8004092:	4770      	bx	lr
 8004094:	40007000 	.word	0x40007000

08004098 <HAL_PWR_EnterSLEEPMode>:
  *            @arg PWR_SLEEPENTRY_WFI: enter SLEEP mode with WFI instruction
  *            @arg PWR_SLEEPENTRY_WFE: enter SLEEP mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8004098:	b510      	push	{r4, lr}

  /* Select the regulator state in Sleep mode ---------------------------------*/
  tmpreg = PWR->CR;

  /* Clear PDDS and LPDS bits */
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 800409a:	2403      	movs	r4, #3
  tmpreg = PWR->CR;
 800409c:	4a08      	ldr	r2, [pc, #32]	; (80040c0 <HAL_PWR_EnterSLEEPMode+0x28>)
 800409e:	6813      	ldr	r3, [r2, #0]
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 80040a0:	43a3      	bics	r3, r4

 /* Set LPSDSR bit according to PWR_Regulator value */
  SET_BIT(tmpreg, Regulator);
 80040a2:	4318      	orrs	r0, r3

  /* Store the new value */
  PWR->CR = tmpreg;
 80040a4:	6010      	str	r0, [r2, #0]
  
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 80040a6:	2004      	movs	r0, #4
 80040a8:	4a06      	ldr	r2, [pc, #24]	; (80040c4 <HAL_PWR_EnterSLEEPMode+0x2c>)
 80040aa:	6913      	ldr	r3, [r2, #16]
 80040ac:	4383      	bics	r3, r0
 80040ae:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 80040b0:	2901      	cmp	r1, #1
 80040b2:	d101      	bne.n	80040b8 <HAL_PWR_EnterSLEEPMode+0x20>
  \brief   Wait For Interrupt
  \details Wait For Interrupt is a hint instruction that suspends execution until one of a number of events occurs.
 */
__attribute__((always_inline)) __STATIC_INLINE void __WFI(void)
{
  __ASM volatile ("wfi");
 80040b4:	bf30      	wfi
    /* Request Wait For Event */
    __SEV();
    __WFE();
    __WFE();
  }
}
 80040b6:	bd10      	pop	{r4, pc}
  \brief   Send Event
  \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 */
__attribute__((always_inline)) __STATIC_INLINE void __SEV(void)
{
  __ASM volatile ("sev");
 80040b8:	bf40      	sev
  __ASM volatile ("wfe");
 80040ba:	bf20      	wfe
 80040bc:	bf20      	wfe
 80040be:	e7fa      	b.n	80040b6 <HAL_PWR_EnterSLEEPMode+0x1e>
 80040c0:	40007000 	.word	0x40007000
 80040c4:	e000ed00 	.word	0xe000ed00

080040c8 <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction   
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 80040c8:	b510      	push	{r4, lr}

  /* Select the regulator state in Stop mode ---------------------------------*/
  tmpreg = PWR->CR;
  
  /* Clear PDDS and LPDS bits */
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 80040ca:	2403      	movs	r4, #3
  tmpreg = PWR->CR;
 80040cc:	4a0a      	ldr	r2, [pc, #40]	; (80040f8 <HAL_PWR_EnterSTOPMode+0x30>)
 80040ce:	6813      	ldr	r3, [r2, #0]
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 80040d0:	43a3      	bics	r3, r4

 /* Set LPSDSR bit according to PWR_Regulator value */
  SET_BIT(tmpreg, Regulator);
 80040d2:	4318      	orrs	r0, r3

  /* Store the new value */
  PWR->CR = tmpreg;
 80040d4:	6010      	str	r0, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 80040d6:	2204      	movs	r2, #4
 80040d8:	4b08      	ldr	r3, [pc, #32]	; (80040fc <HAL_PWR_EnterSTOPMode+0x34>)
 80040da:	6918      	ldr	r0, [r3, #16]
 80040dc:	4302      	orrs	r2, r0
 80040de:	611a      	str	r2, [r3, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 80040e0:	2901      	cmp	r1, #1
 80040e2:	d105      	bne.n	80040f0 <HAL_PWR_EnterSTOPMode+0x28>
  __ASM volatile ("wfi");
 80040e4:	bf30      	wfi
    __WFE();
    __WFE();
  }
 
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 80040e6:	2104      	movs	r1, #4
 80040e8:	691a      	ldr	r2, [r3, #16]
 80040ea:	438a      	bics	r2, r1
 80040ec:	611a      	str	r2, [r3, #16]

}
 80040ee:	bd10      	pop	{r4, pc}
  __ASM volatile ("sev");
 80040f0:	bf40      	sev
  __ASM volatile ("wfe");
 80040f2:	bf20      	wfe
 80040f4:	bf20      	wfe
 80040f6:	e7f6      	b.n	80040e6 <HAL_PWR_EnterSTOPMode+0x1e>
 80040f8:	40007000 	.word	0x40007000
 80040fc:	e000ed00 	.word	0xe000ed00

08004100 <HAL_PWREx_EnableFastWakeUp>:
  * @retval None
  */
void HAL_PWREx_EnableFastWakeUp(void)
{
  /* Enable the fast wake up */
  SET_BIT(PWR->CR, PWR_CR_FWU);
 8004100:	2380      	movs	r3, #128	; 0x80
 8004102:	4a03      	ldr	r2, [pc, #12]	; (8004110 <HAL_PWREx_EnableFastWakeUp+0x10>)
 8004104:	00db      	lsls	r3, r3, #3
 8004106:	6811      	ldr	r1, [r2, #0]
 8004108:	430b      	orrs	r3, r1
 800410a:	6013      	str	r3, [r2, #0]
}
 800410c:	4770      	bx	lr
 800410e:	46c0      	nop			; (mov r8, r8)
 8004110:	40007000 	.word	0x40007000

08004114 <HAL_PWREx_EnableUltraLowPower>:
  * @retval None
  */
void HAL_PWREx_EnableUltraLowPower(void)
{
  /* Enable the Ultra Low Power mode */
  SET_BIT(PWR->CR, PWR_CR_ULP);
 8004114:	2380      	movs	r3, #128	; 0x80
 8004116:	4a03      	ldr	r2, [pc, #12]	; (8004124 <HAL_PWREx_EnableUltraLowPower+0x10>)
 8004118:	009b      	lsls	r3, r3, #2
 800411a:	6811      	ldr	r1, [r2, #0]
 800411c:	430b      	orrs	r3, r1
 800411e:	6013      	str	r3, [r2, #0]
}
 8004120:	4770      	bx	lr
 8004122:	46c0      	nop			; (mov r8, r8)
 8004124:	40007000 	.word	0x40007000

08004128 <RCC_SetFlashLatencyFromMSIRange>:
{
  uint32_t vos = 0;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004128:	22f0      	movs	r2, #240	; 0xf0
 800412a:	4b17      	ldr	r3, [pc, #92]	; (8004188 <RCC_SetFlashLatencyFromMSIRange+0x60>)
{
 800412c:	b530      	push	{r4, r5, lr}
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800412e:	68d9      	ldr	r1, [r3, #12]
 8004130:	4211      	tst	r1, r2
 8004132:	d00b      	beq.n	800414c <RCC_SetFlashLatencyFromMSIRange+0x24>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004134:	2300      	movs	r3, #0
    {
      latency = FLASH_LATENCY_1; /* 1WS */
    }
  }
  
  __HAL_FLASH_SET_LATENCY(latency);
 8004136:	2101      	movs	r1, #1
 8004138:	4814      	ldr	r0, [pc, #80]	; (800418c <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800413a:	6802      	ldr	r2, [r0, #0]
 800413c:	438a      	bics	r2, r1
 800413e:	431a      	orrs	r2, r3
 8004140:	6002      	str	r2, [r0, #0]
  
  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8004142:	6800      	ldr	r0, [r0, #0]
 8004144:	4008      	ands	r0, r1
 8004146:	4058      	eors	r0, r3
 8004148:	4008      	ands	r0, r1
  {
    return HAL_ERROR;
  }
  
  return HAL_OK;
}
 800414a:	bd30      	pop	{r4, r5, pc}
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800414c:	2180      	movs	r1, #128	; 0x80
 800414e:	22c0      	movs	r2, #192	; 0xc0
 8004150:	6b9d      	ldr	r5, [r3, #56]	; 0x38
 8004152:	0549      	lsls	r1, r1, #21
 8004154:	4c0e      	ldr	r4, [pc, #56]	; (8004190 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8004156:	0152      	lsls	r2, r2, #5
 8004158:	420d      	tst	r5, r1
 800415a:	d00a      	beq.n	8004172 <RCC_SetFlashLatencyFromMSIRange+0x4a>
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 800415c:	6823      	ldr	r3, [r4, #0]
 800415e:	401a      	ands	r2, r3
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8004160:	23c0      	movs	r3, #192	; 0xc0
 8004162:	015b      	lsls	r3, r3, #5
 8004164:	429a      	cmp	r2, r3
 8004166:	d1e5      	bne.n	8004134 <RCC_SetFlashLatencyFromMSIRange+0xc>
 8004168:	4b0a      	ldr	r3, [pc, #40]	; (8004194 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 800416a:	18c0      	adds	r0, r0, r3
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800416c:	4243      	negs	r3, r0
 800416e:	4143      	adcs	r3, r0
 8004170:	e7e1      	b.n	8004136 <RCC_SetFlashLatencyFromMSIRange+0xe>
      __HAL_RCC_PWR_CLK_ENABLE();
 8004172:	6b9d      	ldr	r5, [r3, #56]	; 0x38
 8004174:	4329      	orrs	r1, r5
 8004176:	6399      	str	r1, [r3, #56]	; 0x38
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8004178:	6821      	ldr	r1, [r4, #0]
      __HAL_RCC_PWR_CLK_DISABLE();
 800417a:	4c07      	ldr	r4, [pc, #28]	; (8004198 <RCC_SetFlashLatencyFromMSIRange+0x70>)
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 800417c:	400a      	ands	r2, r1
      __HAL_RCC_PWR_CLK_DISABLE();
 800417e:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8004180:	4021      	ands	r1, r4
 8004182:	6399      	str	r1, [r3, #56]	; 0x38
 8004184:	e7ec      	b.n	8004160 <RCC_SetFlashLatencyFromMSIRange+0x38>
 8004186:	46c0      	nop			; (mov r8, r8)
 8004188:	40021000 	.word	0x40021000
 800418c:	40022000 	.word	0x40022000
 8004190:	40007000 	.word	0x40007000
 8004194:	ffff4000 	.word	0xffff4000
 8004198:	efffffff 	.word	0xefffffff

0800419c <HAL_RCC_OscConfig>:
{
 800419c:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800419e:	6803      	ldr	r3, [r0, #0]
{
 80041a0:	b085      	sub	sp, #20
 80041a2:	0004      	movs	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80041a4:	07db      	lsls	r3, r3, #31
 80041a6:	d44e      	bmi.n	8004246 <HAL_RCC_OscConfig+0xaa>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80041a8:	6823      	ldr	r3, [r4, #0]
 80041aa:	079b      	lsls	r3, r3, #30
 80041ac:	d500      	bpl.n	80041b0 <HAL_RCC_OscConfig+0x14>
 80041ae:	e0a1      	b.n	80042f4 <HAL_RCC_OscConfig+0x158>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80041b0:	6823      	ldr	r3, [r4, #0]
 80041b2:	06db      	lsls	r3, r3, #27
 80041b4:	d535      	bpl.n	8004222 <HAL_RCC_OscConfig+0x86>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) )
 80041b6:	230c      	movs	r3, #12
 80041b8:	4dbd      	ldr	r5, [pc, #756]	; (80044b0 <HAL_RCC_OscConfig+0x314>)
 80041ba:	68ea      	ldr	r2, [r5, #12]
 80041bc:	421a      	tst	r2, r3
 80041be:	d000      	beq.n	80041c2 <HAL_RCC_OscConfig+0x26>
 80041c0:	e0eb      	b.n	800439a <HAL_RCC_OscConfig+0x1fe>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != RESET) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80041c2:	682b      	ldr	r3, [r5, #0]
 80041c4:	059b      	lsls	r3, r3, #22
 80041c6:	d502      	bpl.n	80041ce <HAL_RCC_OscConfig+0x32>
 80041c8:	69e3      	ldr	r3, [r4, #28]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d050      	beq.n	8004270 <HAL_RCC_OscConfig+0xd4>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80041ce:	22e0      	movs	r2, #224	; 0xe0
 80041d0:	686b      	ldr	r3, [r5, #4]
 80041d2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80041d4:	0212      	lsls	r2, r2, #8
 80041d6:	4013      	ands	r3, r2
 80041d8:	4298      	cmp	r0, r3
 80041da:	d800      	bhi.n	80041de <HAL_RCC_OscConfig+0x42>
 80041dc:	e0cb      	b.n	8004376 <HAL_RCC_OscConfig+0x1da>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80041de:	f7ff ffa3 	bl	8004128 <RCC_SetFlashLatencyFromMSIRange>
 80041e2:	2800      	cmp	r0, #0
 80041e4:	d144      	bne.n	8004270 <HAL_RCC_OscConfig+0xd4>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80041e6:	686b      	ldr	r3, [r5, #4]
 80041e8:	4ab2      	ldr	r2, [pc, #712]	; (80044b4 <HAL_RCC_OscConfig+0x318>)
 80041ea:	4013      	ands	r3, r2
 80041ec:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80041ee:	4313      	orrs	r3, r2
 80041f0:	606b      	str	r3, [r5, #4]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80041f2:	686a      	ldr	r2, [r5, #4]
 80041f4:	6a23      	ldr	r3, [r4, #32]
 80041f6:	0212      	lsls	r2, r2, #8
 80041f8:	061b      	lsls	r3, r3, #24
 80041fa:	0a12      	lsrs	r2, r2, #8
 80041fc:	4313      	orrs	r3, r2
 80041fe:	606b      	str	r3, [r5, #4]
        SystemCoreClock =  (32768U * (1U << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_BITNUMBER) + 1U))) 
 8004200:	6a63      	ldr	r3, [r4, #36]	; 0x24
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_BITNUMBER)];
 8004202:	68ea      	ldr	r2, [r5, #12]
        SystemCoreClock =  (32768U * (1U << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_BITNUMBER) + 1U))) 
 8004204:	0b59      	lsrs	r1, r3, #13
 8004206:	2380      	movs	r3, #128	; 0x80
 8004208:	3101      	adds	r1, #1
 800420a:	021b      	lsls	r3, r3, #8
 800420c:	408b      	lsls	r3, r1
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_BITNUMBER)];
 800420e:	0612      	lsls	r2, r2, #24
 8004210:	49a9      	ldr	r1, [pc, #676]	; (80044b8 <HAL_RCC_OscConfig+0x31c>)
 8004212:	0f12      	lsrs	r2, r2, #28
 8004214:	5c8a      	ldrb	r2, [r1, r2]
        HAL_InitTick (TICK_INT_PRIORITY);
 8004216:	2003      	movs	r0, #3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_BITNUMBER)];
 8004218:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1U << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_BITNUMBER) + 1U))) 
 800421a:	4aa8      	ldr	r2, [pc, #672]	; (80044bc <HAL_RCC_OscConfig+0x320>)
 800421c:	6013      	str	r3, [r2, #0]
        HAL_InitTick (TICK_INT_PRIORITY);
 800421e:	f002 fc47 	bl	8006ab0 <HAL_InitTick>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004222:	6823      	ldr	r3, [r4, #0]
 8004224:	071b      	lsls	r3, r3, #28
 8004226:	d500      	bpl.n	800422a <HAL_RCC_OscConfig+0x8e>
 8004228:	e0ee      	b.n	8004408 <HAL_RCC_OscConfig+0x26c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800422a:	6823      	ldr	r3, [r4, #0]
 800422c:	075b      	lsls	r3, r3, #29
 800422e:	d500      	bpl.n	8004232 <HAL_RCC_OscConfig+0x96>
 8004230:	e111      	b.n	8004456 <HAL_RCC_OscConfig+0x2ba>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004232:	6823      	ldr	r3, [r4, #0]
 8004234:	069b      	lsls	r3, r3, #26
 8004236:	d500      	bpl.n	800423a <HAL_RCC_OscConfig+0x9e>
 8004238:	e194      	b.n	8004564 <HAL_RCC_OscConfig+0x3c8>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800423a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800423c:	2900      	cmp	r1, #0
 800423e:	d000      	beq.n	8004242 <HAL_RCC_OscConfig+0xa6>
 8004240:	e1c4      	b.n	80045cc <HAL_RCC_OscConfig+0x430>
  return HAL_OK;
 8004242:	2000      	movs	r0, #0
 8004244:	e015      	b.n	8004272 <HAL_RCC_OscConfig+0xd6>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8004246:	210c      	movs	r1, #12
 8004248:	4d99      	ldr	r5, [pc, #612]	; (80044b0 <HAL_RCC_OscConfig+0x314>)
 800424a:	68eb      	ldr	r3, [r5, #12]
 800424c:	400b      	ands	r3, r1
 800424e:	2b08      	cmp	r3, #8
 8004250:	d008      	beq.n	8004264 <HAL_RCC_OscConfig+0xc8>
 8004252:	2380      	movs	r3, #128	; 0x80
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004254:	68ea      	ldr	r2, [r5, #12]
 8004256:	025b      	lsls	r3, r3, #9
 8004258:	400a      	ands	r2, r1
 800425a:	428a      	cmp	r2, r1
 800425c:	d10b      	bne.n	8004276 <HAL_RCC_OscConfig+0xda>
 800425e:	68ea      	ldr	r2, [r5, #12]
 8004260:	421a      	tst	r2, r3
 8004262:	d008      	beq.n	8004276 <HAL_RCC_OscConfig+0xda>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004264:	682b      	ldr	r3, [r5, #0]
 8004266:	039b      	lsls	r3, r3, #14
 8004268:	d59e      	bpl.n	80041a8 <HAL_RCC_OscConfig+0xc>
 800426a:	6863      	ldr	r3, [r4, #4]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d19b      	bne.n	80041a8 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8004270:	2001      	movs	r0, #1
}
 8004272:	b005      	add	sp, #20
 8004274:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004276:	6862      	ldr	r2, [r4, #4]
 8004278:	429a      	cmp	r2, r3
 800427a:	d113      	bne.n	80042a4 <HAL_RCC_OscConfig+0x108>
 800427c:	682a      	ldr	r2, [r5, #0]
 800427e:	4313      	orrs	r3, r2
 8004280:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8004282:	f7ff fcd9 	bl	8003c38 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004286:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 8004288:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800428a:	02b6      	lsls	r6, r6, #10
 800428c:	682b      	ldr	r3, [r5, #0]
 800428e:	4233      	tst	r3, r6
 8004290:	d000      	beq.n	8004294 <HAL_RCC_OscConfig+0xf8>
 8004292:	e789      	b.n	80041a8 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004294:	f7ff fcd0 	bl	8003c38 <HAL_GetTick>
 8004298:	4b89      	ldr	r3, [pc, #548]	; (80044c0 <HAL_RCC_OscConfig+0x324>)
 800429a:	1bc0      	subs	r0, r0, r7
 800429c:	4298      	cmp	r0, r3
 800429e:	d9f5      	bls.n	800428c <HAL_RCC_OscConfig+0xf0>
            return HAL_TIMEOUT;
 80042a0:	2003      	movs	r0, #3
 80042a2:	e7e6      	b.n	8004272 <HAL_RCC_OscConfig+0xd6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80042a4:	21a0      	movs	r1, #160	; 0xa0
 80042a6:	02c9      	lsls	r1, r1, #11
 80042a8:	428a      	cmp	r2, r1
 80042aa:	d105      	bne.n	80042b8 <HAL_RCC_OscConfig+0x11c>
 80042ac:	2280      	movs	r2, #128	; 0x80
 80042ae:	6829      	ldr	r1, [r5, #0]
 80042b0:	02d2      	lsls	r2, r2, #11
 80042b2:	430a      	orrs	r2, r1
 80042b4:	602a      	str	r2, [r5, #0]
 80042b6:	e7e1      	b.n	800427c <HAL_RCC_OscConfig+0xe0>
 80042b8:	6829      	ldr	r1, [r5, #0]
 80042ba:	4882      	ldr	r0, [pc, #520]	; (80044c4 <HAL_RCC_OscConfig+0x328>)
 80042bc:	4001      	ands	r1, r0
 80042be:	6029      	str	r1, [r5, #0]
 80042c0:	6829      	ldr	r1, [r5, #0]
 80042c2:	400b      	ands	r3, r1
 80042c4:	9303      	str	r3, [sp, #12]
 80042c6:	9b03      	ldr	r3, [sp, #12]
 80042c8:	497f      	ldr	r1, [pc, #508]	; (80044c8 <HAL_RCC_OscConfig+0x32c>)
 80042ca:	682b      	ldr	r3, [r5, #0]
 80042cc:	400b      	ands	r3, r1
 80042ce:	602b      	str	r3, [r5, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80042d0:	2a00      	cmp	r2, #0
 80042d2:	d1d6      	bne.n	8004282 <HAL_RCC_OscConfig+0xe6>
        tickstart = HAL_GetTick();
 80042d4:	f7ff fcb0 	bl	8003c38 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042d8:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 80042da:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042dc:	02b6      	lsls	r6, r6, #10
 80042de:	682b      	ldr	r3, [r5, #0]
 80042e0:	4233      	tst	r3, r6
 80042e2:	d100      	bne.n	80042e6 <HAL_RCC_OscConfig+0x14a>
 80042e4:	e760      	b.n	80041a8 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80042e6:	f7ff fca7 	bl	8003c38 <HAL_GetTick>
 80042ea:	4b75      	ldr	r3, [pc, #468]	; (80044c0 <HAL_RCC_OscConfig+0x324>)
 80042ec:	1bc0      	subs	r0, r0, r7
 80042ee:	4298      	cmp	r0, r3
 80042f0:	d9f5      	bls.n	80042de <HAL_RCC_OscConfig+0x142>
 80042f2:	e7d5      	b.n	80042a0 <HAL_RCC_OscConfig+0x104>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80042f4:	210c      	movs	r1, #12
 80042f6:	4d6e      	ldr	r5, [pc, #440]	; (80044b0 <HAL_RCC_OscConfig+0x314>)
 80042f8:	68ea      	ldr	r2, [r5, #12]
 80042fa:	400a      	ands	r2, r1
 80042fc:	2a04      	cmp	r2, #4
 80042fe:	d006      	beq.n	800430e <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004300:	68eb      	ldr	r3, [r5, #12]
 8004302:	400b      	ands	r3, r1
 8004304:	428b      	cmp	r3, r1
 8004306:	d110      	bne.n	800432a <HAL_RCC_OscConfig+0x18e>
 8004308:	68eb      	ldr	r3, [r5, #12]
 800430a:	03db      	lsls	r3, r3, #15
 800430c:	d40d      	bmi.n	800432a <HAL_RCC_OscConfig+0x18e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800430e:	682b      	ldr	r3, [r5, #0]
 8004310:	075b      	lsls	r3, r3, #29
 8004312:	d502      	bpl.n	800431a <HAL_RCC_OscConfig+0x17e>
 8004314:	68e3      	ldr	r3, [r4, #12]
 8004316:	2b01      	cmp	r3, #1
 8004318:	d1aa      	bne.n	8004270 <HAL_RCC_OscConfig+0xd4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800431a:	686a      	ldr	r2, [r5, #4]
 800431c:	6923      	ldr	r3, [r4, #16]
 800431e:	496b      	ldr	r1, [pc, #428]	; (80044cc <HAL_RCC_OscConfig+0x330>)
 8004320:	021b      	lsls	r3, r3, #8
 8004322:	400a      	ands	r2, r1
 8004324:	4313      	orrs	r3, r2
 8004326:	606b      	str	r3, [r5, #4]
 8004328:	e742      	b.n	80041b0 <HAL_RCC_OscConfig+0x14>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800432a:	68e2      	ldr	r2, [r4, #12]
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800432c:	682b      	ldr	r3, [r5, #0]
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800432e:	2a00      	cmp	r2, #0
 8004330:	d010      	beq.n	8004354 <HAL_RCC_OscConfig+0x1b8>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004332:	2109      	movs	r1, #9
 8004334:	438b      	bics	r3, r1
 8004336:	4313      	orrs	r3, r2
 8004338:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800433a:	f7ff fc7d 	bl	8003c38 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800433e:	2604      	movs	r6, #4
        tickstart = HAL_GetTick();
 8004340:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004342:	682b      	ldr	r3, [r5, #0]
 8004344:	4233      	tst	r3, r6
 8004346:	d1e8      	bne.n	800431a <HAL_RCC_OscConfig+0x17e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004348:	f7ff fc76 	bl	8003c38 <HAL_GetTick>
 800434c:	1bc0      	subs	r0, r0, r7
 800434e:	2802      	cmp	r0, #2
 8004350:	d9f7      	bls.n	8004342 <HAL_RCC_OscConfig+0x1a6>
 8004352:	e7a5      	b.n	80042a0 <HAL_RCC_OscConfig+0x104>
        __HAL_RCC_HSI_DISABLE();
 8004354:	2201      	movs	r2, #1
 8004356:	4393      	bics	r3, r2
 8004358:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800435a:	f7ff fc6d 	bl	8003c38 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800435e:	2604      	movs	r6, #4
        tickstart = HAL_GetTick();
 8004360:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004362:	682b      	ldr	r3, [r5, #0]
 8004364:	4233      	tst	r3, r6
 8004366:	d100      	bne.n	800436a <HAL_RCC_OscConfig+0x1ce>
 8004368:	e722      	b.n	80041b0 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800436a:	f7ff fc65 	bl	8003c38 <HAL_GetTick>
 800436e:	1bc0      	subs	r0, r0, r7
 8004370:	2802      	cmp	r0, #2
 8004372:	d9f6      	bls.n	8004362 <HAL_RCC_OscConfig+0x1c6>
 8004374:	e794      	b.n	80042a0 <HAL_RCC_OscConfig+0x104>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004376:	686b      	ldr	r3, [r5, #4]
 8004378:	4a4e      	ldr	r2, [pc, #312]	; (80044b4 <HAL_RCC_OscConfig+0x318>)
 800437a:	4013      	ands	r3, r2
 800437c:	4303      	orrs	r3, r0
 800437e:	606b      	str	r3, [r5, #4]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004380:	686a      	ldr	r2, [r5, #4]
 8004382:	6a23      	ldr	r3, [r4, #32]
 8004384:	0212      	lsls	r2, r2, #8
 8004386:	061b      	lsls	r3, r3, #24
 8004388:	0a12      	lsrs	r2, r2, #8
 800438a:	4313      	orrs	r3, r2
 800438c:	606b      	str	r3, [r5, #4]
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800438e:	f7ff fecb 	bl	8004128 <RCC_SetFlashLatencyFromMSIRange>
 8004392:	2800      	cmp	r0, #0
 8004394:	d100      	bne.n	8004398 <HAL_RCC_OscConfig+0x1fc>
 8004396:	e733      	b.n	8004200 <HAL_RCC_OscConfig+0x64>
 8004398:	e76a      	b.n	8004270 <HAL_RCC_OscConfig+0xd4>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800439a:	69e3      	ldr	r3, [r4, #28]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d020      	beq.n	80043e2 <HAL_RCC_OscConfig+0x246>
        __HAL_RCC_MSI_ENABLE();
 80043a0:	2380      	movs	r3, #128	; 0x80
 80043a2:	682a      	ldr	r2, [r5, #0]
 80043a4:	005b      	lsls	r3, r3, #1
 80043a6:	4313      	orrs	r3, r2
 80043a8:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80043aa:	f7ff fc45 	bl	8003c38 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == RESET)
 80043ae:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 80043b0:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == RESET)
 80043b2:	00b6      	lsls	r6, r6, #2
 80043b4:	682b      	ldr	r3, [r5, #0]
 80043b6:	4233      	tst	r3, r6
 80043b8:	d00d      	beq.n	80043d6 <HAL_RCC_OscConfig+0x23a>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80043ba:	686b      	ldr	r3, [r5, #4]
 80043bc:	4a3d      	ldr	r2, [pc, #244]	; (80044b4 <HAL_RCC_OscConfig+0x318>)
 80043be:	4013      	ands	r3, r2
 80043c0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80043c2:	4313      	orrs	r3, r2
 80043c4:	606b      	str	r3, [r5, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80043c6:	686a      	ldr	r2, [r5, #4]
 80043c8:	6a23      	ldr	r3, [r4, #32]
 80043ca:	0212      	lsls	r2, r2, #8
 80043cc:	061b      	lsls	r3, r3, #24
 80043ce:	0a12      	lsrs	r2, r2, #8
 80043d0:	4313      	orrs	r3, r2
 80043d2:	606b      	str	r3, [r5, #4]
 80043d4:	e725      	b.n	8004222 <HAL_RCC_OscConfig+0x86>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80043d6:	f7ff fc2f 	bl	8003c38 <HAL_GetTick>
 80043da:	1bc0      	subs	r0, r0, r7
 80043dc:	2802      	cmp	r0, #2
 80043de:	d9e9      	bls.n	80043b4 <HAL_RCC_OscConfig+0x218>
 80043e0:	e75e      	b.n	80042a0 <HAL_RCC_OscConfig+0x104>
        __HAL_RCC_MSI_DISABLE();
 80043e2:	682b      	ldr	r3, [r5, #0]
 80043e4:	4a3a      	ldr	r2, [pc, #232]	; (80044d0 <HAL_RCC_OscConfig+0x334>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != RESET)
 80043e6:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_MSI_DISABLE();
 80043e8:	4013      	ands	r3, r2
 80043ea:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80043ec:	f7ff fc24 	bl	8003c38 <HAL_GetTick>
 80043f0:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != RESET)
 80043f2:	00b6      	lsls	r6, r6, #2
 80043f4:	682b      	ldr	r3, [r5, #0]
 80043f6:	4233      	tst	r3, r6
 80043f8:	d100      	bne.n	80043fc <HAL_RCC_OscConfig+0x260>
 80043fa:	e712      	b.n	8004222 <HAL_RCC_OscConfig+0x86>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80043fc:	f7ff fc1c 	bl	8003c38 <HAL_GetTick>
 8004400:	1bc0      	subs	r0, r0, r7
 8004402:	2802      	cmp	r0, #2
 8004404:	d9f6      	bls.n	80043f4 <HAL_RCC_OscConfig+0x258>
 8004406:	e74b      	b.n	80042a0 <HAL_RCC_OscConfig+0x104>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004408:	6962      	ldr	r2, [r4, #20]
 800440a:	2301      	movs	r3, #1
 800440c:	4d28      	ldr	r5, [pc, #160]	; (80044b0 <HAL_RCC_OscConfig+0x314>)
 800440e:	2a00      	cmp	r2, #0
 8004410:	d010      	beq.n	8004434 <HAL_RCC_OscConfig+0x298>
      __HAL_RCC_LSI_ENABLE();
 8004412:	6d2a      	ldr	r2, [r5, #80]	; 0x50
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004414:	2602      	movs	r6, #2
      __HAL_RCC_LSI_ENABLE();
 8004416:	4313      	orrs	r3, r2
 8004418:	652b      	str	r3, [r5, #80]	; 0x50
      tickstart = HAL_GetTick();
 800441a:	f7ff fc0d 	bl	8003c38 <HAL_GetTick>
 800441e:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004420:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8004422:	4233      	tst	r3, r6
 8004424:	d000      	beq.n	8004428 <HAL_RCC_OscConfig+0x28c>
 8004426:	e700      	b.n	800422a <HAL_RCC_OscConfig+0x8e>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004428:	f7ff fc06 	bl	8003c38 <HAL_GetTick>
 800442c:	1bc0      	subs	r0, r0, r7
 800442e:	2802      	cmp	r0, #2
 8004430:	d9f6      	bls.n	8004420 <HAL_RCC_OscConfig+0x284>
 8004432:	e735      	b.n	80042a0 <HAL_RCC_OscConfig+0x104>
      __HAL_RCC_LSI_DISABLE();
 8004434:	6d2a      	ldr	r2, [r5, #80]	; 0x50
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004436:	2602      	movs	r6, #2
      __HAL_RCC_LSI_DISABLE();
 8004438:	439a      	bics	r2, r3
 800443a:	652a      	str	r2, [r5, #80]	; 0x50
      tickstart = HAL_GetTick();
 800443c:	f7ff fbfc 	bl	8003c38 <HAL_GetTick>
 8004440:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004442:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8004444:	4233      	tst	r3, r6
 8004446:	d100      	bne.n	800444a <HAL_RCC_OscConfig+0x2ae>
 8004448:	e6ef      	b.n	800422a <HAL_RCC_OscConfig+0x8e>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800444a:	f7ff fbf5 	bl	8003c38 <HAL_GetTick>
 800444e:	1bc0      	subs	r0, r0, r7
 8004450:	2802      	cmp	r0, #2
 8004452:	d9f6      	bls.n	8004442 <HAL_RCC_OscConfig+0x2a6>
 8004454:	e724      	b.n	80042a0 <HAL_RCC_OscConfig+0x104>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004456:	2380      	movs	r3, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8004458:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800445a:	4d15      	ldr	r5, [pc, #84]	; (80044b0 <HAL_RCC_OscConfig+0x314>)
 800445c:	055b      	lsls	r3, r3, #21
 800445e:	6baa      	ldr	r2, [r5, #56]	; 0x38
    FlagStatus       pwrclkchanged = RESET;
 8004460:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004462:	421a      	tst	r2, r3
 8004464:	d104      	bne.n	8004470 <HAL_RCC_OscConfig+0x2d4>
      __HAL_RCC_PWR_CLK_ENABLE();
 8004466:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8004468:	4313      	orrs	r3, r2
 800446a:	63ab      	str	r3, [r5, #56]	; 0x38
      pwrclkchanged = SET;
 800446c:	2301      	movs	r3, #1
 800446e:	9300      	str	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004470:	2780      	movs	r7, #128	; 0x80
 8004472:	4e18      	ldr	r6, [pc, #96]	; (80044d4 <HAL_RCC_OscConfig+0x338>)
 8004474:	007f      	lsls	r7, r7, #1
 8004476:	6833      	ldr	r3, [r6, #0]
 8004478:	423b      	tst	r3, r7
 800447a:	d008      	beq.n	800448e <HAL_RCC_OscConfig+0x2f2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800447c:	2280      	movs	r2, #128	; 0x80
 800447e:	68a3      	ldr	r3, [r4, #8]
 8004480:	0052      	lsls	r2, r2, #1
 8004482:	4293      	cmp	r3, r2
 8004484:	d128      	bne.n	80044d8 <HAL_RCC_OscConfig+0x33c>
 8004486:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 8004488:	4313      	orrs	r3, r2
 800448a:	652b      	str	r3, [r5, #80]	; 0x50
 800448c:	e049      	b.n	8004522 <HAL_RCC_OscConfig+0x386>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800448e:	6833      	ldr	r3, [r6, #0]
 8004490:	433b      	orrs	r3, r7
 8004492:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8004494:	f7ff fbd0 	bl	8003c38 <HAL_GetTick>
 8004498:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800449a:	6833      	ldr	r3, [r6, #0]
 800449c:	423b      	tst	r3, r7
 800449e:	d1ed      	bne.n	800447c <HAL_RCC_OscConfig+0x2e0>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044a0:	f7ff fbca 	bl	8003c38 <HAL_GetTick>
 80044a4:	9b01      	ldr	r3, [sp, #4]
 80044a6:	1ac0      	subs	r0, r0, r3
 80044a8:	2864      	cmp	r0, #100	; 0x64
 80044aa:	d9f6      	bls.n	800449a <HAL_RCC_OscConfig+0x2fe>
 80044ac:	e6f8      	b.n	80042a0 <HAL_RCC_OscConfig+0x104>
 80044ae:	46c0      	nop			; (mov r8, r8)
 80044b0:	40021000 	.word	0x40021000
 80044b4:	ffff1fff 	.word	0xffff1fff
 80044b8:	08007d41 	.word	0x08007d41
 80044bc:	20000044 	.word	0x20000044
 80044c0:	00001388 	.word	0x00001388
 80044c4:	fffeffff 	.word	0xfffeffff
 80044c8:	fffbffff 	.word	0xfffbffff
 80044cc:	ffffe0ff 	.word	0xffffe0ff
 80044d0:	fffffeff 	.word	0xfffffeff
 80044d4:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d116      	bne.n	800450a <HAL_RCC_OscConfig+0x36e>
 80044dc:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 80044de:	4a60      	ldr	r2, [pc, #384]	; (8004660 <HAL_RCC_OscConfig+0x4c4>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80044e0:	2780      	movs	r7, #128	; 0x80
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80044e2:	4013      	ands	r3, r2
 80044e4:	652b      	str	r3, [r5, #80]	; 0x50
 80044e6:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 80044e8:	4a5e      	ldr	r2, [pc, #376]	; (8004664 <HAL_RCC_OscConfig+0x4c8>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80044ea:	00bf      	lsls	r7, r7, #2
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80044ec:	4013      	ands	r3, r2
 80044ee:	652b      	str	r3, [r5, #80]	; 0x50
      tickstart = HAL_GetTick();
 80044f0:	f7ff fba2 	bl	8003c38 <HAL_GetTick>
 80044f4:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80044f6:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 80044f8:	423b      	tst	r3, r7
 80044fa:	d02a      	beq.n	8004552 <HAL_RCC_OscConfig+0x3b6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80044fc:	f7ff fb9c 	bl	8003c38 <HAL_GetTick>
 8004500:	4b59      	ldr	r3, [pc, #356]	; (8004668 <HAL_RCC_OscConfig+0x4cc>)
 8004502:	1b80      	subs	r0, r0, r6
 8004504:	4298      	cmp	r0, r3
 8004506:	d9f6      	bls.n	80044f6 <HAL_RCC_OscConfig+0x35a>
 8004508:	e6ca      	b.n	80042a0 <HAL_RCC_OscConfig+0x104>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800450a:	21a0      	movs	r1, #160	; 0xa0
 800450c:	00c9      	lsls	r1, r1, #3
 800450e:	428b      	cmp	r3, r1
 8004510:	d10d      	bne.n	800452e <HAL_RCC_OscConfig+0x392>
 8004512:	2380      	movs	r3, #128	; 0x80
 8004514:	6d29      	ldr	r1, [r5, #80]	; 0x50
 8004516:	00db      	lsls	r3, r3, #3
 8004518:	430b      	orrs	r3, r1
 800451a:	652b      	str	r3, [r5, #80]	; 0x50
 800451c:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 800451e:	431a      	orrs	r2, r3
 8004520:	652a      	str	r2, [r5, #80]	; 0x50
      tickstart = HAL_GetTick();
 8004522:	f7ff fb89 	bl	8003c38 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004526:	2780      	movs	r7, #128	; 0x80
      tickstart = HAL_GetTick();
 8004528:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800452a:	00bf      	lsls	r7, r7, #2
 800452c:	e00e      	b.n	800454c <HAL_RCC_OscConfig+0x3b0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800452e:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8004530:	4a4b      	ldr	r2, [pc, #300]	; (8004660 <HAL_RCC_OscConfig+0x4c4>)
 8004532:	4013      	ands	r3, r2
 8004534:	652b      	str	r3, [r5, #80]	; 0x50
 8004536:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8004538:	4a4a      	ldr	r2, [pc, #296]	; (8004664 <HAL_RCC_OscConfig+0x4c8>)
 800453a:	4013      	ands	r3, r2
 800453c:	e7a5      	b.n	800448a <HAL_RCC_OscConfig+0x2ee>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800453e:	f7ff fb7b 	bl	8003c38 <HAL_GetTick>
 8004542:	4b49      	ldr	r3, [pc, #292]	; (8004668 <HAL_RCC_OscConfig+0x4cc>)
 8004544:	1b80      	subs	r0, r0, r6
 8004546:	4298      	cmp	r0, r3
 8004548:	d900      	bls.n	800454c <HAL_RCC_OscConfig+0x3b0>
 800454a:	e6a9      	b.n	80042a0 <HAL_RCC_OscConfig+0x104>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800454c:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 800454e:	423b      	tst	r3, r7
 8004550:	d0f5      	beq.n	800453e <HAL_RCC_OscConfig+0x3a2>
    if(pwrclkchanged == SET)
 8004552:	9b00      	ldr	r3, [sp, #0]
 8004554:	2b01      	cmp	r3, #1
 8004556:	d000      	beq.n	800455a <HAL_RCC_OscConfig+0x3be>
 8004558:	e66b      	b.n	8004232 <HAL_RCC_OscConfig+0x96>
      __HAL_RCC_PWR_CLK_DISABLE();
 800455a:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800455c:	4a43      	ldr	r2, [pc, #268]	; (800466c <HAL_RCC_OscConfig+0x4d0>)
 800455e:	4013      	ands	r3, r2
 8004560:	63ab      	str	r3, [r5, #56]	; 0x38
 8004562:	e666      	b.n	8004232 <HAL_RCC_OscConfig+0x96>
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004564:	69a1      	ldr	r1, [r4, #24]
 8004566:	2301      	movs	r3, #1
 8004568:	4d41      	ldr	r5, [pc, #260]	; (8004670 <HAL_RCC_OscConfig+0x4d4>)
 800456a:	4a42      	ldr	r2, [pc, #264]	; (8004674 <HAL_RCC_OscConfig+0x4d8>)
 800456c:	2900      	cmp	r1, #0
 800456e:	d018      	beq.n	80045a2 <HAL_RCC_OscConfig+0x406>
        __HAL_RCC_HSI48_ENABLE();
 8004570:	68a9      	ldr	r1, [r5, #8]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8004572:	2602      	movs	r6, #2
        __HAL_RCC_HSI48_ENABLE();
 8004574:	4319      	orrs	r1, r3
 8004576:	60a9      	str	r1, [r5, #8]
 8004578:	6b69      	ldr	r1, [r5, #52]	; 0x34
 800457a:	430b      	orrs	r3, r1
 800457c:	636b      	str	r3, [r5, #52]	; 0x34
 800457e:	2380      	movs	r3, #128	; 0x80
 8004580:	6a11      	ldr	r1, [r2, #32]
 8004582:	019b      	lsls	r3, r3, #6
 8004584:	430b      	orrs	r3, r1
 8004586:	6213      	str	r3, [r2, #32]
        tickstart = HAL_GetTick();
 8004588:	f7ff fb56 	bl	8003c38 <HAL_GetTick>
 800458c:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800458e:	68ab      	ldr	r3, [r5, #8]
 8004590:	4233      	tst	r3, r6
 8004592:	d000      	beq.n	8004596 <HAL_RCC_OscConfig+0x3fa>
 8004594:	e651      	b.n	800423a <HAL_RCC_OscConfig+0x9e>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004596:	f7ff fb4f 	bl	8003c38 <HAL_GetTick>
 800459a:	1bc0      	subs	r0, r0, r7
 800459c:	2802      	cmp	r0, #2
 800459e:	d9f6      	bls.n	800458e <HAL_RCC_OscConfig+0x3f2>
 80045a0:	e67e      	b.n	80042a0 <HAL_RCC_OscConfig+0x104>
        __HAL_RCC_HSI48_DISABLE();
 80045a2:	68a9      	ldr	r1, [r5, #8]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80045a4:	2602      	movs	r6, #2
        __HAL_RCC_HSI48_DISABLE();
 80045a6:	4399      	bics	r1, r3
 80045a8:	60a9      	str	r1, [r5, #8]
 80045aa:	6a13      	ldr	r3, [r2, #32]
 80045ac:	4932      	ldr	r1, [pc, #200]	; (8004678 <HAL_RCC_OscConfig+0x4dc>)
 80045ae:	400b      	ands	r3, r1
 80045b0:	6213      	str	r3, [r2, #32]
        tickstart = HAL_GetTick();
 80045b2:	f7ff fb41 	bl	8003c38 <HAL_GetTick>
 80045b6:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80045b8:	68ab      	ldr	r3, [r5, #8]
 80045ba:	4233      	tst	r3, r6
 80045bc:	d100      	bne.n	80045c0 <HAL_RCC_OscConfig+0x424>
 80045be:	e63c      	b.n	800423a <HAL_RCC_OscConfig+0x9e>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80045c0:	f7ff fb3a 	bl	8003c38 <HAL_GetTick>
 80045c4:	1bc0      	subs	r0, r0, r7
 80045c6:	2802      	cmp	r0, #2
 80045c8:	d9f6      	bls.n	80045b8 <HAL_RCC_OscConfig+0x41c>
 80045ca:	e669      	b.n	80042a0 <HAL_RCC_OscConfig+0x104>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80045cc:	220c      	movs	r2, #12
 80045ce:	4d28      	ldr	r5, [pc, #160]	; (8004670 <HAL_RCC_OscConfig+0x4d4>)
      return HAL_ERROR;
 80045d0:	2001      	movs	r0, #1
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80045d2:	68eb      	ldr	r3, [r5, #12]
 80045d4:	4013      	ands	r3, r2
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d100      	bne.n	80045dc <HAL_RCC_OscConfig+0x440>
 80045da:	e64a      	b.n	8004272 <HAL_RCC_OscConfig+0xd6>
        __HAL_RCC_PLL_DISABLE();
 80045dc:	682b      	ldr	r3, [r5, #0]
 80045de:	4a27      	ldr	r2, [pc, #156]	; (800467c <HAL_RCC_OscConfig+0x4e0>)
 80045e0:	4013      	ands	r3, r2
 80045e2:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80045e4:	2902      	cmp	r1, #2
 80045e6:	d12b      	bne.n	8004640 <HAL_RCC_OscConfig+0x4a4>
        tickstart = HAL_GetTick();
 80045e8:	f7ff fb26 	bl	8003c38 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80045ec:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 80045ee:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80045f0:	04b6      	lsls	r6, r6, #18
 80045f2:	682b      	ldr	r3, [r5, #0]
 80045f4:	4233      	tst	r3, r6
 80045f6:	d11d      	bne.n	8004634 <HAL_RCC_OscConfig+0x498>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80045f8:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80045fa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80045fc:	68ea      	ldr	r2, [r5, #12]
 80045fe:	430b      	orrs	r3, r1
 8004600:	491f      	ldr	r1, [pc, #124]	; (8004680 <HAL_RCC_OscConfig+0x4e4>)
 8004602:	400a      	ands	r2, r1
 8004604:	4313      	orrs	r3, r2
 8004606:	6b62      	ldr	r2, [r4, #52]	; 0x34
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004608:	2480      	movs	r4, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800460a:	4313      	orrs	r3, r2
 800460c:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLL_ENABLE();
 800460e:	2380      	movs	r3, #128	; 0x80
 8004610:	682a      	ldr	r2, [r5, #0]
 8004612:	045b      	lsls	r3, r3, #17
 8004614:	4313      	orrs	r3, r2
 8004616:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8004618:	f7ff fb0e 	bl	8003c38 <HAL_GetTick>
 800461c:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800461e:	04a4      	lsls	r4, r4, #18
 8004620:	682b      	ldr	r3, [r5, #0]
 8004622:	4223      	tst	r3, r4
 8004624:	d000      	beq.n	8004628 <HAL_RCC_OscConfig+0x48c>
 8004626:	e60c      	b.n	8004242 <HAL_RCC_OscConfig+0xa6>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004628:	f7ff fb06 	bl	8003c38 <HAL_GetTick>
 800462c:	1b80      	subs	r0, r0, r6
 800462e:	2802      	cmp	r0, #2
 8004630:	d9f6      	bls.n	8004620 <HAL_RCC_OscConfig+0x484>
 8004632:	e635      	b.n	80042a0 <HAL_RCC_OscConfig+0x104>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004634:	f7ff fb00 	bl	8003c38 <HAL_GetTick>
 8004638:	1bc0      	subs	r0, r0, r7
 800463a:	2802      	cmp	r0, #2
 800463c:	d9d9      	bls.n	80045f2 <HAL_RCC_OscConfig+0x456>
 800463e:	e62f      	b.n	80042a0 <HAL_RCC_OscConfig+0x104>
        tickstart = HAL_GetTick();
 8004640:	f7ff fafa 	bl	8003c38 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004644:	2480      	movs	r4, #128	; 0x80
        tickstart = HAL_GetTick();
 8004646:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004648:	04a4      	lsls	r4, r4, #18
 800464a:	682b      	ldr	r3, [r5, #0]
 800464c:	4223      	tst	r3, r4
 800464e:	d100      	bne.n	8004652 <HAL_RCC_OscConfig+0x4b6>
 8004650:	e5f7      	b.n	8004242 <HAL_RCC_OscConfig+0xa6>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004652:	f7ff faf1 	bl	8003c38 <HAL_GetTick>
 8004656:	1b80      	subs	r0, r0, r6
 8004658:	2802      	cmp	r0, #2
 800465a:	d9f6      	bls.n	800464a <HAL_RCC_OscConfig+0x4ae>
 800465c:	e620      	b.n	80042a0 <HAL_RCC_OscConfig+0x104>
 800465e:	46c0      	nop			; (mov r8, r8)
 8004660:	fffffeff 	.word	0xfffffeff
 8004664:	fffffbff 	.word	0xfffffbff
 8004668:	00001388 	.word	0x00001388
 800466c:	efffffff 	.word	0xefffffff
 8004670:	40021000 	.word	0x40021000
 8004674:	40010000 	.word	0x40010000
 8004678:	ffffdfff 	.word	0xffffdfff
 800467c:	feffffff 	.word	0xfeffffff
 8004680:	ff02ffff 	.word	0xff02ffff

08004684 <HAL_RCC_GetSysClockFreq>:
  switch (tmpreg & RCC_CFGR_SWS)
 8004684:	220c      	movs	r2, #12
  tmpreg = RCC->CFGR;
 8004686:	4b18      	ldr	r3, [pc, #96]	; (80046e8 <HAL_RCC_GetSysClockFreq+0x64>)
{
 8004688:	b510      	push	{r4, lr}
  tmpreg = RCC->CFGR;
 800468a:	68d9      	ldr	r1, [r3, #12]
  switch (tmpreg & RCC_CFGR_SWS)
 800468c:	400a      	ands	r2, r1
 800468e:	2a08      	cmp	r2, #8
 8004690:	d026      	beq.n	80046e0 <HAL_RCC_GetSysClockFreq+0x5c>
 8004692:	2a0c      	cmp	r2, #12
 8004694:	d006      	beq.n	80046a4 <HAL_RCC_GetSysClockFreq+0x20>
 8004696:	2a04      	cmp	r2, #4
 8004698:	d11a      	bne.n	80046d0 <HAL_RCC_GetSysClockFreq+0x4c>
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0)
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	06db      	lsls	r3, r3, #27
 800469e:	d421      	bmi.n	80046e4 <HAL_RCC_GetSysClockFreq+0x60>
        sysclockfreq =  HSI_VALUE;
 80046a0:	4812      	ldr	r0, [pc, #72]	; (80046ec <HAL_RCC_GetSysClockFreq+0x68>)
}
 80046a2:	bd10      	pop	{r4, pc}
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80046a4:	028a      	lsls	r2, r1, #10
 80046a6:	4812      	ldr	r0, [pc, #72]	; (80046f0 <HAL_RCC_GetSysClockFreq+0x6c>)
 80046a8:	0f12      	lsrs	r2, r2, #28
 80046aa:	5c82      	ldrb	r2, [r0, r2]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_BITNUMBER) + 1;
 80046ac:	0209      	lsls	r1, r1, #8
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80046ae:	68d8      	ldr	r0, [r3, #12]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_BITNUMBER) + 1;
 80046b0:	0f89      	lsrs	r1, r1, #30
 80046b2:	3101      	adds	r1, #1
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80046b4:	03c0      	lsls	r0, r0, #15
 80046b6:	d504      	bpl.n	80046c2 <HAL_RCC_GetSysClockFreq+0x3e>
        pllvco = (HSE_VALUE * pllm) / plld;
 80046b8:	480e      	ldr	r0, [pc, #56]	; (80046f4 <HAL_RCC_GetSysClockFreq+0x70>)
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 80046ba:	4350      	muls	r0, r2
 80046bc:	f7fb fd2e 	bl	800011c <__udivsi3>
 80046c0:	e7ef      	b.n	80046a2 <HAL_RCC_GetSysClockFreq+0x1e>
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	06db      	lsls	r3, r3, #27
 80046c6:	d501      	bpl.n	80046cc <HAL_RCC_GetSysClockFreq+0x48>
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 80046c8:	480b      	ldr	r0, [pc, #44]	; (80046f8 <HAL_RCC_GetSysClockFreq+0x74>)
 80046ca:	e7f6      	b.n	80046ba <HAL_RCC_GetSysClockFreq+0x36>
         pllvco = (HSI_VALUE * pllm) / plld;
 80046cc:	4807      	ldr	r0, [pc, #28]	; (80046ec <HAL_RCC_GetSysClockFreq+0x68>)
 80046ce:	e7f4      	b.n	80046ba <HAL_RCC_GetSysClockFreq+0x36>
      sysclockfreq = (32768 * (1 << (msiclkrange + 1)));
 80046d0:	2080      	movs	r0, #128	; 0x80
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_BITNUMBER;
 80046d2:	685b      	ldr	r3, [r3, #4]
      sysclockfreq = (32768 * (1 << (msiclkrange + 1)));
 80046d4:	0200      	lsls	r0, r0, #8
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_BITNUMBER;
 80046d6:	041b      	lsls	r3, r3, #16
 80046d8:	0f5b      	lsrs	r3, r3, #29
      sysclockfreq = (32768 * (1 << (msiclkrange + 1)));
 80046da:	3301      	adds	r3, #1
 80046dc:	4098      	lsls	r0, r3
 80046de:	e7e0      	b.n	80046a2 <HAL_RCC_GetSysClockFreq+0x1e>
      sysclockfreq = HSE_VALUE;
 80046e0:	4804      	ldr	r0, [pc, #16]	; (80046f4 <HAL_RCC_GetSysClockFreq+0x70>)
 80046e2:	e7de      	b.n	80046a2 <HAL_RCC_GetSysClockFreq+0x1e>
        sysclockfreq =  (HSI_VALUE >> 2);
 80046e4:	4804      	ldr	r0, [pc, #16]	; (80046f8 <HAL_RCC_GetSysClockFreq+0x74>)
  return sysclockfreq;
 80046e6:	e7dc      	b.n	80046a2 <HAL_RCC_GetSysClockFreq+0x1e>
 80046e8:	40021000 	.word	0x40021000
 80046ec:	00f42400 	.word	0x00f42400
 80046f0:	08007d38 	.word	0x08007d38
 80046f4:	007a1200 	.word	0x007a1200
 80046f8:	003d0900 	.word	0x003d0900

080046fc <HAL_RCC_ClockConfig>:
{
 80046fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80046fe:	2201      	movs	r2, #1
 8004700:	4c53      	ldr	r4, [pc, #332]	; (8004850 <HAL_RCC_ClockConfig+0x154>)
{
 8004702:	0006      	movs	r6, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8004704:	6823      	ldr	r3, [r4, #0]
{
 8004706:	9101      	str	r1, [sp, #4]
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8004708:	4013      	ands	r3, r2
 800470a:	428b      	cmp	r3, r1
 800470c:	d328      	bcc.n	8004760 <HAL_RCC_ClockConfig+0x64>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800470e:	6832      	ldr	r2, [r6, #0]
 8004710:	0793      	lsls	r3, r2, #30
 8004712:	d431      	bmi.n	8004778 <HAL_RCC_ClockConfig+0x7c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004714:	07d3      	lsls	r3, r2, #31
 8004716:	d437      	bmi.n	8004788 <HAL_RCC_ClockConfig+0x8c>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8004718:	2301      	movs	r3, #1
 800471a:	6822      	ldr	r2, [r4, #0]
 800471c:	9901      	ldr	r1, [sp, #4]
 800471e:	401a      	ands	r2, r3
 8004720:	4291      	cmp	r1, r2
 8004722:	d200      	bcs.n	8004726 <HAL_RCC_ClockConfig+0x2a>
 8004724:	e085      	b.n	8004832 <HAL_RCC_ClockConfig+0x136>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004726:	6832      	ldr	r2, [r6, #0]
 8004728:	4c4a      	ldr	r4, [pc, #296]	; (8004854 <HAL_RCC_ClockConfig+0x158>)
 800472a:	0753      	lsls	r3, r2, #29
 800472c:	d500      	bpl.n	8004730 <HAL_RCC_ClockConfig+0x34>
 800472e:	e087      	b.n	8004840 <HAL_RCC_ClockConfig+0x144>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004730:	0713      	lsls	r3, r2, #28
 8004732:	d506      	bpl.n	8004742 <HAL_RCC_ClockConfig+0x46>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004734:	68e2      	ldr	r2, [r4, #12]
 8004736:	6933      	ldr	r3, [r6, #16]
 8004738:	4947      	ldr	r1, [pc, #284]	; (8004858 <HAL_RCC_ClockConfig+0x15c>)
 800473a:	00db      	lsls	r3, r3, #3
 800473c:	400a      	ands	r2, r1
 800473e:	4313      	orrs	r3, r2
 8004740:	60e3      	str	r3, [r4, #12]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004742:	f7ff ff9f 	bl	8004684 <HAL_RCC_GetSysClockFreq>
 8004746:	68e3      	ldr	r3, [r4, #12]
 8004748:	4a44      	ldr	r2, [pc, #272]	; (800485c <HAL_RCC_ClockConfig+0x160>)
 800474a:	061b      	lsls	r3, r3, #24
 800474c:	0f1b      	lsrs	r3, r3, #28
 800474e:	5cd3      	ldrb	r3, [r2, r3]
 8004750:	40d8      	lsrs	r0, r3
 8004752:	4b43      	ldr	r3, [pc, #268]	; (8004860 <HAL_RCC_ClockConfig+0x164>)
 8004754:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8004756:	2003      	movs	r0, #3
 8004758:	f002 f9aa 	bl	8006ab0 <HAL_InitTick>
  return HAL_OK;
 800475c:	2000      	movs	r0, #0
 800475e:	e00a      	b.n	8004776 <HAL_RCC_ClockConfig+0x7a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004760:	6823      	ldr	r3, [r4, #0]
 8004762:	9901      	ldr	r1, [sp, #4]
 8004764:	4393      	bics	r3, r2
 8004766:	430b      	orrs	r3, r1
 8004768:	6023      	str	r3, [r4, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800476a:	6823      	ldr	r3, [r4, #0]
 800476c:	4013      	ands	r3, r2
 800476e:	9a01      	ldr	r2, [sp, #4]
 8004770:	429a      	cmp	r2, r3
 8004772:	d0cc      	beq.n	800470e <HAL_RCC_ClockConfig+0x12>
      return HAL_ERROR;
 8004774:	2001      	movs	r0, #1
}
 8004776:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004778:	20f0      	movs	r0, #240	; 0xf0
 800477a:	4936      	ldr	r1, [pc, #216]	; (8004854 <HAL_RCC_ClockConfig+0x158>)
 800477c:	68cb      	ldr	r3, [r1, #12]
 800477e:	4383      	bics	r3, r0
 8004780:	68b0      	ldr	r0, [r6, #8]
 8004782:	4303      	orrs	r3, r0
 8004784:	60cb      	str	r3, [r1, #12]
 8004786:	e7c5      	b.n	8004714 <HAL_RCC_ClockConfig+0x18>
 8004788:	4d32      	ldr	r5, [pc, #200]	; (8004854 <HAL_RCC_ClockConfig+0x158>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800478a:	6872      	ldr	r2, [r6, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800478c:	682b      	ldr	r3, [r5, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800478e:	2a02      	cmp	r2, #2
 8004790:	d119      	bne.n	80047c6 <HAL_RCC_ClockConfig+0xca>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004792:	039b      	lsls	r3, r3, #14
 8004794:	d5ee      	bpl.n	8004774 <HAL_RCC_ClockConfig+0x78>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004796:	2103      	movs	r1, #3
 8004798:	68eb      	ldr	r3, [r5, #12]
 800479a:	438b      	bics	r3, r1
 800479c:	4313      	orrs	r3, r2
 800479e:	60eb      	str	r3, [r5, #12]
    tickstart = HAL_GetTick();
 80047a0:	f7ff fa4a 	bl	8003c38 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80047a4:	6873      	ldr	r3, [r6, #4]
    tickstart = HAL_GetTick();
 80047a6:	0007      	movs	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80047a8:	2b02      	cmp	r3, #2
 80047aa:	d119      	bne.n	80047e0 <HAL_RCC_ClockConfig+0xe4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80047ac:	220c      	movs	r2, #12
 80047ae:	68eb      	ldr	r3, [r5, #12]
 80047b0:	4013      	ands	r3, r2
 80047b2:	2b08      	cmp	r3, #8
 80047b4:	d0b0      	beq.n	8004718 <HAL_RCC_ClockConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047b6:	f7ff fa3f 	bl	8003c38 <HAL_GetTick>
 80047ba:	4b2a      	ldr	r3, [pc, #168]	; (8004864 <HAL_RCC_ClockConfig+0x168>)
 80047bc:	1bc0      	subs	r0, r0, r7
 80047be:	4298      	cmp	r0, r3
 80047c0:	d9f4      	bls.n	80047ac <HAL_RCC_ClockConfig+0xb0>
          return HAL_TIMEOUT;
 80047c2:	2003      	movs	r0, #3
 80047c4:	e7d7      	b.n	8004776 <HAL_RCC_ClockConfig+0x7a>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80047c6:	2a03      	cmp	r2, #3
 80047c8:	d102      	bne.n	80047d0 <HAL_RCC_ClockConfig+0xd4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047ca:	019b      	lsls	r3, r3, #6
 80047cc:	d4e3      	bmi.n	8004796 <HAL_RCC_ClockConfig+0x9a>
 80047ce:	e7d1      	b.n	8004774 <HAL_RCC_ClockConfig+0x78>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80047d0:	2a01      	cmp	r2, #1
 80047d2:	d102      	bne.n	80047da <HAL_RCC_ClockConfig+0xde>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047d4:	075b      	lsls	r3, r3, #29
 80047d6:	d4de      	bmi.n	8004796 <HAL_RCC_ClockConfig+0x9a>
 80047d8:	e7cc      	b.n	8004774 <HAL_RCC_ClockConfig+0x78>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == RESET)
 80047da:	059b      	lsls	r3, r3, #22
 80047dc:	d4db      	bmi.n	8004796 <HAL_RCC_ClockConfig+0x9a>
 80047de:	e7c9      	b.n	8004774 <HAL_RCC_ClockConfig+0x78>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80047e0:	2b03      	cmp	r3, #3
 80047e2:	d10c      	bne.n	80047fe <HAL_RCC_ClockConfig+0x102>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80047e4:	220c      	movs	r2, #12
 80047e6:	68eb      	ldr	r3, [r5, #12]
 80047e8:	4013      	ands	r3, r2
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d100      	bne.n	80047f0 <HAL_RCC_ClockConfig+0xf4>
 80047ee:	e793      	b.n	8004718 <HAL_RCC_ClockConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047f0:	f7ff fa22 	bl	8003c38 <HAL_GetTick>
 80047f4:	4b1b      	ldr	r3, [pc, #108]	; (8004864 <HAL_RCC_ClockConfig+0x168>)
 80047f6:	1bc0      	subs	r0, r0, r7
 80047f8:	4298      	cmp	r0, r3
 80047fa:	d9f3      	bls.n	80047e4 <HAL_RCC_ClockConfig+0xe8>
 80047fc:	e7e1      	b.n	80047c2 <HAL_RCC_ClockConfig+0xc6>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80047fe:	2b01      	cmp	r3, #1
 8004800:	d011      	beq.n	8004826 <HAL_RCC_ClockConfig+0x12a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8004802:	220c      	movs	r2, #12
 8004804:	68eb      	ldr	r3, [r5, #12]
 8004806:	4213      	tst	r3, r2
 8004808:	d100      	bne.n	800480c <HAL_RCC_ClockConfig+0x110>
 800480a:	e785      	b.n	8004718 <HAL_RCC_ClockConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800480c:	f7ff fa14 	bl	8003c38 <HAL_GetTick>
 8004810:	4b14      	ldr	r3, [pc, #80]	; (8004864 <HAL_RCC_ClockConfig+0x168>)
 8004812:	1bc0      	subs	r0, r0, r7
 8004814:	4298      	cmp	r0, r3
 8004816:	d9f4      	bls.n	8004802 <HAL_RCC_ClockConfig+0x106>
 8004818:	e7d3      	b.n	80047c2 <HAL_RCC_ClockConfig+0xc6>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800481a:	f7ff fa0d 	bl	8003c38 <HAL_GetTick>
 800481e:	4b11      	ldr	r3, [pc, #68]	; (8004864 <HAL_RCC_ClockConfig+0x168>)
 8004820:	1bc0      	subs	r0, r0, r7
 8004822:	4298      	cmp	r0, r3
 8004824:	d8cd      	bhi.n	80047c2 <HAL_RCC_ClockConfig+0xc6>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004826:	220c      	movs	r2, #12
 8004828:	68eb      	ldr	r3, [r5, #12]
 800482a:	4013      	ands	r3, r2
 800482c:	2b04      	cmp	r3, #4
 800482e:	d1f4      	bne.n	800481a <HAL_RCC_ClockConfig+0x11e>
 8004830:	e772      	b.n	8004718 <HAL_RCC_ClockConfig+0x1c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004832:	6822      	ldr	r2, [r4, #0]
 8004834:	439a      	bics	r2, r3
 8004836:	6022      	str	r2, [r4, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004838:	6822      	ldr	r2, [r4, #0]
 800483a:	421a      	tst	r2, r3
 800483c:	d19a      	bne.n	8004774 <HAL_RCC_ClockConfig+0x78>
 800483e:	e772      	b.n	8004726 <HAL_RCC_ClockConfig+0x2a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004840:	68e3      	ldr	r3, [r4, #12]
 8004842:	4909      	ldr	r1, [pc, #36]	; (8004868 <HAL_RCC_ClockConfig+0x16c>)
 8004844:	400b      	ands	r3, r1
 8004846:	68f1      	ldr	r1, [r6, #12]
 8004848:	430b      	orrs	r3, r1
 800484a:	60e3      	str	r3, [r4, #12]
 800484c:	e770      	b.n	8004730 <HAL_RCC_ClockConfig+0x34>
 800484e:	46c0      	nop			; (mov r8, r8)
 8004850:	40022000 	.word	0x40022000
 8004854:	40021000 	.word	0x40021000
 8004858:	ffffc7ff 	.word	0xffffc7ff
 800485c:	08007d41 	.word	0x08007d41
 8004860:	20000044 	.word	0x20000044
 8004864:	00001388 	.word	0x00001388
 8004868:	fffff8ff 	.word	0xfffff8ff

0800486c <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800486c:	4b04      	ldr	r3, [pc, #16]	; (8004880 <HAL_RCC_GetPCLK1Freq+0x14>)
 800486e:	4a05      	ldr	r2, [pc, #20]	; (8004884 <HAL_RCC_GetPCLK1Freq+0x18>)
 8004870:	68db      	ldr	r3, [r3, #12]
 8004872:	055b      	lsls	r3, r3, #21
 8004874:	0f5b      	lsrs	r3, r3, #29
 8004876:	5cd3      	ldrb	r3, [r2, r3]
 8004878:	4a03      	ldr	r2, [pc, #12]	; (8004888 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800487a:	6810      	ldr	r0, [r2, #0]
 800487c:	40d8      	lsrs	r0, r3
}    
 800487e:	4770      	bx	lr
 8004880:	40021000 	.word	0x40021000
 8004884:	08007d51 	.word	0x08007d51
 8004888:	20000044 	.word	0x20000044

0800488c <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800488c:	4b04      	ldr	r3, [pc, #16]	; (80048a0 <HAL_RCC_GetPCLK2Freq+0x14>)
 800488e:	4a05      	ldr	r2, [pc, #20]	; (80048a4 <HAL_RCC_GetPCLK2Freq+0x18>)
 8004890:	68db      	ldr	r3, [r3, #12]
 8004892:	049b      	lsls	r3, r3, #18
 8004894:	0f5b      	lsrs	r3, r3, #29
 8004896:	5cd3      	ldrb	r3, [r2, r3]
 8004898:	4a03      	ldr	r2, [pc, #12]	; (80048a8 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800489a:	6810      	ldr	r0, [r2, #0]
 800489c:	40d8      	lsrs	r0, r3
} 
 800489e:	4770      	bx	lr
 80048a0:	40021000 	.word	0x40021000
 80048a4:	08007d51 	.word	0x08007d51
 80048a8:	20000044 	.word	0x20000044

080048ac <HAL_RCCEx_PeriphCLKConfig>:
  
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*------------------------------- RTC/LCD Configuration ------------------------*/ 
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC) 
 80048ac:	6803      	ldr	r3, [r0, #0]
{
 80048ae:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80048b0:	0005      	movs	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC) 
 80048b2:	069b      	lsls	r3, r3, #26
 80048b4:	d53a      	bpl.n	800492c <HAL_RCCEx_PeriphCLKConfig+0x80>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80048b6:	2380      	movs	r3, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 80048b8:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80048ba:	4c5f      	ldr	r4, [pc, #380]	; (8004a38 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 80048bc:	055b      	lsls	r3, r3, #21
 80048be:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    FlagStatus       pwrclkchanged = RESET;
 80048c0:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80048c2:	421a      	tst	r2, r3
 80048c4:	d104      	bne.n	80048d0 <HAL_RCCEx_PeriphCLKConfig+0x24>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80048c6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80048c8:	4313      	orrs	r3, r2
 80048ca:	63a3      	str	r3, [r4, #56]	; 0x38
      pwrclkchanged = SET;
 80048cc:	2301      	movs	r3, #1
 80048ce:	9300      	str	r3, [sp, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048d0:	2780      	movs	r7, #128	; 0x80
 80048d2:	4e5a      	ldr	r6, [pc, #360]	; (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x190>)
 80048d4:	007f      	lsls	r7, r7, #1
 80048d6:	6833      	ldr	r3, [r6, #0]
 80048d8:	423b      	tst	r3, r7
 80048da:	d069      	beq.n	80049b0 <HAL_RCCEx_PeriphCLKConfig+0x104>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */ 
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80048dc:	22c0      	movs	r2, #192	; 0xc0
 80048de:	21c0      	movs	r1, #192	; 0xc0
 80048e0:	6820      	ldr	r0, [r4, #0]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80048e2:	686b      	ldr	r3, [r5, #4]
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80048e4:	0392      	lsls	r2, r2, #14
 80048e6:	4010      	ands	r0, r2
 80048e8:	0289      	lsls	r1, r1, #10
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80048ea:	401a      	ands	r2, r3
 80048ec:	4290      	cmp	r0, r2
 80048ee:	d000      	beq.n	80048f2 <HAL_RCCEx_PeriphCLKConfig+0x46>
 80048f0:	e06f      	b.n	80049d2 <HAL_RCCEx_PeriphCLKConfig+0x126>
        return HAL_ERROR; 
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 80048f2:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80048f4:	400a      	ands	r2, r1
    
    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80048f6:	d000      	beq.n	80048fa <HAL_RCCEx_PeriphCLKConfig+0x4e>
 80048f8:	e076      	b.n	80049e8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80048fa:	6869      	ldr	r1, [r5, #4]
 80048fc:	23c0      	movs	r3, #192	; 0xc0
 80048fe:	000a      	movs	r2, r1
 8004900:	029b      	lsls	r3, r3, #10
 8004902:	401a      	ands	r2, r3
 8004904:	429a      	cmp	r2, r3
 8004906:	d107      	bne.n	8004918 <HAL_RCCEx_PeriphCLKConfig+0x6c>
 8004908:	6823      	ldr	r3, [r4, #0]
 800490a:	484d      	ldr	r0, [pc, #308]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 800490c:	4003      	ands	r3, r0
 800490e:	20c0      	movs	r0, #192	; 0xc0
 8004910:	0380      	lsls	r0, r0, #14
 8004912:	4001      	ands	r1, r0
 8004914:	430b      	orrs	r3, r1
 8004916:	6023      	str	r3, [r4, #0]
 8004918:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800491a:	431a      	orrs	r2, r3

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800491c:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800491e:	6522      	str	r2, [r4, #80]	; 0x50
    if(pwrclkchanged == SET)
 8004920:	2b01      	cmp	r3, #1
 8004922:	d103      	bne.n	800492c <HAL_RCCEx_PeriphCLKConfig+0x80>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004924:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004926:	4a47      	ldr	r2, [pc, #284]	; (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8004928:	4013      	ands	r3, r2
 800492a:	63a3      	str	r3, [r4, #56]	; 0x38
    }
  }
  
#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800492c:	682b      	ldr	r3, [r5, #0]
 800492e:	07da      	lsls	r2, r3, #31
 8004930:	d506      	bpl.n	8004940 <HAL_RCCEx_PeriphCLKConfig+0x94>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004932:	2003      	movs	r0, #3
 8004934:	4940      	ldr	r1, [pc, #256]	; (8004a38 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8004936:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8004938:	4382      	bics	r2, r0
 800493a:	68a8      	ldr	r0, [r5, #8]
 800493c:	4302      	orrs	r2, r0
 800493e:	64ca      	str	r2, [r1, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */
  
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004940:	079a      	lsls	r2, r3, #30
 8004942:	d506      	bpl.n	8004952 <HAL_RCCEx_PeriphCLKConfig+0xa6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004944:	200c      	movs	r0, #12
 8004946:	493c      	ldr	r1, [pc, #240]	; (8004a38 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8004948:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 800494a:	4382      	bics	r2, r0
 800494c:	68e8      	ldr	r0, [r5, #12]
 800494e:	4302      	orrs	r2, r0
 8004950:	64ca      	str	r2, [r1, #76]	; 0x4c
  }
  
  /*------------------------------ LPUART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004952:	075a      	lsls	r2, r3, #29
 8004954:	d506      	bpl.n	8004964 <HAL_RCCEx_PeriphCLKConfig+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));
    
    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004956:	4938      	ldr	r1, [pc, #224]	; (8004a38 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8004958:	483b      	ldr	r0, [pc, #236]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x19c>)
 800495a:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 800495c:	4002      	ands	r2, r0
 800495e:	6928      	ldr	r0, [r5, #16]
 8004960:	4302      	orrs	r2, r0
 8004962:	64ca      	str	r2, [r1, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004964:	071a      	lsls	r2, r3, #28
 8004966:	d506      	bpl.n	8004976 <HAL_RCCEx_PeriphCLKConfig+0xca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004968:	4933      	ldr	r1, [pc, #204]	; (8004a38 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 800496a:	4838      	ldr	r0, [pc, #224]	; (8004a4c <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 800496c:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 800496e:	4002      	ands	r2, r0
 8004970:	6968      	ldr	r0, [r5, #20]
 8004972:	4302      	orrs	r2, r0
 8004974:	64ca      	str	r2, [r1, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004976:	05da      	lsls	r2, r3, #23
 8004978:	d506      	bpl.n	8004988 <HAL_RCCEx_PeriphCLKConfig+0xdc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800497a:	492f      	ldr	r1, [pc, #188]	; (8004a38 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 800497c:	4834      	ldr	r0, [pc, #208]	; (8004a50 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800497e:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8004980:	4002      	ands	r2, r0
 8004982:	69a8      	ldr	r0, [r5, #24]
 8004984:	4302      	orrs	r2, r0
 8004986:	64ca      	str	r2, [r1, #76]	; 0x4c
  }  
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004988:	065a      	lsls	r2, r3, #25
 800498a:	d506      	bpl.n	800499a <HAL_RCCEx_PeriphCLKConfig+0xee>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800498c:	492a      	ldr	r1, [pc, #168]	; (8004a38 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 800498e:	4831      	ldr	r0, [pc, #196]	; (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004990:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8004992:	4002      	ands	r2, r0
 8004994:	6a28      	ldr	r0, [r5, #32]
 8004996:	4302      	orrs	r2, r0
 8004998:	64ca      	str	r2, [r1, #76]	; 0x4c
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
  }

  return HAL_OK;
 800499a:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800499c:	061b      	lsls	r3, r3, #24
 800499e:	d517      	bpl.n	80049d0 <HAL_RCCEx_PeriphCLKConfig+0x124>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 80049a0:	4a25      	ldr	r2, [pc, #148]	; (8004a38 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 80049a2:	492d      	ldr	r1, [pc, #180]	; (8004a58 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80049a4:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80049a6:	400b      	ands	r3, r1
 80049a8:	69e9      	ldr	r1, [r5, #28]
 80049aa:	430b      	orrs	r3, r1
 80049ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80049ae:	e00f      	b.n	80049d0 <HAL_RCCEx_PeriphCLKConfig+0x124>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80049b0:	6833      	ldr	r3, [r6, #0]
 80049b2:	433b      	orrs	r3, r7
 80049b4:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80049b6:	f7ff f93f 	bl	8003c38 <HAL_GetTick>
 80049ba:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049bc:	6833      	ldr	r3, [r6, #0]
 80049be:	423b      	tst	r3, r7
 80049c0:	d18c      	bne.n	80048dc <HAL_RCCEx_PeriphCLKConfig+0x30>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80049c2:	f7ff f939 	bl	8003c38 <HAL_GetTick>
 80049c6:	9b01      	ldr	r3, [sp, #4]
 80049c8:	1ac0      	subs	r0, r0, r3
 80049ca:	2864      	cmp	r0, #100	; 0x64
 80049cc:	d9f6      	bls.n	80049bc <HAL_RCCEx_PeriphCLKConfig+0x110>
          return HAL_TIMEOUT;
 80049ce:	2003      	movs	r0, #3
}
 80049d0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      if (((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE) && HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80049d2:	001a      	movs	r2, r3
 80049d4:	400a      	ands	r2, r1
 80049d6:	428a      	cmp	r2, r1
 80049d8:	d000      	beq.n	80049dc <HAL_RCCEx_PeriphCLKConfig+0x130>
 80049da:	e78a      	b.n	80048f2 <HAL_RCCEx_PeriphCLKConfig+0x46>
 80049dc:	6822      	ldr	r2, [r4, #0]
        return HAL_ERROR; 
 80049de:	2001      	movs	r0, #1
      if (((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE) && HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80049e0:	0392      	lsls	r2, r2, #14
 80049e2:	d400      	bmi.n	80049e6 <HAL_RCCEx_PeriphCLKConfig+0x13a>
 80049e4:	e785      	b.n	80048f2 <HAL_RCCEx_PeriphCLKConfig+0x46>
 80049e6:	e7f3      	b.n	80049d0 <HAL_RCCEx_PeriphCLKConfig+0x124>
    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80049e8:	400b      	ands	r3, r1
 80049ea:	429a      	cmp	r2, r3
 80049ec:	d100      	bne.n	80049f0 <HAL_RCCEx_PeriphCLKConfig+0x144>
 80049ee:	e784      	b.n	80048fa <HAL_RCCEx_PeriphCLKConfig+0x4e>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80049f0:	682b      	ldr	r3, [r5, #0]
 80049f2:	069b      	lsls	r3, r3, #26
 80049f4:	d400      	bmi.n	80049f8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 80049f6:	e780      	b.n	80048fa <HAL_RCCEx_PeriphCLKConfig+0x4e>
      __HAL_RCC_BACKUPRESET_FORCE();
 80049f8:	2280      	movs	r2, #128	; 0x80
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80049fa:	6d21      	ldr	r1, [r4, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_FORCE();
 80049fc:	6d20      	ldr	r0, [r4, #80]	; 0x50
 80049fe:	0312      	lsls	r2, r2, #12
 8004a00:	4302      	orrs	r2, r0
 8004a02:	6522      	str	r2, [r4, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004a04:	6d22      	ldr	r2, [r4, #80]	; 0x50
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8004a06:	4b12      	ldr	r3, [pc, #72]	; (8004a50 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004a08:	4814      	ldr	r0, [pc, #80]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8004a0a:	400b      	ands	r3, r1
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004a0c:	4002      	ands	r2, r0
 8004a0e:	6522      	str	r2, [r4, #80]	; 0x50
      RCC->CSR = temp_reg;
 8004a10:	6523      	str	r3, [r4, #80]	; 0x50
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8004a12:	05cb      	lsls	r3, r1, #23
 8004a14:	d400      	bmi.n	8004a18 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8004a16:	e770      	b.n	80048fa <HAL_RCCEx_PeriphCLKConfig+0x4e>
        tickstart = HAL_GetTick();
 8004a18:	f7ff f90e 	bl	8003c38 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a1c:	2780      	movs	r7, #128	; 0x80
        tickstart = HAL_GetTick();
 8004a1e:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a20:	00bf      	lsls	r7, r7, #2
 8004a22:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8004a24:	423b      	tst	r3, r7
 8004a26:	d000      	beq.n	8004a2a <HAL_RCCEx_PeriphCLKConfig+0x17e>
 8004a28:	e767      	b.n	80048fa <HAL_RCCEx_PeriphCLKConfig+0x4e>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a2a:	f7ff f905 	bl	8003c38 <HAL_GetTick>
 8004a2e:	4b0c      	ldr	r3, [pc, #48]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004a30:	1b80      	subs	r0, r0, r6
 8004a32:	4298      	cmp	r0, r3
 8004a34:	d9f5      	bls.n	8004a22 <HAL_RCCEx_PeriphCLKConfig+0x176>
 8004a36:	e7ca      	b.n	80049ce <HAL_RCCEx_PeriphCLKConfig+0x122>
 8004a38:	40021000 	.word	0x40021000
 8004a3c:	40007000 	.word	0x40007000
 8004a40:	ffcfffff 	.word	0xffcfffff
 8004a44:	efffffff 	.word	0xefffffff
 8004a48:	fffff3ff 	.word	0xfffff3ff
 8004a4c:	ffffcfff 	.word	0xffffcfff
 8004a50:	fffcffff 	.word	0xfffcffff
 8004a54:	fbffffff 	.word	0xfbffffff
 8004a58:	fff3ffff 	.word	0xfff3ffff
 8004a5c:	fff7ffff 	.word	0xfff7ffff
 8004a60:	00001388 	.word	0x00001388

08004a64 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_I2C3     I2C3 peripheral clock (*)
  * @note   (*) means that this peripheral is not present on all the devices
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004a64:	b570      	push	{r4, r5, r6, lr}
#endif /* USB */

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));
  
  switch (PeriphClk)
 8004a66:	2808      	cmp	r0, #8
 8004a68:	d100      	bne.n	8004a6c <HAL_RCCEx_GetPeriphCLKFreq+0x8>
 8004a6a:	e0c3      	b.n	8004bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x190>
 8004a6c:	d810      	bhi.n	8004a90 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>
 8004a6e:	2802      	cmp	r0, #2
 8004a70:	d100      	bne.n	8004a74 <HAL_RCCEx_GetPeriphCLKFreq+0x10>
 8004a72:	e095      	b.n	8004ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
 8004a74:	2804      	cmp	r0, #4
 8004a76:	d100      	bne.n	8004a7a <HAL_RCCEx_GetPeriphCLKFreq+0x16>
 8004a78:	e0a2      	b.n	8004bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
 8004a7a:	2801      	cmp	r0, #1
 8004a7c:	d10e      	bne.n	8004a9c <HAL_RCCEx_GetPeriphCLKFreq+0x38>
#endif /* USB */
#if defined(RCC_CCIPR_USART1SEL)
  case RCC_PERIPHCLK_USART1:
    {
      /* Get the current USART1 source */
      srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8004a7e:	2103      	movs	r1, #3
 8004a80:	4a69      	ldr	r2, [pc, #420]	; (8004c28 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>)
 8004a82:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8004a84:	400b      	ands	r3, r1

      /* Check if USART1 clock selection is PCLK2 */
      if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8004a86:	d000      	beq.n	8004a8a <HAL_RCCEx_GetPeriphCLKFreq+0x26>
 8004a88:	e079      	b.n	8004b7e <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
      {
        frequency = HAL_RCC_GetPCLK2Freq();
 8004a8a:	f7ff feff 	bl	800488c <HAL_RCC_GetPCLK2Freq>
 8004a8e:	e032      	b.n	8004af6 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  switch (PeriphClk)
 8004a90:	2820      	cmp	r0, #32
 8004a92:	d019      	beq.n	8004ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
 8004a94:	d804      	bhi.n	8004aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8004a96:	2810      	cmp	r0, #16
 8004a98:	d100      	bne.n	8004a9c <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8004a9a:	e0bb      	b.n	8004c14 <HAL_RCCEx_GetPeriphCLKFreq+0x1b0>
  uint32_t temp_reg = 0U, clkprediv = 0U, frequency = 0U;
 8004a9c:	2000      	movs	r0, #0
 8004a9e:	e02a      	b.n	8004af6 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  switch (PeriphClk)
 8004aa0:	2840      	cmp	r0, #64	; 0x40
 8004aa2:	d044      	beq.n	8004b2e <HAL_RCCEx_GetPeriphCLKFreq+0xca>
 8004aa4:	2380      	movs	r3, #128	; 0x80
 8004aa6:	005b      	lsls	r3, r3, #1
 8004aa8:	4298      	cmp	r0, r3
 8004aaa:	d1f7      	bne.n	8004a9c <HAL_RCCEx_GetPeriphCLKFreq+0x38>

#if defined(RCC_CCIPR_I2C3SEL)
  case RCC_PERIPHCLK_I2C3:
    {
      /* Get the current I2C1 source */
      srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8004aac:	21c0      	movs	r1, #192	; 0xc0
 8004aae:	4a5e      	ldr	r2, [pc, #376]	; (8004c28 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>)
 8004ab0:	0289      	lsls	r1, r1, #10
 8004ab2:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8004ab4:	400b      	ands	r3, r1

      /* Check if I2C3 clock selection is PCLK1 */
      if (srcclk == RCC_I2C3CLKSOURCE_PCLK1)
 8004ab6:	d100      	bne.n	8004aba <HAL_RCCEx_GetPeriphCLKFreq+0x56>
 8004ab8:	e077      	b.n	8004baa <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      {
        frequency = HAL_RCC_GetPCLK1Freq();
      }
      /* Check if HSI is ready and if I2C3 clock selection is HSI */
      else if ((srcclk == RCC_I2C3CLKSOURCE_HSI) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)))
 8004aba:	2180      	movs	r1, #128	; 0x80
 8004abc:	0289      	lsls	r1, r1, #10
 8004abe:	428b      	cmp	r3, r1
 8004ac0:	d05f      	beq.n	8004b82 <HAL_RCCEx_GetPeriphCLKFreq+0x11e>
      {
        frequency = HSI_VALUE;
      }
      /* Check if I2C3 clock selection is SYSCLK */
      else if (srcclk == RCC_I2C3CLKSOURCE_SYSCLK)
 8004ac2:	2280      	movs	r2, #128	; 0x80
 8004ac4:	0252      	lsls	r2, r2, #9
 8004ac6:	e0a1      	b.n	8004c0c <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
      srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8004ac8:	25c0      	movs	r5, #192	; 0xc0
      if ((srcclk == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSERDY)))
 8004aca:	2080      	movs	r0, #128	; 0x80
      temp_reg = RCC->CSR;
 8004acc:	4956      	ldr	r1, [pc, #344]	; (8004c28 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>)
      srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8004ace:	02ad      	lsls	r5, r5, #10
      temp_reg = RCC->CSR;
 8004ad0:	6d0b      	ldr	r3, [r1, #80]	; 0x50
      srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8004ad2:	6d0a      	ldr	r2, [r1, #80]	; 0x50
      if ((srcclk == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSERDY)))
 8004ad4:	0240      	lsls	r0, r0, #9
      srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8004ad6:	402a      	ands	r2, r5
      if ((srcclk == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSERDY)))
 8004ad8:	4282      	cmp	r2, r0
 8004ada:	d103      	bne.n	8004ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x80>
 8004adc:	0598      	lsls	r0, r3, #22
        frequency = LSE_VALUE;
 8004ade:	0fc0      	lsrs	r0, r0, #31
 8004ae0:	03c0      	lsls	r0, r0, #15
 8004ae2:	e008      	b.n	8004af6 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
      else if ((srcclk == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSIRDY)))
 8004ae4:	2480      	movs	r4, #128	; 0x80
 8004ae6:	02a4      	lsls	r4, r4, #10
 8004ae8:	42a2      	cmp	r2, r4
 8004aea:	d105      	bne.n	8004af8 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
 8004aec:	2002      	movs	r0, #2
 8004aee:	4003      	ands	r3, r0
            frequency = 0U;
 8004af0:	1e18      	subs	r0, r3, #0
      else if ((srcclk == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSIRDY)))
 8004af2:	d000      	beq.n	8004af6 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
        frequency = LSI_VALUE;
 8004af4:	484d      	ldr	r0, [pc, #308]	; (8004c2c <HAL_RCCEx_GetPeriphCLKFreq+0x1c8>)
    {
      break;
    }
  }
  return(frequency);
}
 8004af6:	bd70      	pop	{r4, r5, r6, pc}
            frequency = 0U;
 8004af8:	2000      	movs	r0, #0
      else if ((srcclk == RCC_RTCCLKSOURCE_HSE_DIVX) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8004afa:	42aa      	cmp	r2, r5
 8004afc:	d1fb      	bne.n	8004af6 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
 8004afe:	680b      	ldr	r3, [r1, #0]
 8004b00:	4223      	tst	r3, r4
 8004b02:	d0f8      	beq.n	8004af6 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
        clkprediv = __HAL_RCC_GET_RTC_HSE_PRESCALER();
 8004b04:	22c0      	movs	r2, #192	; 0xc0
 8004b06:	680b      	ldr	r3, [r1, #0]
        switch (clkprediv)
 8004b08:	2180      	movs	r1, #128	; 0x80
        clkprediv = __HAL_RCC_GET_RTC_HSE_PRESCALER();
 8004b0a:	0392      	lsls	r2, r2, #14
 8004b0c:	4013      	ands	r3, r2
        switch (clkprediv)
 8004b0e:	0389      	lsls	r1, r1, #14
 8004b10:	428b      	cmp	r3, r1
 8004b12:	d008      	beq.n	8004b26 <HAL_RCCEx_GetPeriphCLKFreq+0xc2>
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d100      	bne.n	8004b1a <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 8004b18:	e084      	b.n	8004c24 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>
 8004b1a:	2280      	movs	r2, #128	; 0x80
 8004b1c:	0352      	lsls	r2, r2, #13
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d103      	bne.n	8004b2a <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
            frequency = HSE_VALUE / 4U;
 8004b22:	4843      	ldr	r0, [pc, #268]	; (8004c30 <HAL_RCCEx_GetPeriphCLKFreq+0x1cc>)
            break;
 8004b24:	e7e7      	b.n	8004af6 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
            frequency = HSE_VALUE / 8U;
 8004b26:	4843      	ldr	r0, [pc, #268]	; (8004c34 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>)
 8004b28:	e7e5      	b.n	8004af6 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
            frequency = HSE_VALUE / 2U;
 8004b2a:	4843      	ldr	r0, [pc, #268]	; (8004c38 <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>)
            break;
 8004b2c:	e7e3      	b.n	8004af6 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 8004b2e:	2080      	movs	r0, #128	; 0x80
 8004b30:	4b3d      	ldr	r3, [pc, #244]	; (8004c28 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>)
 8004b32:	04c0      	lsls	r0, r0, #19
 8004b34:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004b36:	4010      	ands	r0, r2
        if((srcclk == RCC_USBCLKSOURCE_PLL) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY)))
 8004b38:	d11a      	bne.n	8004b70 <HAL_RCCEx_GetPeriphCLKFreq+0x10c>
 8004b3a:	681a      	ldr	r2, [r3, #0]
 8004b3c:	0192      	lsls	r2, r2, #6
 8004b3e:	d5da      	bpl.n	8004af6 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
            pllmul = RCC->CFGR & RCC_CFGR_PLLMUL;
 8004b40:	68da      	ldr	r2, [r3, #12]
            pllmul = PLLMulTable[(pllmul >> RCC_CFGR_PLLMUL_Pos)];
 8004b42:	483e      	ldr	r0, [pc, #248]	; (8004c3c <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>)
            plldiv = RCC->CFGR & RCC_CFGR_PLLDIV;
 8004b44:	68d9      	ldr	r1, [r3, #12]
            pllmul = PLLMulTable[(pllmul >> RCC_CFGR_PLLMUL_Pos)];
 8004b46:	0292      	lsls	r2, r2, #10
 8004b48:	0f12      	lsrs	r2, r2, #28
 8004b4a:	5c80      	ldrb	r0, [r0, r2]
            plldiv = (plldiv >> RCC_CFGR_PLLDIV_Pos) + 1U;   
 8004b4c:	0209      	lsls	r1, r1, #8
            if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)
 8004b4e:	68da      	ldr	r2, [r3, #12]
            plldiv = (plldiv >> RCC_CFGR_PLLDIV_Pos) + 1U;   
 8004b50:	0f89      	lsrs	r1, r1, #30
 8004b52:	3101      	adds	r1, #1
            if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)
 8004b54:	03d2      	lsls	r2, r2, #15
 8004b56:	d407      	bmi.n	8004b68 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
                if (READ_BIT(RCC->CR, RCC_CR_HSIDIVF) != 0U)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	06db      	lsls	r3, r3, #27
 8004b5c:	d406      	bmi.n	8004b6c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
                    pllvco =  HSI_VALUE;
 8004b5e:	4b38      	ldr	r3, [pc, #224]	; (8004c40 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>)
            pllvco = (pllvco * pllmul);
 8004b60:	4358      	muls	r0, r3
            frequency = (pllvco/ plldiv);
 8004b62:	f7fb fadb 	bl	800011c <__udivsi3>
 8004b66:	e7c6      	b.n	8004af6 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
                pllvco = HSE_VALUE;
 8004b68:	4b36      	ldr	r3, [pc, #216]	; (8004c44 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>)
 8004b6a:	e7f9      	b.n	8004b60 <HAL_RCCEx_GetPeriphCLKFreq+0xfc>
                    pllvco =  (HSI_VALUE >> 2U);
 8004b6c:	4b32      	ldr	r3, [pc, #200]	; (8004c38 <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>)
 8004b6e:	e7f7      	b.n	8004b60 <HAL_RCCEx_GetPeriphCLKFreq+0xfc>
        else if((srcclk == RCC_USBCLKSOURCE_HSI48) && (HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)))
 8004b70:	2202      	movs	r2, #2
 8004b72:	689b      	ldr	r3, [r3, #8]
 8004b74:	4013      	ands	r3, r2
            frequency = 0U;
 8004b76:	1e18      	subs	r0, r3, #0
        else if((srcclk == RCC_USBCLKSOURCE_HSI48) && (HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)))
 8004b78:	d0bd      	beq.n	8004af6 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
            frequency = HSI48_VALUE;
 8004b7a:	4833      	ldr	r0, [pc, #204]	; (8004c48 <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>)
 8004b7c:	e7bb      	b.n	8004af6 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
      else if ((srcclk == RCC_USART1CLKSOURCE_HSI) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)))
 8004b7e:	2b02      	cmp	r3, #2
 8004b80:	d103      	bne.n	8004b8a <HAL_RCCEx_GetPeriphCLKFreq+0x126>
      else if ((srcclk == RCC_I2C3CLKSOURCE_HSI) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)))
 8004b82:	6813      	ldr	r3, [r2, #0]
 8004b84:	2204      	movs	r2, #4
 8004b86:	4013      	ands	r3, r2
 8004b88:	e026      	b.n	8004bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x174>
      else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 8004b8a:	2b01      	cmp	r3, #1
 8004b8c:	d102      	bne.n	8004b94 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        frequency = HAL_RCC_GetSysClockFreq();
 8004b8e:	f7ff fd79 	bl	8004684 <HAL_RCC_GetSysClockFreq>
 8004b92:	e7b0      	b.n	8004af6 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
            frequency = 0U;
 8004b94:	2000      	movs	r0, #0
      else if ((srcclk == RCC_USART1CLKSOURCE_LSE) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSERDY)))
 8004b96:	2b03      	cmp	r3, #3
 8004b98:	d1ad      	bne.n	8004af6 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
 8004b9a:	6d10      	ldr	r0, [r2, #80]	; 0x50
 8004b9c:	0580      	lsls	r0, r0, #22
 8004b9e:	e79e      	b.n	8004ade <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
      srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8004ba0:	210c      	movs	r1, #12
 8004ba2:	4a21      	ldr	r2, [pc, #132]	; (8004c28 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>)
 8004ba4:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8004ba6:	400b      	ands	r3, r1
      if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8004ba8:	d102      	bne.n	8004bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
        frequency = HAL_RCC_GetPCLK1Freq();
 8004baa:	f7ff fe5f 	bl	800486c <HAL_RCC_GetPCLK1Freq>
 8004bae:	e7a2      	b.n	8004af6 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
      else if ((srcclk == RCC_USART2CLKSOURCE_HSI) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)))
 8004bb0:	2b08      	cmp	r3, #8
 8004bb2:	d0e6      	beq.n	8004b82 <HAL_RCCEx_GetPeriphCLKFreq+0x11e>
      else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 8004bb4:	2b04      	cmp	r3, #4
 8004bb6:	d0ea      	beq.n	8004b8e <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
            frequency = 0U;
 8004bb8:	2000      	movs	r0, #0
      else if ((srcclk == RCC_USART2CLKSOURCE_LSE) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSERDY)))
 8004bba:	2b0c      	cmp	r3, #12
 8004bbc:	d19b      	bne.n	8004af6 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
 8004bbe:	e7ec      	b.n	8004b9a <HAL_RCCEx_GetPeriphCLKFreq+0x136>
      srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8004bc0:	21c0      	movs	r1, #192	; 0xc0
 8004bc2:	4a19      	ldr	r2, [pc, #100]	; (8004c28 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>)
 8004bc4:	0109      	lsls	r1, r1, #4
 8004bc6:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8004bc8:	400b      	ands	r3, r1
      if (srcclk == RCC_LPUART1CLKSOURCE_PCLK1)
 8004bca:	d0ee      	beq.n	8004baa <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      else if ((srcclk == RCC_LPUART1CLKSOURCE_HSI) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)))
 8004bcc:	2480      	movs	r4, #128	; 0x80
 8004bce:	0124      	lsls	r4, r4, #4
 8004bd0:	42a3      	cmp	r3, r4
 8004bd2:	d106      	bne.n	8004be2 <HAL_RCCEx_GetPeriphCLKFreq+0x17e>
 8004bd4:	6813      	ldr	r3, [r2, #0]
 8004bd6:	4003      	ands	r3, r0
            frequency = 0U;
 8004bd8:	1e18      	subs	r0, r3, #0
      else if ((srcclk == RCC_I2C3CLKSOURCE_HSI) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)))
 8004bda:	d100      	bne.n	8004bde <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
 8004bdc:	e78b      	b.n	8004af6 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
        frequency = HSI_VALUE;
 8004bde:	4818      	ldr	r0, [pc, #96]	; (8004c40 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>)
 8004be0:	e789      	b.n	8004af6 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
      else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 8004be2:	2080      	movs	r0, #128	; 0x80
 8004be4:	00c0      	lsls	r0, r0, #3
 8004be6:	4283      	cmp	r3, r0
 8004be8:	d0d1      	beq.n	8004b8e <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
            frequency = 0U;
 8004bea:	2000      	movs	r0, #0
      else if ((srcclk == RCC_LPUART1CLKSOURCE_LSE) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSERDY)))
 8004bec:	428b      	cmp	r3, r1
 8004bee:	d000      	beq.n	8004bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
 8004bf0:	e781      	b.n	8004af6 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
 8004bf2:	e7d2      	b.n	8004b9a <HAL_RCCEx_GetPeriphCLKFreq+0x136>
      srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8004bf4:	21c0      	movs	r1, #192	; 0xc0
 8004bf6:	4a0c      	ldr	r2, [pc, #48]	; (8004c28 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>)
 8004bf8:	0189      	lsls	r1, r1, #6
 8004bfa:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8004bfc:	400b      	ands	r3, r1
      if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8004bfe:	d0d4      	beq.n	8004baa <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      else if ((srcclk == RCC_I2C1CLKSOURCE_HSI) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)))
 8004c00:	2180      	movs	r1, #128	; 0x80
 8004c02:	0189      	lsls	r1, r1, #6
 8004c04:	428b      	cmp	r3, r1
 8004c06:	d0bc      	beq.n	8004b82 <HAL_RCCEx_GetPeriphCLKFreq+0x11e>
      else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 8004c08:	2280      	movs	r2, #128	; 0x80
 8004c0a:	0152      	lsls	r2, r2, #5
      else if (srcclk == RCC_I2C3CLKSOURCE_SYSCLK)
 8004c0c:	4293      	cmp	r3, r2
 8004c0e:	d000      	beq.n	8004c12 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
 8004c10:	e744      	b.n	8004a9c <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8004c12:	e7bc      	b.n	8004b8e <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
      if (READ_BIT(RCC->APB1ENR, (RCC_APB1ENR_I2C2EN))==RCC_APB1ENR_I2C2EN)
 8004c14:	4b04      	ldr	r3, [pc, #16]	; (8004c28 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>)
 8004c16:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004c18:	2380      	movs	r3, #128	; 0x80
 8004c1a:	03db      	lsls	r3, r3, #15
 8004c1c:	4018      	ands	r0, r3
 8004c1e:	d100      	bne.n	8004c22 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8004c20:	e769      	b.n	8004af6 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
 8004c22:	e7c2      	b.n	8004baa <HAL_RCCEx_GetPeriphCLKFreq+0x146>
            frequency = HSE_VALUE / 16U;
 8004c24:	4809      	ldr	r0, [pc, #36]	; (8004c4c <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>)
 8004c26:	e766      	b.n	8004af6 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
 8004c28:	40021000 	.word	0x40021000
 8004c2c:	00009088 	.word	0x00009088
 8004c30:	001e8480 	.word	0x001e8480
 8004c34:	000f4240 	.word	0x000f4240
 8004c38:	003d0900 	.word	0x003d0900
 8004c3c:	08007d38 	.word	0x08007d38
 8004c40:	00f42400 	.word	0x00f42400
 8004c44:	007a1200 	.word	0x007a1200
 8004c48:	02dc6c00 	.word	0x02dc6c00
 8004c4c:	0007a120 	.word	0x0007a120

08004c50 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 8004c50:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004c52:	2702      	movs	r7, #2

  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004c54:	1c45      	adds	r5, r0, #1
 8004c56:	7feb      	ldrb	r3, [r5, #31]
{
 8004c58:	0004      	movs	r4, r0
  __HAL_LOCK(hrtc);
 8004c5a:	0038      	movs	r0, r7
 8004c5c:	2b01      	cmp	r3, #1
 8004c5e:	d024      	beq.n	8004caa <HAL_RTC_DeactivateAlarm+0x5a>
 8004c60:	2301      	movs	r3, #1

  hrtc->State = HAL_RTC_STATE_BUSY;

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004c62:	22ca      	movs	r2, #202	; 0xca
  __HAL_LOCK(hrtc);
 8004c64:	77eb      	strb	r3, [r5, #31]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004c66:	6823      	ldr	r3, [r4, #0]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004c68:	19e6      	adds	r6, r4, r7
 8004c6a:	77f7      	strb	r7, [r6, #31]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004c6c:	625a      	str	r2, [r3, #36]	; 0x24
 8004c6e:	3a77      	subs	r2, #119	; 0x77
 8004c70:	625a      	str	r2, [r3, #36]	; 0x24

  if(Alarm == RTC_ALARM_A)
 8004c72:	32ad      	adds	r2, #173	; 0xad
 8004c74:	4291      	cmp	r1, r2
 8004c76:	d128      	bne.n	8004cca <HAL_RTC_DeactivateAlarm+0x7a>
  {
    /* AlarmA */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8004c78:	689a      	ldr	r2, [r3, #8]
 8004c7a:	4921      	ldr	r1, [pc, #132]	; (8004d00 <HAL_RTC_DeactivateAlarm+0xb0>)
 8004c7c:	400a      	ands	r2, r1
 8004c7e:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8004c80:	689a      	ldr	r2, [r3, #8]
 8004c82:	4920      	ldr	r1, [pc, #128]	; (8004d04 <HAL_RTC_DeactivateAlarm+0xb4>)
 8004c84:	400a      	ands	r2, r1
 8004c86:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();
 8004c88:	f7fe ffd6 	bl	8003c38 <HAL_GetTick>

    /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8004c8c:	2301      	movs	r3, #1
    tickstart = HAL_GetTick();
 8004c8e:	9000      	str	r0, [sp, #0]
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8004c90:	9301      	str	r3, [sp, #4]
 8004c92:	6823      	ldr	r3, [r4, #0]
 8004c94:	68df      	ldr	r7, [r3, #12]
 8004c96:	9b01      	ldr	r3, [sp, #4]
 8004c98:	401f      	ands	r7, r3
 8004c9a:	d007      	beq.n	8004cac <HAL_RTC_DeactivateAlarm+0x5c>
        return HAL_TIMEOUT;
      }
    }
  }
  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004c9c:	22ff      	movs	r2, #255	; 0xff
 8004c9e:	6823      	ldr	r3, [r4, #0]

  hrtc->State = HAL_RTC_STATE_READY;

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004ca0:	2000      	movs	r0, #0
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004ca2:	625a      	str	r2, [r3, #36]	; 0x24
  hrtc->State = HAL_RTC_STATE_READY;
 8004ca4:	2301      	movs	r3, #1
 8004ca6:	77f3      	strb	r3, [r6, #31]
  __HAL_UNLOCK(hrtc);
 8004ca8:	77e8      	strb	r0, [r5, #31]

  return HAL_OK; 
}
 8004caa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      if( (HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8004cac:	f7fe ffc4 	bl	8003c38 <HAL_GetTick>
 8004cb0:	9b00      	ldr	r3, [sp, #0]
 8004cb2:	1ac0      	subs	r0, r0, r3
 8004cb4:	23fa      	movs	r3, #250	; 0xfa
 8004cb6:	009b      	lsls	r3, r3, #2
 8004cb8:	4298      	cmp	r0, r3
 8004cba:	d9ea      	bls.n	8004c92 <HAL_RTC_DeactivateAlarm+0x42>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004cbc:	22ff      	movs	r2, #255	; 0xff
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004cbe:	2003      	movs	r0, #3
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004cc0:	6823      	ldr	r3, [r4, #0]
 8004cc2:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004cc4:	77f0      	strb	r0, [r6, #31]
        __HAL_UNLOCK(hrtc);
 8004cc6:	77ef      	strb	r7, [r5, #31]
        return HAL_TIMEOUT;
 8004cc8:	e7ef      	b.n	8004caa <HAL_RTC_DeactivateAlarm+0x5a>
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8004cca:	689a      	ldr	r2, [r3, #8]
 8004ccc:	490e      	ldr	r1, [pc, #56]	; (8004d08 <HAL_RTC_DeactivateAlarm+0xb8>)
 8004cce:	400a      	ands	r2, r1
 8004cd0:	609a      	str	r2, [r3, #8]
    __HAL_RTC_ALARM_DISABLE_IT(hrtc,RTC_IT_ALRB);
 8004cd2:	689a      	ldr	r2, [r3, #8]
 8004cd4:	490d      	ldr	r1, [pc, #52]	; (8004d0c <HAL_RTC_DeactivateAlarm+0xbc>)
 8004cd6:	400a      	ands	r2, r1
 8004cd8:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8004cda:	f7fe ffad 	bl	8003c38 <HAL_GetTick>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8004cde:	9701      	str	r7, [sp, #4]
    tickstart = HAL_GetTick();
 8004ce0:	9000      	str	r0, [sp, #0]
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8004ce2:	6823      	ldr	r3, [r4, #0]
 8004ce4:	68df      	ldr	r7, [r3, #12]
 8004ce6:	9b01      	ldr	r3, [sp, #4]
 8004ce8:	401f      	ands	r7, r3
 8004cea:	d1d7      	bne.n	8004c9c <HAL_RTC_DeactivateAlarm+0x4c>
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8004cec:	f7fe ffa4 	bl	8003c38 <HAL_GetTick>
 8004cf0:	9b00      	ldr	r3, [sp, #0]
 8004cf2:	1ac0      	subs	r0, r0, r3
 8004cf4:	23fa      	movs	r3, #250	; 0xfa
 8004cf6:	009b      	lsls	r3, r3, #2
 8004cf8:	4298      	cmp	r0, r3
 8004cfa:	d9f2      	bls.n	8004ce2 <HAL_RTC_DeactivateAlarm+0x92>
 8004cfc:	e7de      	b.n	8004cbc <HAL_RTC_DeactivateAlarm+0x6c>
 8004cfe:	46c0      	nop			; (mov r8, r8)
 8004d00:	fffffeff 	.word	0xfffffeff
 8004d04:	ffffefff 	.word	0xffffefff
 8004d08:	fffffdff 	.word	0xfffffdff
 8004d0c:	ffffdfff 	.word	0xffffdfff

08004d10 <HAL_RTC_WaitForSynchro>:
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
  uint32_t tickstart = 0U;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8004d10:	21a0      	movs	r1, #160	; 0xa0
 8004d12:	6802      	ldr	r2, [r0, #0]
{
 8004d14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8004d16:	68d3      	ldr	r3, [r2, #12]
{
 8004d18:	0004      	movs	r4, r0
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8004d1a:	438b      	bics	r3, r1
 8004d1c:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8004d1e:	f7fe ff8b 	bl	8003c38 <HAL_GetTick>

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8004d22:	27fa      	movs	r7, #250	; 0xfa
  tickstart = HAL_GetTick();
 8004d24:	0006      	movs	r6, r0
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8004d26:	2520      	movs	r5, #32
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8004d28:	00bf      	lsls	r7, r7, #2
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8004d2a:	6823      	ldr	r3, [r4, #0]
 8004d2c:	68db      	ldr	r3, [r3, #12]
 8004d2e:	422b      	tst	r3, r5
 8004d30:	d001      	beq.n	8004d36 <HAL_RTC_WaitForSynchro+0x26>
    {
      return HAL_TIMEOUT;
    }
  }

  return HAL_OK;
 8004d32:	2000      	movs	r0, #0
}
 8004d34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8004d36:	f7fe ff7f 	bl	8003c38 <HAL_GetTick>
 8004d3a:	1b80      	subs	r0, r0, r6
 8004d3c:	42b8      	cmp	r0, r7
 8004d3e:	d9f4      	bls.n	8004d2a <HAL_RTC_WaitForSynchro+0x1a>
      return HAL_TIMEOUT;
 8004d40:	2003      	movs	r0, #3
 8004d42:	e7f7      	b.n	8004d34 <HAL_RTC_WaitForSynchro+0x24>

08004d44 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc: RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8004d44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart = 0U;

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8004d46:	2440      	movs	r4, #64	; 0x40
 8004d48:	6803      	ldr	r3, [r0, #0]
{
 8004d4a:	0005      	movs	r5, r0
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8004d4c:	68da      	ldr	r2, [r3, #12]
 8004d4e:	4222      	tst	r2, r4
 8004d50:	d001      	beq.n	8004d56 <RTC_EnterInitMode+0x12>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8004d52:	2000      	movs	r0, #0
}
 8004d54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8004d56:	2201      	movs	r2, #1
 8004d58:	4252      	negs	r2, r2
 8004d5a:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 8004d5c:	f7fe ff6c 	bl	8003c38 <HAL_GetTick>
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8004d60:	27fa      	movs	r7, #250	; 0xfa
    tickstart = HAL_GetTick();
 8004d62:	0006      	movs	r6, r0
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8004d64:	00bf      	lsls	r7, r7, #2
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8004d66:	682b      	ldr	r3, [r5, #0]
 8004d68:	68db      	ldr	r3, [r3, #12]
 8004d6a:	4223      	tst	r3, r4
 8004d6c:	d1f1      	bne.n	8004d52 <RTC_EnterInitMode+0xe>
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8004d6e:	f7fe ff63 	bl	8003c38 <HAL_GetTick>
 8004d72:	1b80      	subs	r0, r0, r6
 8004d74:	42b8      	cmp	r0, r7
 8004d76:	d9f6      	bls.n	8004d66 <RTC_EnterInitMode+0x22>
        return HAL_TIMEOUT;
 8004d78:	2003      	movs	r0, #3
 8004d7a:	e7eb      	b.n	8004d54 <RTC_EnterInitMode+0x10>

08004d7c <HAL_RTC_Init>:
{
 8004d7c:	b570      	push	{r4, r5, r6, lr}
 8004d7e:	0004      	movs	r4, r0
     return HAL_ERROR;
 8004d80:	2001      	movs	r0, #1
  if(hrtc == NULL)
 8004d82:	2c00      	cmp	r4, #0
 8004d84:	d01b      	beq.n	8004dbe <HAL_RTC_Init+0x42>
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8004d86:	1ca5      	adds	r5, r4, #2
 8004d88:	7feb      	ldrb	r3, [r5, #31]
 8004d8a:	b2db      	uxtb	r3, r3
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d104      	bne.n	8004d9a <HAL_RTC_Init+0x1e>
    hrtc->Lock = HAL_UNLOCKED;
 8004d90:	1822      	adds	r2, r4, r0
 8004d92:	77d3      	strb	r3, [r2, #31]
    HAL_RTC_MspInit(hrtc);
 8004d94:	0020      	movs	r0, r4
 8004d96:	f001 fe9d 	bl	8006ad4 <HAL_RTC_MspInit>
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004d9a:	2302      	movs	r3, #2
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004d9c:	22ca      	movs	r2, #202	; 0xca
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004d9e:	77eb      	strb	r3, [r5, #31]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004da0:	6823      	ldr	r3, [r4, #0]
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8004da2:	0020      	movs	r0, r4
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004da4:	625a      	str	r2, [r3, #36]	; 0x24
 8004da6:	3a77      	subs	r2, #119	; 0x77
 8004da8:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8004daa:	f7ff ffcb 	bl	8004d44 <RTC_EnterInitMode>
 8004dae:	6823      	ldr	r3, [r4, #0]
 8004db0:	2800      	cmp	r0, #0
 8004db2:	d005      	beq.n	8004dc0 <HAL_RTC_Init+0x44>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004db4:	22ff      	movs	r2, #255	; 0xff
 8004db6:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004db8:	2304      	movs	r3, #4
    return HAL_ERROR;
 8004dba:	2001      	movs	r0, #1
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004dbc:	77eb      	strb	r3, [r5, #31]
}
 8004dbe:	bd70      	pop	{r4, r5, r6, pc}
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004dc0:	689a      	ldr	r2, [r3, #8]
 8004dc2:	4912      	ldr	r1, [pc, #72]	; (8004e0c <HAL_RTC_Init+0x90>)
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004dc4:	6926      	ldr	r6, [r4, #16]
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004dc6:	400a      	ands	r2, r1
 8004dc8:	609a      	str	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004dca:	6862      	ldr	r2, [r4, #4]
 8004dcc:	6899      	ldr	r1, [r3, #8]
 8004dce:	4332      	orrs	r2, r6
 8004dd0:	69a6      	ldr	r6, [r4, #24]
 8004dd2:	4332      	orrs	r2, r6
 8004dd4:	430a      	orrs	r2, r1
 8004dd6:	609a      	str	r2, [r3, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004dd8:	68e2      	ldr	r2, [r4, #12]
 8004dda:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8004ddc:	68a2      	ldr	r2, [r4, #8]
 8004dde:	6919      	ldr	r1, [r3, #16]
 8004de0:	0412      	lsls	r2, r2, #16
 8004de2:	430a      	orrs	r2, r1
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8004de4:	2180      	movs	r1, #128	; 0x80
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8004de6:	611a      	str	r2, [r3, #16]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8004de8:	68da      	ldr	r2, [r3, #12]
 8004dea:	438a      	bics	r2, r1
 8004dec:	60da      	str	r2, [r3, #12]
    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8004dee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004df0:	397d      	subs	r1, #125	; 0x7d
 8004df2:	438a      	bics	r2, r1
 8004df4:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8004df6:	69e2      	ldr	r2, [r4, #28]
 8004df8:	6964      	ldr	r4, [r4, #20]
 8004dfa:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8004dfc:	4322      	orrs	r2, r4
 8004dfe:	430a      	orrs	r2, r1
 8004e00:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004e02:	22ff      	movs	r2, #255	; 0xff
 8004e04:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 8004e06:	2301      	movs	r3, #1
 8004e08:	77eb      	strb	r3, [r5, #31]
    return HAL_OK;
 8004e0a:	e7d8      	b.n	8004dbe <HAL_RTC_Init+0x42>
 8004e0c:	ff8fffbf 	.word	0xff8fffbf

08004e10 <RTC_ByteToBcd2>:
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0U;
 8004e10:	2300      	movs	r3, #0

  while(Value >= 10U)
 8004e12:	2809      	cmp	r0, #9
 8004e14:	d803      	bhi.n	8004e1e <RTC_ByteToBcd2+0xe>
  {
    bcdhigh++;
    Value -= 10U;
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 8004e16:	011b      	lsls	r3, r3, #4
 8004e18:	4318      	orrs	r0, r3
 8004e1a:	b2c0      	uxtb	r0, r0
}
 8004e1c:	4770      	bx	lr
    Value -= 10U;
 8004e1e:	380a      	subs	r0, #10
    bcdhigh++;
 8004e20:	3301      	adds	r3, #1
    Value -= 10U;
 8004e22:	b2c0      	uxtb	r0, r0
 8004e24:	e7f5      	b.n	8004e12 <RTC_ByteToBcd2+0x2>
	...

08004e28 <HAL_RTC_SetTime>:
{
 8004e28:	2302      	movs	r3, #2
 8004e2a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 8004e2c:	1c47      	adds	r7, r0, #1
{
 8004e2e:	000c      	movs	r4, r1
  __HAL_LOCK(hrtc);
 8004e30:	7ff9      	ldrb	r1, [r7, #31]
{
 8004e32:	0005      	movs	r5, r0
  __HAL_LOCK(hrtc);
 8004e34:	001e      	movs	r6, r3
 8004e36:	2901      	cmp	r1, #1
 8004e38:	d036      	beq.n	8004ea8 <HAL_RTC_SetTime+0x80>
 8004e3a:	2101      	movs	r1, #1
 8004e3c:	77f9      	strb	r1, [r7, #31]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004e3e:	18c1      	adds	r1, r0, r3
 8004e40:	77cb      	strb	r3, [r1, #31]
 8004e42:	9100      	str	r1, [sp, #0]
 8004e44:	2140      	movs	r1, #64	; 0x40
 8004e46:	6803      	ldr	r3, [r0, #0]
 8004e48:	7866      	ldrb	r6, [r4, #1]
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8004e4a:	689b      	ldr	r3, [r3, #8]
 8004e4c:	7820      	ldrb	r0, [r4, #0]
 8004e4e:	400b      	ands	r3, r1
  if(Format == RTC_FORMAT_BIN)
 8004e50:	2a00      	cmp	r2, #0
 8004e52:	d12b      	bne.n	8004eac <HAL_RTC_SetTime+0x84>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d100      	bne.n	8004e5a <HAL_RTC_SetTime+0x32>
      sTime->TimeFormat = 0x00U;
 8004e58:	70e3      	strb	r3, [r4, #3]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8004e5a:	f7ff ffd9 	bl	8004e10 <RTC_ByteToBcd2>
 8004e5e:	9001      	str	r0, [sp, #4]
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8004e60:	0030      	movs	r0, r6
 8004e62:	f7ff ffd5 	bl	8004e10 <RTC_ByteToBcd2>
 8004e66:	0006      	movs	r6, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8004e68:	78a0      	ldrb	r0, [r4, #2]
 8004e6a:	f7ff ffd1 	bl	8004e10 <RTC_ByteToBcd2>
 8004e6e:	0003      	movs	r3, r0
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8004e70:	78e0      	ldrb	r0, [r4, #3]
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8004e72:	0236      	lsls	r6, r6, #8
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8004e74:	0400      	lsls	r0, r0, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8004e76:	4318      	orrs	r0, r3
 8004e78:	9b01      	ldr	r3, [sp, #4]
 8004e7a:	041b      	lsls	r3, r3, #16
 8004e7c:	4318      	orrs	r0, r3
 8004e7e:	4330      	orrs	r0, r6
 8004e80:	9001      	str	r0, [sp, #4]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004e82:	22ca      	movs	r2, #202	; 0xca
 8004e84:	682b      	ldr	r3, [r5, #0]
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8004e86:	0028      	movs	r0, r5
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004e88:	625a      	str	r2, [r3, #36]	; 0x24
 8004e8a:	3a77      	subs	r2, #119	; 0x77
 8004e8c:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8004e8e:	f7ff ff59 	bl	8004d44 <RTC_EnterInitMode>
 8004e92:	682b      	ldr	r3, [r5, #0]
 8004e94:	1e06      	subs	r6, r0, #0
 8004e96:	d016      	beq.n	8004ec6 <HAL_RTC_SetTime+0x9e>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004e98:	22ff      	movs	r2, #255	; 0xff
 8004e9a:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004e9c:	2304      	movs	r3, #4
 8004e9e:	9a00      	ldr	r2, [sp, #0]
 8004ea0:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hrtc);
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	77fb      	strb	r3, [r7, #31]
        return HAL_ERROR;
 8004ea6:	2601      	movs	r6, #1
}
 8004ea8:	0030      	movs	r0, r6
 8004eaa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d100      	bne.n	8004eb2 <HAL_RTC_SetTime+0x8a>
      sTime->TimeFormat = 0x00U;
 8004eb0:	70e3      	strb	r3, [r4, #3]
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8004eb2:	0400      	lsls	r0, r0, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8004eb4:	0236      	lsls	r6, r6, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8004eb6:	4306      	orrs	r6, r0
              ((uint32_t)sTime->Seconds) | \
 8004eb8:	78a0      	ldrb	r0, [r4, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8004eba:	4306      	orrs	r6, r0
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8004ebc:	78e0      	ldrb	r0, [r4, #3]
 8004ebe:	0400      	lsls	r0, r0, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8004ec0:	4306      	orrs	r6, r0
 8004ec2:	9601      	str	r6, [sp, #4]
 8004ec4:	e7dd      	b.n	8004e82 <HAL_RTC_SetTime+0x5a>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8004ec6:	4815      	ldr	r0, [pc, #84]	; (8004f1c <HAL_RTC_SetTime+0xf4>)
 8004ec8:	9a01      	ldr	r2, [sp, #4]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BCK);
 8004eca:	4915      	ldr	r1, [pc, #84]	; (8004f20 <HAL_RTC_SetTime+0xf8>)
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8004ecc:	4002      	ands	r2, r0
 8004ece:	601a      	str	r2, [r3, #0]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BCK);
 8004ed0:	689a      	ldr	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004ed2:	6920      	ldr	r0, [r4, #16]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BCK);
 8004ed4:	400a      	ands	r2, r1
 8004ed6:	609a      	str	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004ed8:	68e2      	ldr	r2, [r4, #12]
 8004eda:	6899      	ldr	r1, [r3, #8]
 8004edc:	4302      	orrs	r2, r0
 8004ede:	430a      	orrs	r2, r1
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8004ee0:	2180      	movs	r1, #128	; 0x80
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004ee2:	609a      	str	r2, [r3, #8]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8004ee4:	68da      	ldr	r2, [r3, #12]
 8004ee6:	438a      	bics	r2, r1
 8004ee8:	60da      	str	r2, [r3, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8004eea:	689b      	ldr	r3, [r3, #8]
 8004eec:	069b      	lsls	r3, r3, #26
 8004eee:	d40c      	bmi.n	8004f0a <HAL_RTC_SetTime+0xe2>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004ef0:	0028      	movs	r0, r5
 8004ef2:	f7ff ff0d 	bl	8004d10 <HAL_RTC_WaitForSynchro>
 8004ef6:	2800      	cmp	r0, #0
 8004ef8:	d007      	beq.n	8004f0a <HAL_RTC_SetTime+0xe2>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004efa:	22ff      	movs	r2, #255	; 0xff
 8004efc:	682b      	ldr	r3, [r5, #0]
 8004efe:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8004f00:	2304      	movs	r3, #4
 8004f02:	9a00      	ldr	r2, [sp, #0]
 8004f04:	77d3      	strb	r3, [r2, #31]
        __HAL_UNLOCK(hrtc);
 8004f06:	77fe      	strb	r6, [r7, #31]
 8004f08:	e7cd      	b.n	8004ea6 <HAL_RTC_SetTime+0x7e>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004f0a:	22ff      	movs	r2, #255	; 0xff
 8004f0c:	682b      	ldr	r3, [r5, #0]
 8004f0e:	625a      	str	r2, [r3, #36]	; 0x24
   hrtc->State = HAL_RTC_STATE_READY;
 8004f10:	2301      	movs	r3, #1
 8004f12:	9a00      	ldr	r2, [sp, #0]
 8004f14:	77d3      	strb	r3, [r2, #31]
   __HAL_UNLOCK(hrtc); 
 8004f16:	2300      	movs	r3, #0
 8004f18:	77fb      	strb	r3, [r7, #31]
   return HAL_OK;
 8004f1a:	e7c5      	b.n	8004ea8 <HAL_RTC_SetTime+0x80>
 8004f1c:	007f7f7f 	.word	0x007f7f7f
 8004f20:	fffbffff 	.word	0xfffbffff

08004f24 <HAL_RTC_SetDate>:
{
 8004f24:	2302      	movs	r3, #2
 8004f26:	b5f0      	push	{r4, r5, r6, r7, lr}
 __HAL_LOCK(hrtc);
 8004f28:	1c47      	adds	r7, r0, #1
{
 8004f2a:	000d      	movs	r5, r1
 __HAL_LOCK(hrtc);
 8004f2c:	7ff9      	ldrb	r1, [r7, #31]
{
 8004f2e:	b085      	sub	sp, #20
 8004f30:	0004      	movs	r4, r0
 __HAL_LOCK(hrtc);
 8004f32:	001e      	movs	r6, r3
 8004f34:	2901      	cmp	r1, #1
 8004f36:	d035      	beq.n	8004fa4 <HAL_RTC_SetDate+0x80>
 8004f38:	2101      	movs	r1, #1
 8004f3a:	77f9      	strb	r1, [r7, #31]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004f3c:	18c1      	adds	r1, r0, r3
 8004f3e:	9101      	str	r1, [sp, #4]
 8004f40:	77cb      	strb	r3, [r1, #31]
 8004f42:	786b      	ldrb	r3, [r5, #1]
 8004f44:	78e8      	ldrb	r0, [r5, #3]
 8004f46:	78ae      	ldrb	r6, [r5, #2]
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8004f48:	2a00      	cmp	r2, #0
 8004f4a:	d14e      	bne.n	8004fea <HAL_RTC_SetDate+0xc6>
 8004f4c:	3210      	adds	r2, #16
 8004f4e:	4213      	tst	r3, r2
 8004f50:	d002      	beq.n	8004f58 <HAL_RTC_SetDate+0x34>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8004f52:	4393      	bics	r3, r2
 8004f54:	330a      	adds	r3, #10
 8004f56:	706b      	strb	r3, [r5, #1]
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8004f58:	f7ff ff5a 	bl	8004e10 <RTC_ByteToBcd2>
 8004f5c:	9002      	str	r0, [sp, #8]
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8004f5e:	7868      	ldrb	r0, [r5, #1]
 8004f60:	f7ff ff56 	bl	8004e10 <RTC_ByteToBcd2>
 8004f64:	9003      	str	r0, [sp, #12]
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8004f66:	0030      	movs	r0, r6
 8004f68:	f7ff ff52 	bl	8004e10 <RTC_ByteToBcd2>
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8004f6c:	9b02      	ldr	r3, [sp, #8]
                 ((uint32_t)sDate->WeekDay << 13U));
 8004f6e:	782d      	ldrb	r5, [r5, #0]
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8004f70:	041e      	lsls	r6, r3, #16
                 ((uint32_t)sDate->WeekDay << 13U));
 8004f72:	036d      	lsls	r5, r5, #13
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8004f74:	9b03      	ldr	r3, [sp, #12]
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8004f76:	4305      	orrs	r5, r0
 8004f78:	4335      	orrs	r5, r6
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8004f7a:	021e      	lsls	r6, r3, #8
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004f7c:	22ca      	movs	r2, #202	; 0xca
 8004f7e:	6823      	ldr	r3, [r4, #0]
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8004f80:	0020      	movs	r0, r4
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004f82:	625a      	str	r2, [r3, #36]	; 0x24
 8004f84:	3a77      	subs	r2, #119	; 0x77
 8004f86:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8004f88:	f7ff fedc 	bl	8004d44 <RTC_EnterInitMode>
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8004f8c:	4335      	orrs	r5, r6
 8004f8e:	6823      	ldr	r3, [r4, #0]
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8004f90:	1e06      	subs	r6, r0, #0
 8004f92:	d00a      	beq.n	8004faa <HAL_RTC_SetDate+0x86>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004f94:	22ff      	movs	r2, #255	; 0xff
 8004f96:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004f98:	2304      	movs	r3, #4
 8004f9a:	9a01      	ldr	r2, [sp, #4]
 8004f9c:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hrtc);
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	77fb      	strb	r3, [r7, #31]
        return HAL_ERROR;
 8004fa2:	2601      	movs	r6, #1
}
 8004fa4:	0030      	movs	r0, r6
 8004fa6:	b005      	add	sp, #20
 8004fa8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8004faa:	2180      	movs	r1, #128	; 0x80
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8004fac:	4812      	ldr	r0, [pc, #72]	; (8004ff8 <HAL_RTC_SetDate+0xd4>)
 8004fae:	4005      	ands	r5, r0
 8004fb0:	605d      	str	r5, [r3, #4]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8004fb2:	68da      	ldr	r2, [r3, #12]
 8004fb4:	438a      	bics	r2, r1
 8004fb6:	60da      	str	r2, [r3, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8004fb8:	689b      	ldr	r3, [r3, #8]
 8004fba:	069b      	lsls	r3, r3, #26
 8004fbc:	d40c      	bmi.n	8004fd8 <HAL_RTC_SetDate+0xb4>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004fbe:	0020      	movs	r0, r4
 8004fc0:	f7ff fea6 	bl	8004d10 <HAL_RTC_WaitForSynchro>
 8004fc4:	2800      	cmp	r0, #0
 8004fc6:	d007      	beq.n	8004fd8 <HAL_RTC_SetDate+0xb4>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8004fc8:	22ff      	movs	r2, #255	; 0xff
 8004fca:	6823      	ldr	r3, [r4, #0]
 8004fcc:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8004fce:	2304      	movs	r3, #4
 8004fd0:	9a01      	ldr	r2, [sp, #4]
 8004fd2:	77d3      	strb	r3, [r2, #31]
        __HAL_UNLOCK(hrtc);
 8004fd4:	77fe      	strb	r6, [r7, #31]
 8004fd6:	e7e4      	b.n	8004fa2 <HAL_RTC_SetDate+0x7e>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004fd8:	22ff      	movs	r2, #255	; 0xff
 8004fda:	6823      	ldr	r3, [r4, #0]
 8004fdc:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY ;
 8004fde:	2301      	movs	r3, #1
 8004fe0:	9a01      	ldr	r2, [sp, #4]
 8004fe2:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hrtc);
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	77fb      	strb	r3, [r7, #31]
    return HAL_OK;
 8004fe8:	e7dc      	b.n	8004fa4 <HAL_RTC_SetDate+0x80>
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8004fea:	0400      	lsls	r0, r0, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8004fec:	021b      	lsls	r3, r3, #8
                  (((uint32_t)sDate->WeekDay) << 13U));
 8004fee:	782d      	ldrb	r5, [r5, #0]
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8004ff0:	4303      	orrs	r3, r0
                  (((uint32_t)sDate->Month) << 8U) | \
 8004ff2:	431e      	orrs	r6, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8004ff4:	036d      	lsls	r5, r5, #13
 8004ff6:	e7c1      	b.n	8004f7c <HAL_RTC_SetDate+0x58>
 8004ff8:	00ffff3f 	.word	0x00ffff3f

08004ffc <HAL_RTC_SetAlarm_IT>:
{
 8004ffc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 8004ffe:	1c43      	adds	r3, r0, #1
 8005000:	9300      	str	r3, [sp, #0]
{
 8005002:	000d      	movs	r5, r1
  __HAL_LOCK(hrtc);
 8005004:	7fd9      	ldrb	r1, [r3, #31]
 8005006:	2302      	movs	r3, #2
{
 8005008:	0004      	movs	r4, r0
  __HAL_LOCK(hrtc);
 800500a:	0018      	movs	r0, r3
 800500c:	2901      	cmp	r1, #1
 800500e:	d100      	bne.n	8005012 <HAL_RTC_SetAlarm_IT+0x16>
 8005010:	e08d      	b.n	800512e <HAL_RTC_SetAlarm_IT+0x132>
 8005012:	2101      	movs	r1, #1
 8005014:	1860      	adds	r0, r4, r1
 8005016:	77c1      	strb	r1, [r0, #31]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005018:	18e1      	adds	r1, r4, r3
 800501a:	77cb      	strb	r3, [r1, #31]
 800501c:	2140      	movs	r1, #64	; 0x40
 800501e:	6823      	ldr	r3, [r4, #0]
 8005020:	7828      	ldrb	r0, [r5, #0]
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8005022:	689b      	ldr	r3, [r3, #8]
 8005024:	786e      	ldrb	r6, [r5, #1]
 8005026:	78af      	ldrb	r7, [r5, #2]
 8005028:	400b      	ands	r3, r1
  if(Format == RTC_FORMAT_BIN)
 800502a:	2a00      	cmp	r2, #0
 800502c:	d15d      	bne.n	80050ea <HAL_RTC_SetAlarm_IT+0xee>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800502e:	2b00      	cmp	r3, #0
 8005030:	d100      	bne.n	8005034 <HAL_RTC_SetAlarm_IT+0x38>
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8005032:	70eb      	strb	r3, [r5, #3]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8005034:	f7ff feec 	bl	8004e10 <RTC_ByteToBcd2>
 8005038:	9001      	str	r0, [sp, #4]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 800503a:	0030      	movs	r0, r6
 800503c:	f7ff fee8 	bl	8004e10 <RTC_ByteToBcd2>
 8005040:	0006      	movs	r6, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8005042:	0038      	movs	r0, r7
 8005044:	f7ff fee4 	bl	8004e10 <RTC_ByteToBcd2>
 8005048:	0007      	movs	r7, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 800504a:	1c6b      	adds	r3, r5, #1
 800504c:	7fd8      	ldrb	r0, [r3, #31]
 800504e:	f7ff fedf 	bl	8004e10 <RTC_ByteToBcd2>
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8005052:	696a      	ldr	r2, [r5, #20]
 8005054:	69eb      	ldr	r3, [r5, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8005056:	0236      	lsls	r6, r6, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8005058:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800505a:	78ea      	ldrb	r2, [r5, #3]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 800505c:	0600      	lsls	r0, r0, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800505e:	0412      	lsls	r2, r2, #16
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8005060:	4313      	orrs	r3, r2
 8005062:	431f      	orrs	r7, r3
 8005064:	9b01      	ldr	r3, [sp, #4]
 8005066:	041b      	lsls	r3, r3, #16
 8005068:	431f      	orrs	r7, r3
 800506a:	4337      	orrs	r7, r6
 800506c:	4307      	orrs	r7, r0
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 800506e:	69aa      	ldr	r2, [r5, #24]
 8005070:	686b      	ldr	r3, [r5, #4]
  if(sAlarm->Alarm == RTC_ALARM_A)
 8005072:	6a69      	ldr	r1, [r5, #36]	; 0x24
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8005074:	4313      	orrs	r3, r2
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005076:	22ca      	movs	r2, #202	; 0xca
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8005078:	9301      	str	r3, [sp, #4]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800507a:	6823      	ldr	r3, [r4, #0]
 800507c:	625a      	str	r2, [r3, #36]	; 0x24
 800507e:	3a77      	subs	r2, #119	; 0x77
 8005080:	625a      	str	r2, [r3, #36]	; 0x24
  if(sAlarm->Alarm == RTC_ALARM_A)
 8005082:	32ad      	adds	r2, #173	; 0xad
 8005084:	4291      	cmp	r1, r2
 8005086:	d153      	bne.n	8005130 <HAL_RTC_SetAlarm_IT+0x134>
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8005088:	689a      	ldr	r2, [r3, #8]
 800508a:	493c      	ldr	r1, [pc, #240]	; (800517c <HAL_RTC_SetAlarm_IT+0x180>)
 800508c:	400a      	ands	r2, r1
 800508e:	609a      	str	r2, [r3, #8]
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8005090:	68d9      	ldr	r1, [r3, #12]
 8005092:	4a3b      	ldr	r2, [pc, #236]	; (8005180 <HAL_RTC_SetAlarm_IT+0x184>)
 8005094:	b2c9      	uxtb	r1, r1
 8005096:	430a      	orrs	r2, r1
 8005098:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 800509a:	f7fe fdcd 	bl	8003c38 <HAL_GetTick>
 800509e:	0006      	movs	r6, r0
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 80050a0:	2201      	movs	r2, #1
 80050a2:	6823      	ldr	r3, [r4, #0]
 80050a4:	68dd      	ldr	r5, [r3, #12]
 80050a6:	4015      	ands	r5, r2
 80050a8:	d032      	beq.n	8005110 <HAL_RTC_SetAlarm_IT+0x114>
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 80050aa:	9a01      	ldr	r2, [sp, #4]
    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 80050ac:	61df      	str	r7, [r3, #28]
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 80050ae:	645a      	str	r2, [r3, #68]	; 0x44
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 80050b0:	2280      	movs	r2, #128	; 0x80
 80050b2:	6899      	ldr	r1, [r3, #8]
 80050b4:	0052      	lsls	r2, r2, #1
 80050b6:	430a      	orrs	r2, r1
 80050b8:	609a      	str	r2, [r3, #8]
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 80050ba:	2280      	movs	r2, #128	; 0x80
 80050bc:	6899      	ldr	r1, [r3, #8]
 80050be:	0152      	lsls	r2, r2, #5
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 80050c0:	430a      	orrs	r2, r1
 80050c2:	609a      	str	r2, [r3, #8]
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 80050c4:	2280      	movs	r2, #128	; 0x80
 80050c6:	4b2f      	ldr	r3, [pc, #188]	; (8005184 <HAL_RTC_SetAlarm_IT+0x188>)
 80050c8:	0292      	lsls	r2, r2, #10
 80050ca:	6819      	ldr	r1, [r3, #0]
  __HAL_UNLOCK(hrtc);
 80050cc:	2000      	movs	r0, #0
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 80050ce:	4311      	orrs	r1, r2
 80050d0:	6019      	str	r1, [r3, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 80050d2:	6899      	ldr	r1, [r3, #8]
 80050d4:	430a      	orrs	r2, r1
 80050d6:	609a      	str	r2, [r3, #8]
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80050d8:	22ff      	movs	r2, #255	; 0xff
 80050da:	6823      	ldr	r3, [r4, #0]
  hrtc->State = HAL_RTC_STATE_READY; 
 80050dc:	3402      	adds	r4, #2
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80050de:	625a      	str	r2, [r3, #36]	; 0x24
  hrtc->State = HAL_RTC_STATE_READY; 
 80050e0:	2301      	movs	r3, #1
 80050e2:	77e3      	strb	r3, [r4, #31]
  __HAL_UNLOCK(hrtc);
 80050e4:	9b00      	ldr	r3, [sp, #0]
 80050e6:	77d8      	strb	r0, [r3, #31]
  return HAL_OK;
 80050e8:	e021      	b.n	800512e <HAL_RTC_SetAlarm_IT+0x132>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d100      	bne.n	80050f0 <HAL_RTC_SetAlarm_IT+0xf4>
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80050ee:	70eb      	strb	r3, [r5, #3]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 80050f0:	69eb      	ldr	r3, [r5, #28]
 80050f2:	696a      	ldr	r2, [r5, #20]
 80050f4:	0400      	lsls	r0, r0, #16
 80050f6:	4313      	orrs	r3, r2
 80050f8:	431f      	orrs	r7, r3
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 80050fa:	0236      	lsls	r6, r6, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 80050fc:	4307      	orrs	r7, r0
 80050fe:	4337      	orrs	r7, r6
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8005100:	78ee      	ldrb	r6, [r5, #3]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8005102:	1c6b      	adds	r3, r5, #1
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8005104:	0436      	lsls	r6, r6, #16
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8005106:	4337      	orrs	r7, r6
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8005108:	7fde      	ldrb	r6, [r3, #31]
 800510a:	0636      	lsls	r6, r6, #24
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800510c:	4337      	orrs	r7, r6
 800510e:	e7ae      	b.n	800506e <HAL_RTC_SetAlarm_IT+0x72>
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005110:	f7fe fd92 	bl	8003c38 <HAL_GetTick>
 8005114:	23fa      	movs	r3, #250	; 0xfa
 8005116:	1b80      	subs	r0, r0, r6
 8005118:	009b      	lsls	r3, r3, #2
 800511a:	4298      	cmp	r0, r3
 800511c:	d9c0      	bls.n	80050a0 <HAL_RTC_SetAlarm_IT+0xa4>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800511e:	22ff      	movs	r2, #255	; 0xff
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005120:	2003      	movs	r0, #3
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005122:	6823      	ldr	r3, [r4, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005124:	3402      	adds	r4, #2
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005126:	625a      	str	r2, [r3, #36]	; 0x24
        __HAL_UNLOCK(hrtc);
 8005128:	9b00      	ldr	r3, [sp, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800512a:	77e0      	strb	r0, [r4, #31]
        __HAL_UNLOCK(hrtc);
 800512c:	77dd      	strb	r5, [r3, #31]
}
 800512e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8005130:	689a      	ldr	r2, [r3, #8]
 8005132:	4915      	ldr	r1, [pc, #84]	; (8005188 <HAL_RTC_SetAlarm_IT+0x18c>)
 8005134:	400a      	ands	r2, r1
 8005136:	609a      	str	r2, [r3, #8]
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8005138:	68d9      	ldr	r1, [r3, #12]
 800513a:	4a14      	ldr	r2, [pc, #80]	; (800518c <HAL_RTC_SetAlarm_IT+0x190>)
 800513c:	b2c9      	uxtb	r1, r1
 800513e:	430a      	orrs	r2, r1
 8005140:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 8005142:	f7fe fd79 	bl	8003c38 <HAL_GetTick>
 8005146:	0006      	movs	r6, r0
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8005148:	2202      	movs	r2, #2
 800514a:	6823      	ldr	r3, [r4, #0]
 800514c:	68dd      	ldr	r5, [r3, #12]
 800514e:	4015      	ands	r5, r2
 8005150:	d00b      	beq.n	800516a <HAL_RTC_SetAlarm_IT+0x16e>
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8005152:	9a01      	ldr	r2, [sp, #4]
    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8005154:	621f      	str	r7, [r3, #32]
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8005156:	649a      	str	r2, [r3, #72]	; 0x48
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8005158:	2280      	movs	r2, #128	; 0x80
 800515a:	6899      	ldr	r1, [r3, #8]
 800515c:	0092      	lsls	r2, r2, #2
 800515e:	430a      	orrs	r2, r1
 8005160:	609a      	str	r2, [r3, #8]
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8005162:	2280      	movs	r2, #128	; 0x80
 8005164:	6899      	ldr	r1, [r3, #8]
 8005166:	0192      	lsls	r2, r2, #6
 8005168:	e7aa      	b.n	80050c0 <HAL_RTC_SetAlarm_IT+0xc4>
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800516a:	f7fe fd65 	bl	8003c38 <HAL_GetTick>
 800516e:	23fa      	movs	r3, #250	; 0xfa
 8005170:	1b80      	subs	r0, r0, r6
 8005172:	009b      	lsls	r3, r3, #2
 8005174:	4298      	cmp	r0, r3
 8005176:	d9e7      	bls.n	8005148 <HAL_RTC_SetAlarm_IT+0x14c>
 8005178:	e7d1      	b.n	800511e <HAL_RTC_SetAlarm_IT+0x122>
 800517a:	46c0      	nop			; (mov r8, r8)
 800517c:	fffffeff 	.word	0xfffffeff
 8005180:	fffffe7f 	.word	0xfffffe7f
 8005184:	40010400 	.word	0x40010400
 8005188:	fffffdff 	.word	0xfffffdff
 800518c:	fffffd7f 	.word	0xfffffd7f

08005190 <RTC_Bcd2ToByte>:
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint32_t tmp = 0U;
  tmp = ((uint8_t)(Value & (uint8_t)0xF0U) >> (uint8_t)0x4U) * 10U;
 8005190:	230a      	movs	r3, #10
 8005192:	0902      	lsrs	r2, r0, #4
 8005194:	4353      	muls	r3, r2
  return (tmp + (Value & (uint8_t)0x0FU));
 8005196:	220f      	movs	r2, #15
 8005198:	4010      	ands	r0, r2
 800519a:	1818      	adds	r0, r3, r0
 800519c:	b2c0      	uxtb	r0, r0
}
 800519e:	4770      	bx	lr

080051a0 <HAL_RTC_GetTime>:
{
 80051a0:	b570      	push	{r4, r5, r6, lr}
 80051a2:	000c      	movs	r4, r1
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8U);
 80051a4:	257f      	movs	r5, #127	; 0x7f
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80051a6:	6801      	ldr	r1, [r0, #0]
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 80051a8:	203f      	movs	r0, #63	; 0x3f
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80051aa:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 80051ac:	6063      	str	r3, [r4, #4]
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80051ae:	690b      	ldr	r3, [r1, #16]
 80051b0:	045b      	lsls	r3, r3, #17
 80051b2:	0c5b      	lsrs	r3, r3, #17
 80051b4:	60a3      	str	r3, [r4, #8]
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80051b6:	680b      	ldr	r3, [r1, #0]
 80051b8:	490d      	ldr	r1, [pc, #52]	; (80051f0 <HAL_RTC_GetTime+0x50>)
 80051ba:	400b      	ands	r3, r1
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8U);
 80051bc:	0a1e      	lsrs	r6, r3, #8
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 80051be:	0c19      	lsrs	r1, r3, #16
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8U);
 80051c0:	402e      	ands	r6, r5
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 80051c2:	401d      	ands	r5, r3
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 80051c4:	2340      	movs	r3, #64	; 0x40
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 80051c6:	4008      	ands	r0, r1
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 80051c8:	4019      	ands	r1, r3
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 80051ca:	7020      	strb	r0, [r4, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8U);
 80051cc:	7066      	strb	r6, [r4, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 80051ce:	70a5      	strb	r5, [r4, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 80051d0:	70e1      	strb	r1, [r4, #3]
  if(Format == RTC_FORMAT_BIN)
 80051d2:	2a00      	cmp	r2, #0
 80051d4:	d10a      	bne.n	80051ec <HAL_RTC_GetTime+0x4c>
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80051d6:	f7ff ffdb 	bl	8005190 <RTC_Bcd2ToByte>
 80051da:	7020      	strb	r0, [r4, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80051dc:	0030      	movs	r0, r6
 80051de:	f7ff ffd7 	bl	8005190 <RTC_Bcd2ToByte>
 80051e2:	7060      	strb	r0, [r4, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80051e4:	0028      	movs	r0, r5
 80051e6:	f7ff ffd3 	bl	8005190 <RTC_Bcd2ToByte>
 80051ea:	70a0      	strb	r0, [r4, #2]
}
 80051ec:	2000      	movs	r0, #0
 80051ee:	bd70      	pop	{r4, r5, r6, pc}
 80051f0:	007f7f7f 	.word	0x007f7f7f

080051f4 <HAL_RTC_GetDate>:
{
 80051f4:	b570      	push	{r4, r5, r6, lr}
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80051f6:	253f      	movs	r5, #63	; 0x3f
{
 80051f8:	000c      	movs	r4, r1
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80051fa:	6803      	ldr	r3, [r0, #0]
 80051fc:	490d      	ldr	r1, [pc, #52]	; (8005234 <HAL_RTC_GetDate+0x40>)
 80051fe:	685b      	ldr	r3, [r3, #4]
 8005200:	400b      	ands	r3, r1
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8005202:	0c18      	lsrs	r0, r3, #16
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8005204:	04de      	lsls	r6, r3, #19
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8005206:	401d      	ands	r5, r3
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U); 
 8005208:	041b      	lsls	r3, r3, #16
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 800520a:	0ef6      	lsrs	r6, r6, #27
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U); 
 800520c:	0f5b      	lsrs	r3, r3, #29
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 800520e:	70e0      	strb	r0, [r4, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8005210:	7066      	strb	r6, [r4, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8005212:	70a5      	strb	r5, [r4, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U); 
 8005214:	7023      	strb	r3, [r4, #0]
  if(Format == RTC_FORMAT_BIN)
 8005216:	2a00      	cmp	r2, #0
 8005218:	d10a      	bne.n	8005230 <HAL_RTC_GetDate+0x3c>
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800521a:	f7ff ffb9 	bl	8005190 <RTC_Bcd2ToByte>
 800521e:	70e0      	strb	r0, [r4, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8005220:	0030      	movs	r0, r6
 8005222:	f7ff ffb5 	bl	8005190 <RTC_Bcd2ToByte>
 8005226:	7060      	strb	r0, [r4, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8005228:	0028      	movs	r0, r5
 800522a:	f7ff ffb1 	bl	8005190 <RTC_Bcd2ToByte>
 800522e:	70a0      	strb	r0, [r4, #2]
}
 8005230:	2000      	movs	r0, #0
 8005232:	bd70      	pop	{r4, r5, r6, pc}
 8005234:	00ffff3f 	.word	0x00ffff3f

08005238 <HAL_RTC_GetAlarm>:
{
 8005238:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800523a:	000c      	movs	r4, r1
 800523c:	9301      	str	r3, [sp, #4]
  if(Alarm == RTC_ALARM_A)
 800523e:	2380      	movs	r3, #128	; 0x80
 8005240:	6801      	ldr	r1, [r0, #0]
 8005242:	005b      	lsls	r3, r3, #1
 8005244:	1c65      	adds	r5, r4, #1
 8005246:	4e2c      	ldr	r6, [pc, #176]	; (80052f8 <HAL_RTC_GetAlarm+0xc0>)
 8005248:	429a      	cmp	r2, r3
 800524a:	d133      	bne.n	80052b4 <HAL_RTC_GetAlarm+0x7c>
    sAlarm->Alarm = RTC_ALARM_A;
 800524c:	6262      	str	r2, [r4, #36]	; 0x24
    tmpreg = (uint32_t)(hrtc->Instance->ALRMAR);
 800524e:	69ca      	ldr	r2, [r1, #28]
    subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMASSR ) & RTC_ALRMASSR_SS);
 8005250:	6c48      	ldr	r0, [r1, #68]	; 0x44
  sAlarm->AlarmTime.Hours = (uint32_t)((tmpreg & (RTC_ALRMAR_HT | RTC_ALRMAR_HU)) >> 16U);
 8005252:	0c11      	lsrs	r1, r2, #16
 8005254:	b2c9      	uxtb	r1, r1
 8005256:	3bc1      	subs	r3, #193	; 0xc1
 8005258:	469c      	mov	ip, r3
 800525a:	400b      	ands	r3, r1
 800525c:	7023      	strb	r3, [r4, #0]
  sAlarm->AlarmTime.Minutes = (uint32_t)((tmpreg & (RTC_ALRMAR_MNT | RTC_ALRMAR_MNU)) >> 8U);
 800525e:	237f      	movs	r3, #127	; 0x7f
 8005260:	0a17      	lsrs	r7, r2, #8
 8005262:	401f      	ands	r7, r3
  sAlarm->AlarmTime.Seconds = (uint32_t)(tmpreg & (RTC_ALRMAR_ST | RTC_ALRMAR_SU));
 8005264:	4013      	ands	r3, r2
 8005266:	70a3      	strb	r3, [r4, #2]
  sAlarm->AlarmTime.TimeFormat = (uint32_t)((tmpreg & RTC_ALRMAR_PM) >> 16U);
 8005268:	2340      	movs	r3, #64	; 0x40
 800526a:	4019      	ands	r1, r3
 800526c:	70e1      	strb	r1, [r4, #3]
  sAlarm->AlarmDateWeekDay = (uint32_t)((tmpreg & (RTC_ALRMAR_DT | RTC_ALRMAR_DU)) >> 24U);
 800526e:	4661      	mov	r1, ip
 8005270:	0e13      	lsrs	r3, r2, #24
    subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMASSR ) & RTC_ALRMASSR_SS);
 8005272:	0440      	lsls	r0, r0, #17
  sAlarm->AlarmDateWeekDay = (uint32_t)((tmpreg & (RTC_ALRMAR_DT | RTC_ALRMAR_DU)) >> 24U);
 8005274:	400b      	ands	r3, r1
    subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMASSR ) & RTC_ALRMASSR_SS);
 8005276:	0c40      	lsrs	r0, r0, #17
  sAlarm->AlarmTime.Minutes = (uint32_t)((tmpreg & (RTC_ALRMAR_MNT | RTC_ALRMAR_MNU)) >> 8U);
 8005278:	7067      	strb	r7, [r4, #1]
  sAlarm->AlarmTime.SubSeconds = (uint32_t) subsecondtmpreg;
 800527a:	6060      	str	r0, [r4, #4]
  sAlarm->AlarmDateWeekDay = (uint32_t)((tmpreg & (RTC_ALRMAR_DT | RTC_ALRMAR_DU)) >> 24U);
 800527c:	77eb      	strb	r3, [r5, #31]
  sAlarm->AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMAR_WDSEL);
 800527e:	2380      	movs	r3, #128	; 0x80
 8005280:	05db      	lsls	r3, r3, #23
 8005282:	4013      	ands	r3, r2
  sAlarm->AlarmMask = (uint32_t)(tmpreg & RTC_ALARMMASK_ALL);
 8005284:	4032      	ands	r2, r6
  sAlarm->AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMAR_WDSEL);
 8005286:	61e3      	str	r3, [r4, #28]
  sAlarm->AlarmMask = (uint32_t)(tmpreg & RTC_ALARMMASK_ALL);
 8005288:	6162      	str	r2, [r4, #20]
  if(Format == RTC_FORMAT_BIN)
 800528a:	9b01      	ldr	r3, [sp, #4]
 800528c:	2b00      	cmp	r3, #0
 800528e:	d10f      	bne.n	80052b0 <HAL_RTC_GetAlarm+0x78>
    sAlarm->AlarmTime.Hours = RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours);
 8005290:	7820      	ldrb	r0, [r4, #0]
 8005292:	f7ff ff7d 	bl	8005190 <RTC_Bcd2ToByte>
 8005296:	7020      	strb	r0, [r4, #0]
    sAlarm->AlarmTime.Minutes = RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes);
 8005298:	7860      	ldrb	r0, [r4, #1]
 800529a:	f7ff ff79 	bl	8005190 <RTC_Bcd2ToByte>
 800529e:	7060      	strb	r0, [r4, #1]
    sAlarm->AlarmTime.Seconds = RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds);
 80052a0:	78a0      	ldrb	r0, [r4, #2]
 80052a2:	f7ff ff75 	bl	8005190 <RTC_Bcd2ToByte>
 80052a6:	70a0      	strb	r0, [r4, #2]
    sAlarm->AlarmDateWeekDay = RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay);
 80052a8:	7fe8      	ldrb	r0, [r5, #31]
 80052aa:	f7ff ff71 	bl	8005190 <RTC_Bcd2ToByte>
 80052ae:	77e8      	strb	r0, [r5, #31]
}
 80052b0:	2000      	movs	r0, #0
 80052b2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    sAlarm->Alarm = RTC_ALARM_B;
 80052b4:	2380      	movs	r3, #128	; 0x80
  sAlarm->AlarmTime.Hours = (uint32_t)((tmpreg & (RTC_ALRMBR_HT | RTC_ALRMBR_HU)) >> 16U);
 80052b6:	223f      	movs	r2, #63	; 0x3f
    sAlarm->Alarm = RTC_ALARM_B;
 80052b8:	009b      	lsls	r3, r3, #2
 80052ba:	6263      	str	r3, [r4, #36]	; 0x24
    tmpreg = (uint32_t)(hrtc->Instance->ALRMBR);
 80052bc:	6a0b      	ldr	r3, [r1, #32]
    subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMBSSR) & RTC_ALRMBSSR_SS);
 80052be:	6c88      	ldr	r0, [r1, #72]	; 0x48
  sAlarm->AlarmTime.Hours = (uint32_t)((tmpreg & (RTC_ALRMBR_HT | RTC_ALRMBR_HU)) >> 16U);
 80052c0:	0c19      	lsrs	r1, r3, #16
 80052c2:	b2c9      	uxtb	r1, r1
 80052c4:	4694      	mov	ip, r2
 80052c6:	400a      	ands	r2, r1
 80052c8:	7022      	strb	r2, [r4, #0]
  sAlarm->AlarmTime.Minutes = (uint32_t)((tmpreg & (RTC_ALRMBR_MNT | RTC_ALRMBR_MNU)) >> 8U);
 80052ca:	227f      	movs	r2, #127	; 0x7f
 80052cc:	0a1f      	lsrs	r7, r3, #8
 80052ce:	4017      	ands	r7, r2
  sAlarm->AlarmTime.Seconds = (uint32_t)(tmpreg & (RTC_ALRMBR_ST | RTC_ALRMBR_SU));
 80052d0:	401a      	ands	r2, r3
 80052d2:	70a2      	strb	r2, [r4, #2]
  sAlarm->AlarmTime.TimeFormat = (uint32_t)((tmpreg & RTC_ALRMBR_PM) >> 16U);
 80052d4:	2240      	movs	r2, #64	; 0x40
 80052d6:	4011      	ands	r1, r2
 80052d8:	70e1      	strb	r1, [r4, #3]
  sAlarm->AlarmDateWeekDay = (uint32_t)((tmpreg & (RTC_ALRMBR_DT | RTC_ALRMBR_DU)) >> 24U);
 80052da:	4661      	mov	r1, ip
 80052dc:	0e1a      	lsrs	r2, r3, #24
    subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMBSSR) & RTC_ALRMBSSR_SS);
 80052de:	0440      	lsls	r0, r0, #17
  sAlarm->AlarmDateWeekDay = (uint32_t)((tmpreg & (RTC_ALRMBR_DT | RTC_ALRMBR_DU)) >> 24U);
 80052e0:	400a      	ands	r2, r1
    subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMBSSR) & RTC_ALRMBSSR_SS);
 80052e2:	0c40      	lsrs	r0, r0, #17
  sAlarm->AlarmTime.Minutes = (uint32_t)((tmpreg & (RTC_ALRMBR_MNT | RTC_ALRMBR_MNU)) >> 8U);
 80052e4:	7067      	strb	r7, [r4, #1]
  sAlarm->AlarmTime.SubSeconds = (uint32_t) subsecondtmpreg;
 80052e6:	6060      	str	r0, [r4, #4]
  sAlarm->AlarmDateWeekDay = (uint32_t)((tmpreg & (RTC_ALRMBR_DT | RTC_ALRMBR_DU)) >> 24U);
 80052e8:	77ea      	strb	r2, [r5, #31]
  sAlarm->AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMBR_WDSEL);
 80052ea:	2280      	movs	r2, #128	; 0x80
 80052ec:	05d2      	lsls	r2, r2, #23
 80052ee:	401a      	ands	r2, r3
  sAlarm->AlarmMask = (uint32_t)(tmpreg & RTC_ALARMMASK_ALL);
 80052f0:	4033      	ands	r3, r6
  sAlarm->AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMBR_WDSEL);
 80052f2:	61e2      	str	r2, [r4, #28]
  sAlarm->AlarmMask = (uint32_t)(tmpreg & RTC_ALARMMASK_ALL);
 80052f4:	6163      	str	r3, [r4, #20]
 80052f6:	e7c8      	b.n	800528a <HAL_RTC_GetAlarm+0x52>
 80052f8:	80808080 	.word	0x80808080

080052fc <HAL_RTCEx_EnableBypassShadow>:
  * @note   When the Bypass Shadow is enabled the calendar value are taken
  *         directly from the Calendar counter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef* hrtc)
{
 80052fc:	b510      	push	{r4, lr}
  /* Process Locked */
  __HAL_LOCK(hrtc);
 80052fe:	1c41      	adds	r1, r0, #1
 8005300:	7fca      	ldrb	r2, [r1, #31]
{
 8005302:	0003      	movs	r3, r0
 8005304:	2002      	movs	r0, #2
  __HAL_LOCK(hrtc);
 8005306:	2a01      	cmp	r2, #1
 8005308:	d010      	beq.n	800532c <HAL_RTCEx_EnableBypassShadow+0x30>

  hrtc->State = HAL_RTC_STATE_BUSY;

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800530a:	22ca      	movs	r2, #202	; 0xca
  hrtc->State = HAL_RTC_STATE_BUSY;
 800530c:	181c      	adds	r4, r3, r0
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800530e:	681b      	ldr	r3, [r3, #0]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005310:	77e0      	strb	r0, [r4, #31]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005312:	625a      	str	r2, [r3, #36]	; 0x24
 8005314:	3a77      	subs	r2, #119	; 0x77
 8005316:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  hrtc->Instance->CR |= (uint8_t)RTC_CR_BYPSHAD;
 8005318:	6898      	ldr	r0, [r3, #8]
 800531a:	3a33      	subs	r2, #51	; 0x33
 800531c:	4302      	orrs	r2, r0
 800531e:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005320:	22ff      	movs	r2, #255	; 0xff

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005322:	2000      	movs	r0, #0
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005324:	625a      	str	r2, [r3, #36]	; 0x24
  hrtc->State = HAL_RTC_STATE_READY;
 8005326:	2301      	movs	r3, #1
 8005328:	77e3      	strb	r3, [r4, #31]
  __HAL_UNLOCK(hrtc);
 800532a:	77c8      	strb	r0, [r1, #31]

  return HAL_OK;
}
 800532c:	bd10      	pop	{r4, pc}
	...

08005330 <SPI_WaitOnFlagUntilTimeout>:
  * @param  Status: Flag status to check: RESET or set
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status, uint32_t Timeout)  
{
 8005330:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005332:	001d      	movs	r5, r3
 8005334:	0004      	movs	r4, r0
 8005336:	000e      	movs	r6, r1
 8005338:	9201      	str	r2, [sp, #4]
  uint32_t tickstart = 0U;

  /* Get tick */ 
  tickstart = HAL_GetTick();
 800533a:	f7fe fc7d 	bl	8003c38 <HAL_GetTick>

  /* Wait until flag is set */
  if(Status == RESET)
 800533e:	9b01      	ldr	r3, [sp, #4]
  tickstart = HAL_GetTick();
 8005340:	0007      	movs	r7, r0
  if(Status == RESET)
 8005342:	2b00      	cmp	r3, #0
 8005344:	d035      	beq.n	80053b2 <SPI_WaitOnFlagUntilTimeout+0x82>
      }
    }
  }
  else
  {
    while(__HAL_SPI_GET_FLAG(hspi, Flag) != RESET)
 8005346:	6822      	ldr	r2, [r4, #0]
 8005348:	6893      	ldr	r3, [r2, #8]
 800534a:	4033      	ands	r3, r6
 800534c:	429e      	cmp	r6, r3
 800534e:	d135      	bne.n	80053bc <SPI_WaitOnFlagUntilTimeout+0x8c>
    {
      if(Timeout != HAL_MAX_DELAY)
 8005350:	1c6b      	adds	r3, r5, #1
 8005352:	d0f9      	beq.n	8005348 <SPI_WaitOnFlagUntilTimeout+0x18>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8005354:	2d00      	cmp	r5, #0
 8005356:	d009      	beq.n	800536c <SPI_WaitOnFlagUntilTimeout+0x3c>
 8005358:	f7fe fc6e 	bl	8003c38 <HAL_GetTick>
 800535c:	1bc0      	subs	r0, r0, r7
 800535e:	4285      	cmp	r5, r0
 8005360:	d2f1      	bcs.n	8005346 <SPI_WaitOnFlagUntilTimeout+0x16>
 8005362:	e003      	b.n	800536c <SPI_WaitOnFlagUntilTimeout+0x3c>
      if(Timeout != HAL_MAX_DELAY)
 8005364:	1c6b      	adds	r3, r5, #1
 8005366:	d025      	beq.n	80053b4 <SPI_WaitOnFlagUntilTimeout+0x84>
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8005368:	2d00      	cmp	r5, #0
 800536a:	d11d      	bne.n	80053a8 <SPI_WaitOnFlagUntilTimeout+0x78>
          /* Disable the SPI and reset the CRC: the CRC value should be cleared
             on both master and slave sides in order to resynchronize the master
             and slave for their respective CRC calculation */

          /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
          __HAL_SPI_DISABLE_IT(hspi, (uint32_t)(SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800536c:	21e0      	movs	r1, #224	; 0xe0
 800536e:	6823      	ldr	r3, [r4, #0]
 8005370:	685a      	ldr	r2, [r3, #4]
 8005372:	438a      	bics	r2, r1
 8005374:	605a      	str	r2, [r3, #4]

          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005376:	681a      	ldr	r2, [r3, #0]
 8005378:	39a0      	subs	r1, #160	; 0xa0
 800537a:	438a      	bics	r2, r1

          /* Reset CRC Calculation */
          if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800537c:	2180      	movs	r1, #128	; 0x80
          __HAL_SPI_DISABLE(hspi);
 800537e:	601a      	str	r2, [r3, #0]
          if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005380:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8005382:	0189      	lsls	r1, r1, #6
 8005384:	428a      	cmp	r2, r1
 8005386:	d106      	bne.n	8005396 <SPI_WaitOnFlagUntilTimeout+0x66>
          {
            SPI_RESET_CRC(hspi);
 8005388:	6819      	ldr	r1, [r3, #0]
 800538a:	480d      	ldr	r0, [pc, #52]	; (80053c0 <SPI_WaitOnFlagUntilTimeout+0x90>)
 800538c:	4001      	ands	r1, r0
 800538e:	6019      	str	r1, [r3, #0]
 8005390:	6819      	ldr	r1, [r3, #0]
 8005392:	430a      	orrs	r2, r1
 8005394:	601a      	str	r2, [r3, #0]
          }

          hspi->State= HAL_SPI_STATE_READY;
 8005396:	0023      	movs	r3, r4
 8005398:	2201      	movs	r2, #1
 800539a:	3351      	adds	r3, #81	; 0x51
 800539c:	701a      	strb	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800539e:	2300      	movs	r3, #0
 80053a0:	3450      	adds	r4, #80	; 0x50
 80053a2:	7023      	strb	r3, [r4, #0]

          return HAL_TIMEOUT;
 80053a4:	2003      	movs	r0, #3
 80053a6:	e00a      	b.n	80053be <SPI_WaitOnFlagUntilTimeout+0x8e>
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80053a8:	f7fe fc46 	bl	8003c38 <HAL_GetTick>
 80053ac:	1bc0      	subs	r0, r0, r7
 80053ae:	4285      	cmp	r5, r0
 80053b0:	d3dc      	bcc.n	800536c <SPI_WaitOnFlagUntilTimeout+0x3c>
    while(__HAL_SPI_GET_FLAG(hspi, Flag) == RESET)
 80053b2:	6822      	ldr	r2, [r4, #0]
 80053b4:	6893      	ldr	r3, [r2, #8]
 80053b6:	4033      	ands	r3, r6
 80053b8:	429e      	cmp	r6, r3
 80053ba:	d1d3      	bne.n	8005364 <SPI_WaitOnFlagUntilTimeout+0x34>
        }
      }
    }
  }
  return HAL_OK;
 80053bc:	2000      	movs	r0, #0
}
 80053be:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80053c0:	ffffdfff 	.word	0xffffdfff

080053c4 <HAL_SPI_MspInit>:
 80053c4:	4770      	bx	lr
	...

080053c8 <HAL_SPI_Init>:
{
 80053c8:	b570      	push	{r4, r5, r6, lr}
 80053ca:	0004      	movs	r4, r0
    return HAL_ERROR;
 80053cc:	2001      	movs	r0, #1
  if(hspi == NULL)
 80053ce:	2c00      	cmp	r4, #0
 80053d0:	d037      	beq.n	8005442 <HAL_SPI_Init+0x7a>
  if(hspi->State == HAL_SPI_STATE_RESET)
 80053d2:	0025      	movs	r5, r4
 80053d4:	3551      	adds	r5, #81	; 0x51
 80053d6:	782b      	ldrb	r3, [r5, #0]
 80053d8:	b2db      	uxtb	r3, r3
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d105      	bne.n	80053ea <HAL_SPI_Init+0x22>
    hspi->Lock = HAL_UNLOCKED;
 80053de:	0022      	movs	r2, r4
 80053e0:	3250      	adds	r2, #80	; 0x50
 80053e2:	7013      	strb	r3, [r2, #0]
    HAL_SPI_MspInit(hspi);
 80053e4:	0020      	movs	r0, r4
 80053e6:	f7ff ffed 	bl	80053c4 <HAL_SPI_MspInit>
  hspi->State = HAL_SPI_STATE_BUSY;
 80053ea:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);
 80053ec:	2240      	movs	r2, #64	; 0x40
 80053ee:	6821      	ldr	r1, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 80053f0:	702b      	strb	r3, [r5, #0]
  __HAL_SPI_DISABLE(hspi);
 80053f2:	680b      	ldr	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80053f4:	68a0      	ldr	r0, [r4, #8]
  __HAL_SPI_DISABLE(hspi);
 80053f6:	4393      	bics	r3, r2
 80053f8:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80053fa:	6863      	ldr	r3, [r4, #4]
 80053fc:	69a2      	ldr	r2, [r4, #24]
 80053fe:	4303      	orrs	r3, r0
 8005400:	68e0      	ldr	r0, [r4, #12]
 8005402:	4303      	orrs	r3, r0
 8005404:	6920      	ldr	r0, [r4, #16]
 8005406:	4303      	orrs	r3, r0
 8005408:	6960      	ldr	r0, [r4, #20]
 800540a:	4303      	orrs	r3, r0
 800540c:	69e0      	ldr	r0, [r4, #28]
 800540e:	4303      	orrs	r3, r0
 8005410:	6a20      	ldr	r0, [r4, #32]
 8005412:	4303      	orrs	r3, r0
 8005414:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8005416:	4303      	orrs	r3, r0
 8005418:	2080      	movs	r0, #128	; 0x80
 800541a:	0080      	lsls	r0, r0, #2
 800541c:	4010      	ands	r0, r2
 800541e:	4303      	orrs	r3, r0
 8005420:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8005422:	2304      	movs	r3, #4
 8005424:	0c12      	lsrs	r2, r2, #16
 8005426:	401a      	ands	r2, r3
 8005428:	6a63      	ldr	r3, [r4, #36]	; 0x24
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800542a:	2000      	movs	r0, #0
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800542c:	431a      	orrs	r2, r3
  WRITE_REG(hspi->Instance->CRCPR, hspi->Init.CRCPolynomial);
 800542e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8005430:	604a      	str	r2, [r1, #4]
  WRITE_REG(hspi->Instance->CRCPR, hspi->Init.CRCPolynomial);
 8005432:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005434:	69cb      	ldr	r3, [r1, #28]
 8005436:	4a03      	ldr	r2, [pc, #12]	; (8005444 <HAL_SPI_Init+0x7c>)
 8005438:	4013      	ands	r3, r2
 800543a:	61cb      	str	r3, [r1, #28]
  hspi->State = HAL_SPI_STATE_READY;
 800543c:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800543e:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8005440:	702b      	strb	r3, [r5, #0]
}
 8005442:	bd70      	pop	{r4, r5, r6, pc}
 8005444:	fffff7ff 	.word	0xfffff7ff

08005448 <HAL_SPI_MspDeInit>:
 8005448:	4770      	bx	lr

0800544a <HAL_SPI_DeInit>:
{
 800544a:	b570      	push	{r4, r5, r6, lr}
 800544c:	0004      	movs	r4, r0
    return HAL_ERROR;
 800544e:	2001      	movs	r0, #1
  if(hspi == NULL)
 8005450:	2c00      	cmp	r4, #0
 8005452:	d010      	beq.n	8005476 <HAL_SPI_DeInit+0x2c>
  hspi->State = HAL_SPI_STATE_BUSY;
 8005454:	0025      	movs	r5, r4
 8005456:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);
 8005458:	2140      	movs	r1, #64	; 0x40
 800545a:	6822      	ldr	r2, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 800545c:	3551      	adds	r5, #81	; 0x51
 800545e:	702b      	strb	r3, [r5, #0]
  __HAL_SPI_DISABLE(hspi);
 8005460:	6813      	ldr	r3, [r2, #0]
  HAL_SPI_MspDeInit(hspi);
 8005462:	0020      	movs	r0, r4
  __HAL_SPI_DISABLE(hspi);
 8005464:	438b      	bics	r3, r1
 8005466:	6013      	str	r3, [r2, #0]
  HAL_SPI_MspDeInit(hspi);
 8005468:	f7ff ffee 	bl	8005448 <HAL_SPI_MspDeInit>
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800546c:	2000      	movs	r0, #0
  __HAL_UNLOCK(hspi);
 800546e:	3450      	adds	r4, #80	; 0x50
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005470:	6060      	str	r0, [r4, #4]
  hspi->State = HAL_SPI_STATE_RESET;
 8005472:	7028      	strb	r0, [r5, #0]
  __HAL_UNLOCK(hspi);
 8005474:	7020      	strb	r0, [r4, #0]
}
 8005476:	bd70      	pop	{r4, r5, r6, pc}

08005478 <HAL_SPI_TransmitReceive>:
{
 8005478:	b5f0      	push	{r4, r5, r6, r7, lr}
 800547a:	b085      	sub	sp, #20
 800547c:	0004      	movs	r4, r0
  __IO uint16_t tmpreg = 0U;
 800547e:	a802      	add	r0, sp, #8
 8005480:	3006      	adds	r0, #6
 8005482:	9001      	str	r0, [sp, #4]
 8005484:	2000      	movs	r0, #0
 8005486:	9d01      	ldr	r5, [sp, #4]
 8005488:	8028      	strh	r0, [r5, #0]
  if((hspi->State == HAL_SPI_STATE_READY) || (hspi->State == HAL_SPI_STATE_BUSY_RX))
 800548a:	0025      	movs	r5, r4
 800548c:	3551      	adds	r5, #81	; 0x51
 800548e:	7828      	ldrb	r0, [r5, #0]
 8005490:	2801      	cmp	r0, #1
 8005492:	d004      	beq.n	800549e <HAL_SPI_TransmitReceive+0x26>
 8005494:	782e      	ldrb	r6, [r5, #0]
    return HAL_BUSY;
 8005496:	2002      	movs	r0, #2
  if((hspi->State == HAL_SPI_STATE_READY) || (hspi->State == HAL_SPI_STATE_BUSY_RX))
 8005498:	2e22      	cmp	r6, #34	; 0x22
 800549a:	d000      	beq.n	800549e <HAL_SPI_TransmitReceive+0x26>
 800549c:	e083      	b.n	80055a6 <HAL_SPI_TransmitReceive+0x12e>
      return  HAL_ERROR;
 800549e:	2001      	movs	r0, #1
    if((pTxData == NULL ) || (pRxData == NULL ) || (Size == 0U))
 80054a0:	2900      	cmp	r1, #0
 80054a2:	d100      	bne.n	80054a6 <HAL_SPI_TransmitReceive+0x2e>
 80054a4:	e07f      	b.n	80055a6 <HAL_SPI_TransmitReceive+0x12e>
 80054a6:	2a00      	cmp	r2, #0
 80054a8:	d100      	bne.n	80054ac <HAL_SPI_TransmitReceive+0x34>
 80054aa:	e07c      	b.n	80055a6 <HAL_SPI_TransmitReceive+0x12e>
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d07a      	beq.n	80055a6 <HAL_SPI_TransmitReceive+0x12e>
    __HAL_LOCK(hspi);
 80054b0:	0026      	movs	r6, r4
 80054b2:	3650      	adds	r6, #80	; 0x50
 80054b4:	7830      	ldrb	r0, [r6, #0]
 80054b6:	4684      	mov	ip, r0
 80054b8:	4667      	mov	r7, ip
    return HAL_BUSY;
 80054ba:	2002      	movs	r0, #2
    __HAL_LOCK(hspi);
 80054bc:	2f01      	cmp	r7, #1
 80054be:	d072      	beq.n	80055a6 <HAL_SPI_TransmitReceive+0x12e>
 80054c0:	3801      	subs	r0, #1
 80054c2:	7030      	strb	r0, [r6, #0]
    if(hspi->State == HAL_SPI_STATE_READY)
 80054c4:	7828      	ldrb	r0, [r5, #0]
 80054c6:	2801      	cmp	r0, #1
 80054c8:	d101      	bne.n	80054ce <HAL_SPI_TransmitReceive+0x56>
      hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80054ca:	3031      	adds	r0, #49	; 0x31
 80054cc:	7028      	strb	r0, [r5, #0]
    hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80054ce:	2000      	movs	r0, #0
    hspi->RxXferSize  = Size;
 80054d0:	87a3      	strh	r3, [r4, #60]	; 0x3c
    hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80054d2:	6560      	str	r0, [r4, #84]	; 0x54
    hspi->TxXferSize  = Size; 
 80054d4:	86a3      	strh	r3, [r4, #52]	; 0x34
    hspi->RxXferCount = Size;  
 80054d6:	87e3      	strh	r3, [r4, #62]	; 0x3e
    hspi->TxXferCount = Size;
 80054d8:	86e3      	strh	r3, [r4, #54]	; 0x36
    if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80054da:	2380      	movs	r3, #128	; 0x80
    hspi->RxISR = 0U;
 80054dc:	64a0      	str	r0, [r4, #72]	; 0x48
    hspi->TxISR = 0U;
 80054de:	64e0      	str	r0, [r4, #76]	; 0x4c
    if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80054e0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    hspi->pRxBuffPtr  = pRxData;
 80054e2:	63a2      	str	r2, [r4, #56]	; 0x38
    hspi->pTxBuffPtr  = pTxData;
 80054e4:	6321      	str	r1, [r4, #48]	; 0x30
    if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80054e6:	019b      	lsls	r3, r3, #6
 80054e8:	4298      	cmp	r0, r3
 80054ea:	d107      	bne.n	80054fc <HAL_SPI_TransmitReceive+0x84>
      SPI_RESET_CRC(hspi);
 80054ec:	6823      	ldr	r3, [r4, #0]
 80054ee:	4f9d      	ldr	r7, [pc, #628]	; (8005764 <HAL_SPI_TransmitReceive+0x2ec>)
 80054f0:	681a      	ldr	r2, [r3, #0]
 80054f2:	403a      	ands	r2, r7
 80054f4:	601a      	str	r2, [r3, #0]
 80054f6:	681a      	ldr	r2, [r3, #0]
 80054f8:	4302      	orrs	r2, r0
 80054fa:	601a      	str	r2, [r3, #0]
    if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 80054fc:	6823      	ldr	r3, [r4, #0]
 80054fe:	681a      	ldr	r2, [r3, #0]
 8005500:	4694      	mov	ip, r2
 8005502:	2240      	movs	r2, #64	; 0x40
 8005504:	4667      	mov	r7, ip
 8005506:	4217      	tst	r7, r2
 8005508:	d102      	bne.n	8005510 <HAL_SPI_TransmitReceive+0x98>
      __HAL_SPI_ENABLE(hspi);
 800550a:	681f      	ldr	r7, [r3, #0]
 800550c:	433a      	orrs	r2, r7
 800550e:	601a      	str	r2, [r3, #0]
    if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005510:	2280      	movs	r2, #128	; 0x80
 8005512:	0112      	lsls	r2, r2, #4
 8005514:	4694      	mov	ip, r2
 8005516:	68e7      	ldr	r7, [r4, #12]
 8005518:	6862      	ldr	r2, [r4, #4]
 800551a:	4567      	cmp	r7, ip
 800551c:	d000      	beq.n	8005520 <HAL_SPI_TransmitReceive+0xa8>
 800551e:	e07e      	b.n	800561e <HAL_SPI_TransmitReceive+0x1a6>
      if((hspi->Init.Mode == SPI_MODE_SLAVE) || ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->TxXferCount == 0x01U)))
 8005520:	2a00      	cmp	r2, #0
 8005522:	d006      	beq.n	8005532 <HAL_SPI_TransmitReceive+0xba>
 8005524:	2782      	movs	r7, #130	; 0x82
 8005526:	007f      	lsls	r7, r7, #1
 8005528:	42ba      	cmp	r2, r7
 800552a:	d10a      	bne.n	8005542 <HAL_SPI_TransmitReceive+0xca>
 800552c:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 800552e:	2a01      	cmp	r2, #1
 8005530:	d107      	bne.n	8005542 <HAL_SPI_TransmitReceive+0xca>
        hspi->Instance->DR = *((uint16_t*)hspi->pTxBuffPtr);
 8005532:	880a      	ldrh	r2, [r1, #0]
        hspi->pTxBuffPtr+=2U;
 8005534:	3102      	adds	r1, #2
        hspi->Instance->DR = *((uint16_t*)hspi->pTxBuffPtr);
 8005536:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount--;
 8005538:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
        hspi->pTxBuffPtr+=2U;
 800553a:	6321      	str	r1, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 800553c:	3a01      	subs	r2, #1
 800553e:	b292      	uxth	r2, r2
 8005540:	86e2      	strh	r2, [r4, #54]	; 0x36
      if(hspi->TxXferCount == 0U)
 8005542:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8005544:	2a00      	cmp	r2, #0
 8005546:	d162      	bne.n	800560e <HAL_SPI_TransmitReceive+0x196>
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005548:	2280      	movs	r2, #128	; 0x80
 800554a:	0192      	lsls	r2, r2, #6
 800554c:	4290      	cmp	r0, r2
 800554e:	d104      	bne.n	800555a <HAL_SPI_TransmitReceive+0xe2>
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8005550:	2280      	movs	r2, #128	; 0x80
 8005552:	6819      	ldr	r1, [r3, #0]
 8005554:	0152      	lsls	r2, r2, #5
 8005556:	430a      	orrs	r2, r1
 8005558:	601a      	str	r2, [r3, #0]
        if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 800555a:	2200      	movs	r2, #0
 800555c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
          if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 800555e:	2101      	movs	r1, #1
 8005560:	0020      	movs	r0, r4
 8005562:	f7ff fee5 	bl	8005330 <SPI_WaitOnFlagUntilTimeout>
 8005566:	2800      	cmp	r0, #0
 8005568:	d11c      	bne.n	80055a4 <HAL_SPI_TransmitReceive+0x12c>
          *((uint16_t*)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800556a:	6822      	ldr	r2, [r4, #0]
 800556c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800556e:	68d2      	ldr	r2, [r2, #12]
 8005570:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr+=2U;
 8005572:	3302      	adds	r3, #2
 8005574:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->RxXferCount--;
 8005576:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005578:	3b01      	subs	r3, #1
 800557a:	b29b      	uxth	r3, r3
 800557c:	87e3      	strh	r3, [r4, #62]	; 0x3e
    if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800557e:	2380      	movs	r3, #128	; 0x80
 8005580:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8005582:	019b      	lsls	r3, r3, #6
 8005584:	429a      	cmp	r2, r3
 8005586:	d000      	beq.n	800558a <HAL_SPI_TransmitReceive+0x112>
 8005588:	e0c4      	b.n	8005714 <HAL_SPI_TransmitReceive+0x29c>
      if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 800558a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800558c:	2200      	movs	r2, #0
 800558e:	2101      	movs	r1, #1
 8005590:	0020      	movs	r0, r4
 8005592:	f7ff fecd 	bl	8005330 <SPI_WaitOnFlagUntilTimeout>
 8005596:	2800      	cmp	r0, #0
 8005598:	d100      	bne.n	800559c <HAL_SPI_TransmitReceive+0x124>
 800559a:	e0b4      	b.n	8005706 <HAL_SPI_TransmitReceive+0x28e>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 800559c:	2302      	movs	r3, #2
 800559e:	6d62      	ldr	r2, [r4, #84]	; 0x54
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80055a0:	4313      	orrs	r3, r2
 80055a2:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 80055a4:	2003      	movs	r0, #3
}
 80055a6:	b005      	add	sp, #20
 80055a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
          if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_TXE, RESET, Timeout) != HAL_OK)
 80055aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80055ac:	2200      	movs	r2, #0
 80055ae:	2102      	movs	r1, #2
 80055b0:	0020      	movs	r0, r4
 80055b2:	f7ff febd 	bl	8005330 <SPI_WaitOnFlagUntilTimeout>
 80055b6:	2800      	cmp	r0, #0
 80055b8:	d1f4      	bne.n	80055a4 <HAL_SPI_TransmitReceive+0x12c>
          hspi->Instance->DR = *((uint16_t*)hspi->pTxBuffPtr);
 80055ba:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80055bc:	6822      	ldr	r2, [r4, #0]
 80055be:	8819      	ldrh	r1, [r3, #0]
          hspi->pTxBuffPtr+=2U;
 80055c0:	3302      	adds	r3, #2
          hspi->Instance->DR = *((uint16_t*)hspi->pTxBuffPtr);
 80055c2:	60d1      	str	r1, [r2, #12]
          hspi->pTxBuffPtr+=2U;
 80055c4:	6323      	str	r3, [r4, #48]	; 0x30
          hspi->TxXferCount--;
 80055c6:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80055c8:	3b01      	subs	r3, #1
 80055ca:	b29b      	uxth	r3, r3
 80055cc:	86e3      	strh	r3, [r4, #54]	; 0x36
          if((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 80055ce:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d10a      	bne.n	80055ea <HAL_SPI_TransmitReceive+0x172>
 80055d4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80055d6:	0019      	movs	r1, r3
 80055d8:	2380      	movs	r3, #128	; 0x80
 80055da:	019b      	lsls	r3, r3, #6
 80055dc:	4299      	cmp	r1, r3
 80055de:	d104      	bne.n	80055ea <HAL_SPI_TransmitReceive+0x172>
            SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 80055e0:	2180      	movs	r1, #128	; 0x80
 80055e2:	6813      	ldr	r3, [r2, #0]
 80055e4:	0149      	lsls	r1, r1, #5
 80055e6:	430b      	orrs	r3, r1
 80055e8:	6013      	str	r3, [r2, #0]
          if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 80055ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80055ec:	2200      	movs	r2, #0
 80055ee:	2101      	movs	r1, #1
 80055f0:	0020      	movs	r0, r4
 80055f2:	f7ff fe9d 	bl	8005330 <SPI_WaitOnFlagUntilTimeout>
 80055f6:	2800      	cmp	r0, #0
 80055f8:	d1d4      	bne.n	80055a4 <HAL_SPI_TransmitReceive+0x12c>
          *((uint16_t*)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80055fa:	6822      	ldr	r2, [r4, #0]
 80055fc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80055fe:	68d2      	ldr	r2, [r2, #12]
 8005600:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr+=2U;
 8005602:	3302      	adds	r3, #2
 8005604:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->RxXferCount--;
 8005606:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005608:	3b01      	subs	r3, #1
 800560a:	b29b      	uxth	r3, r3
 800560c:	87e3      	strh	r3, [r4, #62]	; 0x3e
        while(hspi->TxXferCount > 0U)
 800560e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8005610:	2b00      	cmp	r3, #0
 8005612:	d1ca      	bne.n	80055aa <HAL_SPI_TransmitReceive+0x132>
        if(hspi->Init.Mode == SPI_MODE_SLAVE)
 8005614:	6862      	ldr	r2, [r4, #4]
 8005616:	2a00      	cmp	r2, #0
 8005618:	d1b1      	bne.n	800557e <HAL_SPI_TransmitReceive+0x106>
          if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 800561a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800561c:	e79f      	b.n	800555e <HAL_SPI_TransmitReceive+0xe6>
      if((hspi->Init.Mode == SPI_MODE_SLAVE) || ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->TxXferCount == 0x01U)))
 800561e:	2a00      	cmp	r2, #0
 8005620:	d006      	beq.n	8005630 <HAL_SPI_TransmitReceive+0x1b8>
 8005622:	2782      	movs	r7, #130	; 0x82
 8005624:	007f      	lsls	r7, r7, #1
 8005626:	42ba      	cmp	r2, r7
 8005628:	d10a      	bne.n	8005640 <HAL_SPI_TransmitReceive+0x1c8>
 800562a:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 800562c:	2a01      	cmp	r2, #1
 800562e:	d107      	bne.n	8005640 <HAL_SPI_TransmitReceive+0x1c8>
        hspi->Instance->DR = (*hspi->pTxBuffPtr++);
 8005630:	1c4a      	adds	r2, r1, #1
 8005632:	6322      	str	r2, [r4, #48]	; 0x30
 8005634:	780a      	ldrb	r2, [r1, #0]
 8005636:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount--;
 8005638:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 800563a:	3a01      	subs	r2, #1
 800563c:	b292      	uxth	r2, r2
 800563e:	86e2      	strh	r2, [r4, #54]	; 0x36
      if(hspi->TxXferCount == 0U)
 8005640:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8005642:	2a00      	cmp	r2, #0
 8005644:	d149      	bne.n	80056da <HAL_SPI_TransmitReceive+0x262>
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005646:	2280      	movs	r2, #128	; 0x80
 8005648:	0192      	lsls	r2, r2, #6
 800564a:	4290      	cmp	r0, r2
 800564c:	d104      	bne.n	8005658 <HAL_SPI_TransmitReceive+0x1e0>
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 800564e:	2280      	movs	r2, #128	; 0x80
 8005650:	6819      	ldr	r1, [r3, #0]
 8005652:	0152      	lsls	r2, r2, #5
 8005654:	430a      	orrs	r2, r1
 8005656:	601a      	str	r2, [r3, #0]
        if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 8005658:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800565a:	2200      	movs	r2, #0
 800565c:	2101      	movs	r1, #1
 800565e:	0020      	movs	r0, r4
 8005660:	f7ff fe66 	bl	8005330 <SPI_WaitOnFlagUntilTimeout>
 8005664:	2800      	cmp	r0, #0
 8005666:	d19d      	bne.n	80055a4 <HAL_SPI_TransmitReceive+0x12c>
        (*hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005668:	6823      	ldr	r3, [r4, #0]
 800566a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800566c:	68db      	ldr	r3, [r3, #12]
 800566e:	7013      	strb	r3, [r2, #0]
 8005670:	e781      	b.n	8005576 <HAL_SPI_TransmitReceive+0xfe>
          if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_TXE, RESET, Timeout) != HAL_OK)
 8005672:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005674:	2200      	movs	r2, #0
 8005676:	2102      	movs	r1, #2
 8005678:	0020      	movs	r0, r4
 800567a:	f7ff fe59 	bl	8005330 <SPI_WaitOnFlagUntilTimeout>
 800567e:	2800      	cmp	r0, #0
 8005680:	d000      	beq.n	8005684 <HAL_SPI_TransmitReceive+0x20c>
 8005682:	e78f      	b.n	80055a4 <HAL_SPI_TransmitReceive+0x12c>
          hspi->Instance->DR = (*hspi->pTxBuffPtr++);
 8005684:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005686:	6822      	ldr	r2, [r4, #0]
 8005688:	1c59      	adds	r1, r3, #1
 800568a:	6321      	str	r1, [r4, #48]	; 0x30
 800568c:	781b      	ldrb	r3, [r3, #0]
 800568e:	60d3      	str	r3, [r2, #12]
          hspi->TxXferCount--;
 8005690:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8005692:	3b01      	subs	r3, #1
 8005694:	b29b      	uxth	r3, r3
 8005696:	86e3      	strh	r3, [r4, #54]	; 0x36
          if((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8005698:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800569a:	2b00      	cmp	r3, #0
 800569c:	d10a      	bne.n	80056b4 <HAL_SPI_TransmitReceive+0x23c>
 800569e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80056a0:	0019      	movs	r1, r3
 80056a2:	2380      	movs	r3, #128	; 0x80
 80056a4:	019b      	lsls	r3, r3, #6
 80056a6:	4299      	cmp	r1, r3
 80056a8:	d104      	bne.n	80056b4 <HAL_SPI_TransmitReceive+0x23c>
            SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 80056aa:	2180      	movs	r1, #128	; 0x80
 80056ac:	6813      	ldr	r3, [r2, #0]
 80056ae:	0149      	lsls	r1, r1, #5
 80056b0:	430b      	orrs	r3, r1
 80056b2:	6013      	str	r3, [r2, #0]
          if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 80056b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80056b6:	2200      	movs	r2, #0
 80056b8:	2101      	movs	r1, #1
 80056ba:	0020      	movs	r0, r4
 80056bc:	f7ff fe38 	bl	8005330 <SPI_WaitOnFlagUntilTimeout>
 80056c0:	2800      	cmp	r0, #0
 80056c2:	d000      	beq.n	80056c6 <HAL_SPI_TransmitReceive+0x24e>
 80056c4:	e76e      	b.n	80055a4 <HAL_SPI_TransmitReceive+0x12c>
          (*hspi->pRxBuffPtr++) = hspi->Instance->DR;
 80056c6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80056c8:	1c5a      	adds	r2, r3, #1
 80056ca:	63a2      	str	r2, [r4, #56]	; 0x38
 80056cc:	6822      	ldr	r2, [r4, #0]
 80056ce:	68d2      	ldr	r2, [r2, #12]
 80056d0:	701a      	strb	r2, [r3, #0]
          hspi->RxXferCount--;
 80056d2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80056d4:	3b01      	subs	r3, #1
 80056d6:	b29b      	uxth	r3, r3
 80056d8:	87e3      	strh	r3, [r4, #62]	; 0x3e
        while(hspi->TxXferCount > 0U)
 80056da:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d1c8      	bne.n	8005672 <HAL_SPI_TransmitReceive+0x1fa>
        if(hspi->Init.Mode == SPI_MODE_SLAVE)
 80056e0:	6862      	ldr	r2, [r4, #4]
 80056e2:	2a00      	cmp	r2, #0
 80056e4:	d000      	beq.n	80056e8 <HAL_SPI_TransmitReceive+0x270>
 80056e6:	e74a      	b.n	800557e <HAL_SPI_TransmitReceive+0x106>
          if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 80056e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80056ea:	2101      	movs	r1, #1
 80056ec:	0020      	movs	r0, r4
 80056ee:	f7ff fe1f 	bl	8005330 <SPI_WaitOnFlagUntilTimeout>
 80056f2:	2800      	cmp	r0, #0
 80056f4:	d000      	beq.n	80056f8 <HAL_SPI_TransmitReceive+0x280>
 80056f6:	e755      	b.n	80055a4 <HAL_SPI_TransmitReceive+0x12c>
          (*hspi->pRxBuffPtr++) = hspi->Instance->DR;
 80056f8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80056fa:	1c5a      	adds	r2, r3, #1
 80056fc:	63a2      	str	r2, [r4, #56]	; 0x38
 80056fe:	6822      	ldr	r2, [r4, #0]
 8005700:	68d2      	ldr	r2, [r2, #12]
 8005702:	701a      	strb	r2, [r3, #0]
 8005704:	e737      	b.n	8005576 <HAL_SPI_TransmitReceive+0xfe>
      tmpreg = hspi->Instance->DR;
 8005706:	6823      	ldr	r3, [r4, #0]
 8005708:	9a01      	ldr	r2, [sp, #4]
 800570a:	68db      	ldr	r3, [r3, #12]
 800570c:	b29b      	uxth	r3, r3
 800570e:	8013      	strh	r3, [r2, #0]
      UNUSED(tmpreg);		/* avoid warning on tmpreg affectation with stupid compiler */
 8005710:	0013      	movs	r3, r2
 8005712:	881b      	ldrh	r3, [r3, #0]
    if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_BSY, SET, Timeout) != HAL_OK)
 8005714:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005716:	2201      	movs	r2, #1
 8005718:	2180      	movs	r1, #128	; 0x80
 800571a:	0020      	movs	r0, r4
 800571c:	f7ff fe08 	bl	8005330 <SPI_WaitOnFlagUntilTimeout>
 8005720:	2800      	cmp	r0, #0
 8005722:	d002      	beq.n	800572a <HAL_SPI_TransmitReceive+0x2b2>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005724:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8005726:	2320      	movs	r3, #32
 8005728:	e73a      	b.n	80055a0 <HAL_SPI_TransmitReceive+0x128>
    hspi->State = HAL_SPI_STATE_READY;
 800572a:	2701      	movs	r7, #1
    if((hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET))
 800572c:	2380      	movs	r3, #128	; 0x80
 800572e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    hspi->State = HAL_SPI_STATE_READY;
 8005730:	702f      	strb	r7, [r5, #0]
    if((hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET))
 8005732:	019b      	lsls	r3, r3, #6
 8005734:	429a      	cmp	r2, r3
 8005736:	d111      	bne.n	800575c <HAL_SPI_TransmitReceive+0x2e4>
 8005738:	6823      	ldr	r3, [r4, #0]
 800573a:	6899      	ldr	r1, [r3, #8]
 800573c:	06c9      	lsls	r1, r1, #27
 800573e:	d50d      	bpl.n	800575c <HAL_SPI_TransmitReceive+0x2e4>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8005740:	2102      	movs	r1, #2
 8005742:	6d65      	ldr	r5, [r4, #84]	; 0x54
 8005744:	4329      	orrs	r1, r5
 8005746:	6561      	str	r1, [r4, #84]	; 0x54
      SPI_RESET_CRC(hspi);
 8005748:	6819      	ldr	r1, [r3, #0]
 800574a:	4c06      	ldr	r4, [pc, #24]	; (8005764 <HAL_SPI_TransmitReceive+0x2ec>)
 800574c:	4021      	ands	r1, r4
 800574e:	6019      	str	r1, [r3, #0]
 8005750:	6819      	ldr	r1, [r3, #0]
 8005752:	430a      	orrs	r2, r1
 8005754:	601a      	str	r2, [r3, #0]
      __HAL_UNLOCK(hspi);
 8005756:	7030      	strb	r0, [r6, #0]
      return HAL_ERROR; 
 8005758:	0038      	movs	r0, r7
 800575a:	e724      	b.n	80055a6 <HAL_SPI_TransmitReceive+0x12e>
    __HAL_UNLOCK(hspi);
 800575c:	2300      	movs	r3, #0
 800575e:	7033      	strb	r3, [r6, #0]
    return HAL_OK;
 8005760:	e721      	b.n	80055a6 <HAL_SPI_TransmitReceive+0x12e>
 8005762:	46c0      	nop			; (mov r8, r8)
 8005764:	ffffdfff 	.word	0xffffdfff

08005768 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8005768:	b570      	push	{r4, r5, r6, lr}
 800576a:	0005      	movs	r5, r0
  /* Check the UART handle allocation */
  if(huart == NULL)
  {
    return HAL_ERROR;
 800576c:	2001      	movs	r0, #1
  if(huart == NULL)
 800576e:	2d00      	cmp	r5, #0
 8005770:	d016      	beq.n	80057a0 <HAL_UART_DeInit+0x38>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 8005772:	002e      	movs	r6, r5
 8005774:	2324      	movs	r3, #36	; 0x24

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);

  huart->Instance->CR1 = 0x0U;
 8005776:	2400      	movs	r4, #0
  huart->gState = HAL_UART_STATE_BUSY;
 8005778:	3669      	adds	r6, #105	; 0x69
 800577a:	7033      	strb	r3, [r6, #0]
  __HAL_UART_DISABLE(huart);
 800577c:	682b      	ldr	r3, [r5, #0]
 800577e:	681a      	ldr	r2, [r3, #0]
 8005780:	4382      	bics	r2, r0
 8005782:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
  huart->Instance->CR3 = 0x0U;

  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8005784:	0028      	movs	r0, r5
  huart->Instance->CR1 = 0x0U;
 8005786:	601c      	str	r4, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 8005788:	605c      	str	r4, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 800578a:	609c      	str	r4, [r3, #8]
  HAL_UART_MspDeInit(huart);
 800578c:	f001 fc36 	bl	8006ffc <HAL_UART_MspDeInit>

  huart->ErrorCode = HAL_UART_ERROR_NONE;
  huart->gState    = HAL_UART_STATE_RESET;
  huart->RxState   = HAL_UART_STATE_RESET;
 8005790:	002b      	movs	r3, r5

  /* Process Unlock */
  __HAL_UNLOCK(huart);

  return HAL_OK;
 8005792:	0020      	movs	r0, r4
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005794:	66ec      	str	r4, [r5, #108]	; 0x6c
  huart->RxState   = HAL_UART_STATE_RESET;
 8005796:	336a      	adds	r3, #106	; 0x6a
  __HAL_UNLOCK(huart);
 8005798:	3568      	adds	r5, #104	; 0x68
  huart->gState    = HAL_UART_STATE_RESET;
 800579a:	7034      	strb	r4, [r6, #0]
  huart->RxState   = HAL_UART_STATE_RESET;
 800579c:	701c      	strb	r4, [r3, #0]
  __HAL_UNLOCK(huart);
 800579e:	702c      	strb	r4, [r5, #0]
}
 80057a0:	bd70      	pop	{r4, r5, r6, pc}
	...

080057a4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80057a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057a6:	0005      	movs	r5, r0
  HAL_StatusTypeDef ret               = HAL_OK;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if(UART_INSTANCE_LOWPOWER(huart))
 80057a8:	6803      	ldr	r3, [r0, #0]
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80057aa:	6882      	ldr	r2, [r0, #8]
 80057ac:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80057ae:	6819      	ldr	r1, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80057b0:	4302      	orrs	r2, r0
 80057b2:	6968      	ldr	r0, [r5, #20]
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80057b4:	4e83      	ldr	r6, [pc, #524]	; (80059c4 <UART_SetConfig+0x220>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80057b6:	4302      	orrs	r2, r0
 80057b8:	69e8      	ldr	r0, [r5, #28]
 80057ba:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80057bc:	4882      	ldr	r0, [pc, #520]	; (80059c8 <UART_SetConfig+0x224>)
 80057be:	4001      	ands	r1, r0
 80057c0:	430a      	orrs	r2, r1
 80057c2:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80057c4:	685a      	ldr	r2, [r3, #4]
 80057c6:	4981      	ldr	r1, [pc, #516]	; (80059cc <UART_SetConfig+0x228>)
 80057c8:	400a      	ands	r2, r1
 80057ca:	68e9      	ldr	r1, [r5, #12]
 80057cc:	430a      	orrs	r2, r1
 80057ce:	605a      	str	r2, [r3, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80057d0:	69a9      	ldr	r1, [r5, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80057d2:	42b3      	cmp	r3, r6
 80057d4:	d001      	beq.n	80057da <UART_SetConfig+0x36>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80057d6:	6a2a      	ldr	r2, [r5, #32]
 80057d8:	4311      	orrs	r1, r2
  }
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 80057da:	689a      	ldr	r2, [r3, #8]
 80057dc:	487c      	ldr	r0, [pc, #496]	; (80059d0 <UART_SetConfig+0x22c>)
 80057de:	4002      	ands	r2, r0
 80057e0:	430a      	orrs	r2, r1
 80057e2:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80057e4:	4a7b      	ldr	r2, [pc, #492]	; (80059d4 <UART_SetConfig+0x230>)
 80057e6:	4293      	cmp	r3, r2
 80057e8:	d117      	bne.n	800581a <UART_SetConfig+0x76>
 80057ea:	2203      	movs	r2, #3
 80057ec:	4b7a      	ldr	r3, [pc, #488]	; (80059d8 <UART_SetConfig+0x234>)
 80057ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057f0:	4013      	ands	r3, r2
 80057f2:	4a7a      	ldr	r2, [pc, #488]	; (80059dc <UART_SetConfig+0x238>)
 80057f4:	5cd4      	ldrb	r4, [r2, r3]
  uint32_t frequency = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_USART2);
 80057f6:	2002      	movs	r0, #2
 80057f8:	f7ff f934 	bl	8004a64 <HAL_RCCEx_GetPeriphCLKFreq>

  /* Check LPUART instance */
  if(UART_INSTANCE_LOWPOWER(huart))
 80057fc:	682f      	ldr	r7, [r5, #0]
  uint32_t frequency = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_USART2);
 80057fe:	0003      	movs	r3, r0
  if(UART_INSTANCE_LOWPOWER(huart))
 8005800:	42b7      	cmp	r7, r6
 8005802:	d168      	bne.n	80058d6 <UART_SetConfig+0x132>
  {
    /* Retrieve frequency clock */
    tmpreg = 0;

    switch (clocksource)
 8005804:	2c08      	cmp	r4, #8
 8005806:	d900      	bls.n	800580a <UART_SetConfig+0x66>
 8005808:	e0d9      	b.n	80059be <UART_SetConfig+0x21a>
 800580a:	0020      	movs	r0, r4
 800580c:	f7fa fc7c 	bl	8000108 <__gnu_thumb1_case_uqi>
 8005810:	d73bd733 	.word	0xd73bd733
 8005814:	d7d7d75b 	.word	0xd7d7d75b
 8005818:	5e          	.byte	0x5e
 8005819:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 800581a:	4a71      	ldr	r2, [pc, #452]	; (80059e0 <UART_SetConfig+0x23c>)
 800581c:	4293      	cmp	r3, r2
 800581e:	d107      	bne.n	8005830 <UART_SetConfig+0x8c>
 8005820:	220c      	movs	r2, #12
 8005822:	4b6d      	ldr	r3, [pc, #436]	; (80059d8 <UART_SetConfig+0x234>)
 8005824:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005826:	401a      	ands	r2, r3
 8005828:	4b6c      	ldr	r3, [pc, #432]	; (80059dc <UART_SetConfig+0x238>)
 800582a:	189b      	adds	r3, r3, r2
 800582c:	791c      	ldrb	r4, [r3, #4]
 800582e:	e7e2      	b.n	80057f6 <UART_SetConfig+0x52>
 8005830:	4a6c      	ldr	r2, [pc, #432]	; (80059e4 <UART_SetConfig+0x240>)
 8005832:	2400      	movs	r4, #0
 8005834:	4293      	cmp	r3, r2
 8005836:	d0de      	beq.n	80057f6 <UART_SetConfig+0x52>
 8005838:	4a6b      	ldr	r2, [pc, #428]	; (80059e8 <UART_SetConfig+0x244>)
 800583a:	4293      	cmp	r3, r2
 800583c:	d0db      	beq.n	80057f6 <UART_SetConfig+0x52>
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 800583e:	3410      	adds	r4, #16
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005840:	42b3      	cmp	r3, r6
 8005842:	d1d8      	bne.n	80057f6 <UART_SetConfig+0x52>
 8005844:	22c0      	movs	r2, #192	; 0xc0
 8005846:	2180      	movs	r1, #128	; 0x80
 8005848:	4b63      	ldr	r3, [pc, #396]	; (80059d8 <UART_SetConfig+0x234>)
 800584a:	0112      	lsls	r2, r2, #4
 800584c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800584e:	00c9      	lsls	r1, r1, #3
 8005850:	4013      	ands	r3, r2
 8005852:	3c0c      	subs	r4, #12
 8005854:	428b      	cmp	r3, r1
 8005856:	d0ce      	beq.n	80057f6 <UART_SetConfig+0x52>
 8005858:	d804      	bhi.n	8005864 <UART_SetConfig+0xc0>
 800585a:	2400      	movs	r4, #0
 800585c:	42a3      	cmp	r3, r4
 800585e:	d0ca      	beq.n	80057f6 <UART_SetConfig+0x52>
 8005860:	2410      	movs	r4, #16
 8005862:	e7c8      	b.n	80057f6 <UART_SetConfig+0x52>
 8005864:	2180      	movs	r1, #128	; 0x80
 8005866:	2402      	movs	r4, #2
 8005868:	0109      	lsls	r1, r1, #4
 800586a:	428b      	cmp	r3, r1
 800586c:	d0c3      	beq.n	80057f6 <UART_SetConfig+0x52>
 800586e:	3406      	adds	r4, #6
 8005870:	4293      	cmp	r3, r2
 8005872:	d0c0      	beq.n	80057f6 <UART_SetConfig+0x52>
 8005874:	e7f4      	b.n	8005860 <UART_SetConfig+0xbc>
    {
    case UART_CLOCKSOURCE_PCLK1:
      tmpreg = HAL_RCC_GetPCLK1Freq();
 8005876:	f7fe fff9 	bl	800486c <HAL_RCC_GetPCLK1Freq>
 800587a:	2400      	movs	r4, #0
      {
        tmpreg = (uint32_t) HSI_VALUE;
      }
      break;
    case UART_CLOCKSOURCE_SYSCLK:
      tmpreg = HAL_RCC_GetSysClockFreq();
 800587c:	0003      	movs	r3, r0
        ret = HAL_ERROR;
      break;
    }

    /* if proper clock source reported */
    if (tmpreg != 0)
 800587e:	42a0      	cmp	r0, r4
 8005880:	d106      	bne.n	8005890 <UART_SetConfig+0xec>
    }
  }

  return ret;

}
 8005882:	0020      	movs	r0, r4
 8005884:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005886:	4b54      	ldr	r3, [pc, #336]	; (80059d8 <UART_SetConfig+0x234>)
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	06db      	lsls	r3, r3, #27
 800588c:	d421      	bmi.n	80058d2 <UART_SetConfig+0x12e>
        tmpreg = (uint32_t) HSI_VALUE;
 800588e:	4b57      	ldr	r3, [pc, #348]	; (80059ec <UART_SetConfig+0x248>)
      if ( (tmpreg < (3 * huart->Init.BaudRate) ) ||
 8005890:	2103      	movs	r1, #3
 8005892:	686a      	ldr	r2, [r5, #4]
        ret = HAL_ERROR;
 8005894:	2401      	movs	r4, #1
      if ( (tmpreg < (3 * huart->Init.BaudRate) ) ||
 8005896:	4351      	muls	r1, r2
 8005898:	4299      	cmp	r1, r3
 800589a:	d8f2      	bhi.n	8005882 <UART_SetConfig+0xde>
           (tmpreg > (4096 * huart->Init.BaudRate) ))
 800589c:	0311      	lsls	r1, r2, #12
      if ( (tmpreg < (3 * huart->Init.BaudRate) ) ||
 800589e:	4299      	cmp	r1, r3
 80058a0:	d3ef      	bcc.n	8005882 <UART_SetConfig+0xde>
        tmpreg = (uint32_t)(UART_DIV_LPUART(tmpreg, huart->Init.BaudRate));
 80058a2:	2700      	movs	r7, #0
 80058a4:	0856      	lsrs	r6, r2, #1
 80058a6:	0e19      	lsrs	r1, r3, #24
 80058a8:	0218      	lsls	r0, r3, #8
 80058aa:	1980      	adds	r0, r0, r6
 80058ac:	4179      	adcs	r1, r7
 80058ae:	003b      	movs	r3, r7
 80058b0:	f7fa fde8 	bl	8000484 <__aeabi_uldivmod>
        if ((tmpreg >= UART_LPUART_BRR_MIN) && (tmpreg <= UART_LPUART_BRR_MAX))
 80058b4:	4b4e      	ldr	r3, [pc, #312]	; (80059f0 <UART_SetConfig+0x24c>)
 80058b6:	18c2      	adds	r2, r0, r3
 80058b8:	4b4e      	ldr	r3, [pc, #312]	; (80059f4 <UART_SetConfig+0x250>)
 80058ba:	429a      	cmp	r2, r3
 80058bc:	d8e1      	bhi.n	8005882 <UART_SetConfig+0xde>
           huart->Instance->BRR = tmpreg;
 80058be:	682b      	ldr	r3, [r5, #0]
 80058c0:	60d8      	str	r0, [r3, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 80058c2:	2400      	movs	r4, #0
      break;
 80058c4:	e7dd      	b.n	8005882 <UART_SetConfig+0xde>
      tmpreg = HAL_RCC_GetSysClockFreq();
 80058c6:	f7fe fedd 	bl	8004684 <HAL_RCC_GetSysClockFreq>
 80058ca:	e7d6      	b.n	800587a <UART_SetConfig+0xd6>
      tmpreg = (uint32_t) LSE_VALUE;
 80058cc:	2380      	movs	r3, #128	; 0x80
 80058ce:	021b      	lsls	r3, r3, #8
 80058d0:	e7de      	b.n	8005890 <UART_SetConfig+0xec>
        tmpreg = (uint32_t) (HSI_VALUE >> 2U);
 80058d2:	4b49      	ldr	r3, [pc, #292]	; (80059f8 <UART_SetConfig+0x254>)
 80058d4:	e7dc      	b.n	8005890 <UART_SetConfig+0xec>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80058d6:	2280      	movs	r2, #128	; 0x80
 80058d8:	69e9      	ldr	r1, [r5, #28]
 80058da:	0212      	lsls	r2, r2, #8
 80058dc:	4291      	cmp	r1, r2
 80058de:	d13f      	bne.n	8005960 <UART_SetConfig+0x1bc>
    switch (clocksource)
 80058e0:	2c08      	cmp	r4, #8
 80058e2:	d83a      	bhi.n	800595a <UART_SetConfig+0x1b6>
 80058e4:	0020      	movs	r0, r4
 80058e6:	f7fa fc0f 	bl	8000108 <__gnu_thumb1_case_uqi>
 80058ea:	0f05      	.short	0x0f05
 80058ec:	38303817 	.word	0x38303817
 80058f0:	3838      	.short	0x3838
 80058f2:	33          	.byte	0x33
 80058f3:	00          	.byte	0x00
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(frequency, huart->Init.BaudRate));
 80058f4:	686a      	ldr	r2, [r5, #4]
 80058f6:	005b      	lsls	r3, r3, #1
 80058f8:	0011      	movs	r1, r2
 80058fa:	0850      	lsrs	r0, r2, #1
 80058fc:	1818      	adds	r0, r3, r0
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80058fe:	f7fa fc0d 	bl	800011c <__udivsi3>
  HAL_StatusTypeDef ret               = HAL_OK;
 8005902:	2400      	movs	r4, #0
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8005904:	b280      	uxth	r0, r0
      break;
 8005906:	e016      	b.n	8005936 <UART_SetConfig+0x192>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8005908:	f7fe ffc0 	bl	800488c <HAL_RCC_GetPCLK2Freq>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800590c:	686b      	ldr	r3, [r5, #4]
 800590e:	0040      	lsls	r0, r0, #1
 8005910:	085b      	lsrs	r3, r3, #1
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8005912:	18c0      	adds	r0, r0, r3
 8005914:	6869      	ldr	r1, [r5, #4]
 8005916:	e7f2      	b.n	80058fe <UART_SetConfig+0x15a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005918:	4b2f      	ldr	r3, [pc, #188]	; (80059d8 <UART_SetConfig+0x234>)
 800591a:	6869      	ldr	r1, [r5, #4]
 800591c:	681c      	ldr	r4, [r3, #0]
 800591e:	2310      	movs	r3, #16
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> 2U), huart->Init.BaudRate));
 8005920:	0848      	lsrs	r0, r1, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005922:	401c      	ands	r4, r3
 8005924:	d002      	beq.n	800592c <UART_SetConfig+0x188>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> 2U), huart->Init.BaudRate));
 8005926:	4b35      	ldr	r3, [pc, #212]	; (80059fc <UART_SetConfig+0x258>)
 8005928:	18c0      	adds	r0, r0, r3
 800592a:	e7e8      	b.n	80058fe <UART_SetConfig+0x15a>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate)); 
 800592c:	4b34      	ldr	r3, [pc, #208]	; (8005a00 <UART_SetConfig+0x25c>)
 800592e:	18c0      	adds	r0, r0, r3
 8005930:	f7fa fbf4 	bl	800011c <__udivsi3>
 8005934:	b280      	uxth	r0, r0
    brrtemp = usartdiv & 0xFFF0U;
 8005936:	230f      	movs	r3, #15
 8005938:	0002      	movs	r2, r0
 800593a:	439a      	bics	r2, r3
 800593c:	0013      	movs	r3, r2
    brrtemp |= (uint16_t)((uint16_t)(usartdiv & (uint16_t)0x000FU) >> (uint16_t)1U);
 800593e:	0700      	lsls	r0, r0, #28
    huart->Instance->BRR = brrtemp;
 8005940:	682a      	ldr	r2, [r5, #0]
    brrtemp |= (uint16_t)((uint16_t)(usartdiv & (uint16_t)0x000FU) >> (uint16_t)1U);
 8005942:	0f40      	lsrs	r0, r0, #29
    huart->Instance->BRR = brrtemp;
 8005944:	4318      	orrs	r0, r3
 8005946:	60d0      	str	r0, [r2, #12]
 8005948:	e79b      	b.n	8005882 <UART_SetConfig+0xde>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800594a:	f7fe fe9b 	bl	8004684 <HAL_RCC_GetSysClockFreq>
 800594e:	e7dd      	b.n	800590c <UART_SetConfig+0x168>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8005950:	686b      	ldr	r3, [r5, #4]
 8005952:	0858      	lsrs	r0, r3, #1
 8005954:	2380      	movs	r3, #128	; 0x80
 8005956:	025b      	lsls	r3, r3, #9
 8005958:	e7db      	b.n	8005912 <UART_SetConfig+0x16e>
        ret = HAL_ERROR;
 800595a:	2401      	movs	r4, #1
  uint16_t usartdiv                   = 0x0000U;
 800595c:	2000      	movs	r0, #0
 800595e:	e7ea      	b.n	8005936 <UART_SetConfig+0x192>
    switch (clocksource)
 8005960:	2c08      	cmp	r4, #8
 8005962:	d82c      	bhi.n	80059be <UART_SetConfig+0x21a>
 8005964:	0020      	movs	r0, r4
 8005966:	f7fa fbcf 	bl	8000108 <__gnu_thumb1_case_uqi>
 800596a:	0f05      	.short	0x0f05
 800596c:	2a222a12 	.word	0x2a222a12
 8005970:	2a2a      	.short	0x2a2a
 8005972:	25          	.byte	0x25
 8005973:	00          	.byte	0x00
      huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8005974:	f7fe ff7a 	bl	800486c <HAL_RCC_GetPCLK1Freq>
 8005978:	6869      	ldr	r1, [r5, #4]
 800597a:	084b      	lsrs	r3, r1, #1
 800597c:	1818      	adds	r0, r3, r0
 800597e:	f7fa fbcd 	bl	800011c <__udivsi3>
 8005982:	b280      	uxth	r0, r0
 8005984:	60f8      	str	r0, [r7, #12]
 8005986:	e79c      	b.n	80058c2 <UART_SetConfig+0x11e>
      huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8005988:	f7fe ff80 	bl	800488c <HAL_RCC_GetPCLK2Freq>
 800598c:	e7f4      	b.n	8005978 <UART_SetConfig+0x1d4>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800598e:	4b12      	ldr	r3, [pc, #72]	; (80059d8 <UART_SetConfig+0x234>)
 8005990:	6869      	ldr	r1, [r5, #4]
 8005992:	681c      	ldr	r4, [r3, #0]
 8005994:	2310      	movs	r3, #16
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> 2U), huart->Init.BaudRate));
 8005996:	0848      	lsrs	r0, r1, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005998:	401c      	ands	r4, r3
 800599a:	d001      	beq.n	80059a0 <UART_SetConfig+0x1fc>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> 2U), huart->Init.BaudRate));
 800599c:	4b16      	ldr	r3, [pc, #88]	; (80059f8 <UART_SetConfig+0x254>)
 800599e:	e7ed      	b.n	800597c <UART_SetConfig+0x1d8>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80059a0:	4b12      	ldr	r3, [pc, #72]	; (80059ec <UART_SetConfig+0x248>)
 80059a2:	18c0      	adds	r0, r0, r3
 80059a4:	f7fa fbba 	bl	800011c <__udivsi3>
 80059a8:	b280      	uxth	r0, r0
 80059aa:	60f8      	str	r0, [r7, #12]
 80059ac:	e769      	b.n	8005882 <UART_SetConfig+0xde>
      huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80059ae:	f7fe fe69 	bl	8004684 <HAL_RCC_GetSysClockFreq>
 80059b2:	e7e1      	b.n	8005978 <UART_SetConfig+0x1d4>
      huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80059b4:	2380      	movs	r3, #128	; 0x80
 80059b6:	6869      	ldr	r1, [r5, #4]
 80059b8:	021b      	lsls	r3, r3, #8
 80059ba:	0848      	lsrs	r0, r1, #1
 80059bc:	e7de      	b.n	800597c <UART_SetConfig+0x1d8>
        ret = HAL_ERROR;
 80059be:	2401      	movs	r4, #1
 80059c0:	e75f      	b.n	8005882 <UART_SetConfig+0xde>
 80059c2:	46c0      	nop			; (mov r8, r8)
 80059c4:	40004800 	.word	0x40004800
 80059c8:	efff69f3 	.word	0xefff69f3
 80059cc:	ffffcfff 	.word	0xffffcfff
 80059d0:	fffff4ff 	.word	0xfffff4ff
 80059d4:	40013800 	.word	0x40013800
 80059d8:	40021000 	.word	0x40021000
 80059dc:	08007d59 	.word	0x08007d59
 80059e0:	40004400 	.word	0x40004400
 80059e4:	40004c00 	.word	0x40004c00
 80059e8:	40005000 	.word	0x40005000
 80059ec:	00f42400 	.word	0x00f42400
 80059f0:	fffffd00 	.word	0xfffffd00
 80059f4:	000ffcff 	.word	0x000ffcff
 80059f8:	003d0900 	.word	0x003d0900
 80059fc:	007a1200 	.word	0x007a1200
 8005a00:	01e84800 	.word	0x01e84800

08005a04 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005a04:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 8005a06:	b530      	push	{r4, r5, lr}
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005a08:	07da      	lsls	r2, r3, #31
 8005a0a:	d506      	bpl.n	8005a1a <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005a0c:	6801      	ldr	r1, [r0, #0]
 8005a0e:	4c28      	ldr	r4, [pc, #160]	; (8005ab0 <UART_AdvFeatureConfig+0xac>)
 8005a10:	684a      	ldr	r2, [r1, #4]
 8005a12:	4022      	ands	r2, r4
 8005a14:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8005a16:	4322      	orrs	r2, r4
 8005a18:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005a1a:	079a      	lsls	r2, r3, #30
 8005a1c:	d506      	bpl.n	8005a2c <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005a1e:	6801      	ldr	r1, [r0, #0]
 8005a20:	4c24      	ldr	r4, [pc, #144]	; (8005ab4 <UART_AdvFeatureConfig+0xb0>)
 8005a22:	684a      	ldr	r2, [r1, #4]
 8005a24:	4022      	ands	r2, r4
 8005a26:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8005a28:	4322      	orrs	r2, r4
 8005a2a:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005a2c:	075a      	lsls	r2, r3, #29
 8005a2e:	d506      	bpl.n	8005a3e <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005a30:	6801      	ldr	r1, [r0, #0]
 8005a32:	4c21      	ldr	r4, [pc, #132]	; (8005ab8 <UART_AdvFeatureConfig+0xb4>)
 8005a34:	684a      	ldr	r2, [r1, #4]
 8005a36:	4022      	ands	r2, r4
 8005a38:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8005a3a:	4322      	orrs	r2, r4
 8005a3c:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005a3e:	071a      	lsls	r2, r3, #28
 8005a40:	d506      	bpl.n	8005a50 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005a42:	6801      	ldr	r1, [r0, #0]
 8005a44:	4c1d      	ldr	r4, [pc, #116]	; (8005abc <UART_AdvFeatureConfig+0xb8>)
 8005a46:	684a      	ldr	r2, [r1, #4]
 8005a48:	4022      	ands	r2, r4
 8005a4a:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8005a4c:	4322      	orrs	r2, r4
 8005a4e:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005a50:	06da      	lsls	r2, r3, #27
 8005a52:	d506      	bpl.n	8005a62 <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005a54:	6801      	ldr	r1, [r0, #0]
 8005a56:	4c1a      	ldr	r4, [pc, #104]	; (8005ac0 <UART_AdvFeatureConfig+0xbc>)
 8005a58:	688a      	ldr	r2, [r1, #8]
 8005a5a:	4022      	ands	r2, r4
 8005a5c:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8005a5e:	4322      	orrs	r2, r4
 8005a60:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005a62:	069a      	lsls	r2, r3, #26
 8005a64:	d506      	bpl.n	8005a74 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005a66:	6801      	ldr	r1, [r0, #0]
 8005a68:	4c16      	ldr	r4, [pc, #88]	; (8005ac4 <UART_AdvFeatureConfig+0xc0>)
 8005a6a:	688a      	ldr	r2, [r1, #8]
 8005a6c:	4022      	ands	r2, r4
 8005a6e:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8005a70:	4322      	orrs	r2, r4
 8005a72:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005a74:	065a      	lsls	r2, r3, #25
 8005a76:	d510      	bpl.n	8005a9a <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005a78:	6801      	ldr	r1, [r0, #0]
 8005a7a:	4d13      	ldr	r5, [pc, #76]	; (8005ac8 <UART_AdvFeatureConfig+0xc4>)
 8005a7c:	684a      	ldr	r2, [r1, #4]
 8005a7e:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8005a80:	402a      	ands	r2, r5
 8005a82:	4322      	orrs	r2, r4
 8005a84:	604a      	str	r2, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005a86:	2280      	movs	r2, #128	; 0x80
 8005a88:	0352      	lsls	r2, r2, #13
 8005a8a:	4294      	cmp	r4, r2
 8005a8c:	d105      	bne.n	8005a9a <UART_AdvFeatureConfig+0x96>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005a8e:	684a      	ldr	r2, [r1, #4]
 8005a90:	4c0e      	ldr	r4, [pc, #56]	; (8005acc <UART_AdvFeatureConfig+0xc8>)
 8005a92:	4022      	ands	r2, r4
 8005a94:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8005a96:	4322      	orrs	r2, r4
 8005a98:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005a9a:	061b      	lsls	r3, r3, #24
 8005a9c:	d506      	bpl.n	8005aac <UART_AdvFeatureConfig+0xa8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005a9e:	6802      	ldr	r2, [r0, #0]
 8005aa0:	490b      	ldr	r1, [pc, #44]	; (8005ad0 <UART_AdvFeatureConfig+0xcc>)
 8005aa2:	6853      	ldr	r3, [r2, #4]
 8005aa4:	400b      	ands	r3, r1
 8005aa6:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8005aa8:	430b      	orrs	r3, r1
 8005aaa:	6053      	str	r3, [r2, #4]
  }
}
 8005aac:	bd30      	pop	{r4, r5, pc}
 8005aae:	46c0      	nop			; (mov r8, r8)
 8005ab0:	fffdffff 	.word	0xfffdffff
 8005ab4:	fffeffff 	.word	0xfffeffff
 8005ab8:	fffbffff 	.word	0xfffbffff
 8005abc:	ffff7fff 	.word	0xffff7fff
 8005ac0:	ffffefff 	.word	0xffffefff
 8005ac4:	ffffdfff 	.word	0xffffdfff
 8005ac8:	ffefffff 	.word	0xffefffff
 8005acc:	ff9fffff 	.word	0xff9fffff
 8005ad0:	fff7ffff 	.word	0xfff7ffff

08005ad4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005ad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ad6:	0004      	movs	r4, r0
 8005ad8:	000e      	movs	r6, r1
 8005ada:	0015      	movs	r5, r2
 8005adc:	001f      	movs	r7, r3
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ade:	6822      	ldr	r2, [r4, #0]
 8005ae0:	69d3      	ldr	r3, [r2, #28]
 8005ae2:	4033      	ands	r3, r6
 8005ae4:	1b9b      	subs	r3, r3, r6
 8005ae6:	4259      	negs	r1, r3
 8005ae8:	414b      	adcs	r3, r1
 8005aea:	42ab      	cmp	r3, r5
 8005aec:	d001      	beq.n	8005af2 <UART_WaitOnFlagUntilTimeout+0x1e>
        __HAL_UNLOCK(huart);
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8005aee:	2000      	movs	r0, #0
 8005af0:	e018      	b.n	8005b24 <UART_WaitOnFlagUntilTimeout+0x50>
    if(Timeout != HAL_MAX_DELAY)
 8005af2:	9b06      	ldr	r3, [sp, #24]
 8005af4:	3301      	adds	r3, #1
 8005af6:	d0f3      	beq.n	8005ae0 <UART_WaitOnFlagUntilTimeout+0xc>
      if((Timeout == 0) || ((HAL_GetTick()-Tickstart) > Timeout))
 8005af8:	9b06      	ldr	r3, [sp, #24]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d113      	bne.n	8005b26 <UART_WaitOnFlagUntilTimeout+0x52>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005afe:	6823      	ldr	r3, [r4, #0]
 8005b00:	490c      	ldr	r1, [pc, #48]	; (8005b34 <UART_WaitOnFlagUntilTimeout+0x60>)
 8005b02:	681a      	ldr	r2, [r3, #0]
        __HAL_UNLOCK(huart);
 8005b04:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005b06:	400a      	ands	r2, r1
 8005b08:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b0a:	689a      	ldr	r2, [r3, #8]
 8005b0c:	31a3      	adds	r1, #163	; 0xa3
 8005b0e:	31ff      	adds	r1, #255	; 0xff
 8005b10:	438a      	bics	r2, r1
 8005b12:	609a      	str	r2, [r3, #8]
        huart->gState  = HAL_UART_STATE_READY;
 8005b14:	0022      	movs	r2, r4
 8005b16:	2320      	movs	r3, #32
 8005b18:	3269      	adds	r2, #105	; 0x69
 8005b1a:	7013      	strb	r3, [r2, #0]
        huart->RxState = HAL_UART_STATE_READY;
 8005b1c:	7053      	strb	r3, [r2, #1]
        __HAL_UNLOCK(huart);
 8005b1e:	2300      	movs	r3, #0
 8005b20:	3468      	adds	r4, #104	; 0x68
 8005b22:	7023      	strb	r3, [r4, #0]
}
 8005b24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0) || ((HAL_GetTick()-Tickstart) > Timeout))
 8005b26:	f7fe f887 	bl	8003c38 <HAL_GetTick>
 8005b2a:	9b06      	ldr	r3, [sp, #24]
 8005b2c:	1bc0      	subs	r0, r0, r7
 8005b2e:	4283      	cmp	r3, r0
 8005b30:	d2d5      	bcs.n	8005ade <UART_WaitOnFlagUntilTimeout+0xa>
 8005b32:	e7e4      	b.n	8005afe <UART_WaitOnFlagUntilTimeout+0x2a>
 8005b34:	fffffe5f 	.word	0xfffffe5f

08005b38 <HAL_UART_Transmit>:
{
 8005b38:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(huart->gState == HAL_UART_STATE_READY)
 8005b3a:	0007      	movs	r7, r0
{
 8005b3c:	b085      	sub	sp, #20
 8005b3e:	9303      	str	r3, [sp, #12]
  if(huart->gState == HAL_UART_STATE_READY)
 8005b40:	3769      	adds	r7, #105	; 0x69
 8005b42:	783b      	ldrb	r3, [r7, #0]
{
 8005b44:	0004      	movs	r4, r0
 8005b46:	000d      	movs	r5, r1
 8005b48:	0016      	movs	r6, r2
    return HAL_BUSY;
 8005b4a:	2002      	movs	r0, #2
  if(huart->gState == HAL_UART_STATE_READY)
 8005b4c:	2b20      	cmp	r3, #32
 8005b4e:	d146      	bne.n	8005bde <HAL_UART_Transmit+0xa6>
      return  HAL_ERROR;
 8005b50:	3801      	subs	r0, #1
    if((pData == NULL ) || (Size == 0U))
 8005b52:	2900      	cmp	r1, #0
 8005b54:	d043      	beq.n	8005bde <HAL_UART_Transmit+0xa6>
 8005b56:	2a00      	cmp	r2, #0
 8005b58:	d041      	beq.n	8005bde <HAL_UART_Transmit+0xa6>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b5a:	2380      	movs	r3, #128	; 0x80
 8005b5c:	68a2      	ldr	r2, [r4, #8]
 8005b5e:	015b      	lsls	r3, r3, #5
 8005b60:	429a      	cmp	r2, r3
 8005b62:	d104      	bne.n	8005b6e <HAL_UART_Transmit+0x36>
 8005b64:	6923      	ldr	r3, [r4, #16]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d101      	bne.n	8005b6e <HAL_UART_Transmit+0x36>
      if((((uint32_t)pData)&1) != 0)
 8005b6a:	4201      	tst	r1, r0
 8005b6c:	d137      	bne.n	8005bde <HAL_UART_Transmit+0xa6>
    __HAL_LOCK(huart);
 8005b6e:	0023      	movs	r3, r4
 8005b70:	3368      	adds	r3, #104	; 0x68
 8005b72:	781a      	ldrb	r2, [r3, #0]
    return HAL_BUSY;
 8005b74:	2002      	movs	r0, #2
    __HAL_LOCK(huart);
 8005b76:	2a01      	cmp	r2, #1
 8005b78:	d031      	beq.n	8005bde <HAL_UART_Transmit+0xa6>
 8005b7a:	2201      	movs	r2, #1
 8005b7c:	701a      	strb	r2, [r3, #0]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b7e:	2300      	movs	r3, #0
 8005b80:	66e3      	str	r3, [r4, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005b82:	3321      	adds	r3, #33	; 0x21
 8005b84:	703b      	strb	r3, [r7, #0]
    tickstart = HAL_GetTick();
 8005b86:	f7fe f857 	bl	8003c38 <HAL_GetTick>
    huart->TxXferSize = Size;
 8005b8a:	0023      	movs	r3, r4
 8005b8c:	3350      	adds	r3, #80	; 0x50
 8005b8e:	801e      	strh	r6, [r3, #0]
    huart->TxXferCount = Size;
 8005b90:	805e      	strh	r6, [r3, #2]
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b92:	2680      	movs	r6, #128	; 0x80
    tickstart = HAL_GetTick();
 8005b94:	9002      	str	r0, [sp, #8]
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b96:	0176      	lsls	r6, r6, #5
    while(huart->TxXferCount > 0U)
 8005b98:	0021      	movs	r1, r4
 8005b9a:	3152      	adds	r1, #82	; 0x52
 8005b9c:	880a      	ldrh	r2, [r1, #0]
 8005b9e:	b292      	uxth	r2, r2
 8005ba0:	2a00      	cmp	r2, #0
 8005ba2:	d10d      	bne.n	8005bc0 <HAL_UART_Transmit+0x88>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005ba4:	9b03      	ldr	r3, [sp, #12]
 8005ba6:	2140      	movs	r1, #64	; 0x40
 8005ba8:	9300      	str	r3, [sp, #0]
 8005baa:	0020      	movs	r0, r4
 8005bac:	9b02      	ldr	r3, [sp, #8]
 8005bae:	f7ff ff91 	bl	8005ad4 <UART_WaitOnFlagUntilTimeout>
 8005bb2:	2800      	cmp	r0, #0
 8005bb4:	d112      	bne.n	8005bdc <HAL_UART_Transmit+0xa4>
    huart->gState = HAL_UART_STATE_READY;
 8005bb6:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 8005bb8:	3468      	adds	r4, #104	; 0x68
    huart->gState = HAL_UART_STATE_READY;
 8005bba:	703b      	strb	r3, [r7, #0]
    __HAL_UNLOCK(huart);
 8005bbc:	7020      	strb	r0, [r4, #0]
    return HAL_OK;
 8005bbe:	e00e      	b.n	8005bde <HAL_UART_Transmit+0xa6>
      huart->TxXferCount--;
 8005bc0:	880b      	ldrh	r3, [r1, #0]
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005bc2:	2200      	movs	r2, #0
      huart->TxXferCount--;
 8005bc4:	3b01      	subs	r3, #1
 8005bc6:	b29b      	uxth	r3, r3
 8005bc8:	800b      	strh	r3, [r1, #0]
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005bca:	9b03      	ldr	r3, [sp, #12]
 8005bcc:	2180      	movs	r1, #128	; 0x80
 8005bce:	9300      	str	r3, [sp, #0]
 8005bd0:	0020      	movs	r0, r4
 8005bd2:	9b02      	ldr	r3, [sp, #8]
 8005bd4:	f7ff ff7e 	bl	8005ad4 <UART_WaitOnFlagUntilTimeout>
 8005bd8:	2800      	cmp	r0, #0
 8005bda:	d002      	beq.n	8005be2 <HAL_UART_Transmit+0xaa>
        return HAL_TIMEOUT;
 8005bdc:	2003      	movs	r0, #3
}
 8005bde:	b005      	add	sp, #20
 8005be0:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005be2:	68a3      	ldr	r3, [r4, #8]
 8005be4:	6822      	ldr	r2, [r4, #0]
 8005be6:	42b3      	cmp	r3, r6
 8005be8:	d108      	bne.n	8005bfc <HAL_UART_Transmit+0xc4>
 8005bea:	6923      	ldr	r3, [r4, #16]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d105      	bne.n	8005bfc <HAL_UART_Transmit+0xc4>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8005bf0:	882b      	ldrh	r3, [r5, #0]
        pData += 2U;
 8005bf2:	3502      	adds	r5, #2
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8005bf4:	05db      	lsls	r3, r3, #23
 8005bf6:	0ddb      	lsrs	r3, r3, #23
 8005bf8:	6293      	str	r3, [r2, #40]	; 0x28
        pData += 2U;
 8005bfa:	e7cd      	b.n	8005b98 <HAL_UART_Transmit+0x60>
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 8005bfc:	782b      	ldrb	r3, [r5, #0]
 8005bfe:	3501      	adds	r5, #1
 8005c00:	6293      	str	r3, [r2, #40]	; 0x28
 8005c02:	e7c9      	b.n	8005b98 <HAL_UART_Transmit+0x60>

08005c04 <UART_CheckIdleState>:
{
 8005c04:	b573      	push	{r0, r1, r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c06:	2600      	movs	r6, #0
{
 8005c08:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c0a:	66c6      	str	r6, [r0, #108]	; 0x6c
  tickstart = HAL_GetTick();
 8005c0c:	f7fe f814 	bl	8003c38 <HAL_GetTick>
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005c10:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8005c12:	0005      	movs	r5, r0
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	071b      	lsls	r3, r3, #28
 8005c18:	d417      	bmi.n	8005c4a <UART_CheckIdleState+0x46>
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005c1a:	6823      	ldr	r3, [r4, #0]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	075b      	lsls	r3, r3, #29
 8005c20:	d50a      	bpl.n	8005c38 <UART_CheckIdleState+0x34>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005c22:	2180      	movs	r1, #128	; 0x80
 8005c24:	4b0f      	ldr	r3, [pc, #60]	; (8005c64 <UART_CheckIdleState+0x60>)
 8005c26:	2200      	movs	r2, #0
 8005c28:	9300      	str	r3, [sp, #0]
 8005c2a:	03c9      	lsls	r1, r1, #15
 8005c2c:	002b      	movs	r3, r5
 8005c2e:	0020      	movs	r0, r4
 8005c30:	f7ff ff50 	bl	8005ad4 <UART_WaitOnFlagUntilTimeout>
 8005c34:	2800      	cmp	r0, #0
 8005c36:	d113      	bne.n	8005c60 <UART_CheckIdleState+0x5c>
  huart->gState  = HAL_UART_STATE_READY;
 8005c38:	0022      	movs	r2, r4
 8005c3a:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8005c3c:	2000      	movs	r0, #0
  huart->gState  = HAL_UART_STATE_READY;
 8005c3e:	3269      	adds	r2, #105	; 0x69
  __HAL_UNLOCK(huart);
 8005c40:	3468      	adds	r4, #104	; 0x68
  huart->gState  = HAL_UART_STATE_READY;
 8005c42:	7013      	strb	r3, [r2, #0]
  huart->RxState = HAL_UART_STATE_READY;
 8005c44:	7053      	strb	r3, [r2, #1]
  __HAL_UNLOCK(huart);
 8005c46:	7020      	strb	r0, [r4, #0]
  return HAL_OK;
 8005c48:	e00b      	b.n	8005c62 <UART_CheckIdleState+0x5e>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005c4a:	2180      	movs	r1, #128	; 0x80
 8005c4c:	4b05      	ldr	r3, [pc, #20]	; (8005c64 <UART_CheckIdleState+0x60>)
 8005c4e:	0032      	movs	r2, r6
 8005c50:	9300      	str	r3, [sp, #0]
 8005c52:	0389      	lsls	r1, r1, #14
 8005c54:	0003      	movs	r3, r0
 8005c56:	0020      	movs	r0, r4
 8005c58:	f7ff ff3c 	bl	8005ad4 <UART_WaitOnFlagUntilTimeout>
 8005c5c:	2800      	cmp	r0, #0
 8005c5e:	d0dc      	beq.n	8005c1a <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 8005c60:	2003      	movs	r0, #3
}
 8005c62:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 8005c64:	01ffffff 	.word	0x01ffffff

08005c68 <HAL_UART_Init>:
{
 8005c68:	b570      	push	{r4, r5, r6, lr}
 8005c6a:	1e04      	subs	r4, r0, #0
  if(huart == NULL)
 8005c6c:	d101      	bne.n	8005c72 <HAL_UART_Init+0xa>
    return HAL_ERROR;
 8005c6e:	2001      	movs	r0, #1
}
 8005c70:	bd70      	pop	{r4, r5, r6, pc}
  if(huart->gState == HAL_UART_STATE_RESET)
 8005c72:	0005      	movs	r5, r0
 8005c74:	3569      	adds	r5, #105	; 0x69
 8005c76:	782b      	ldrb	r3, [r5, #0]
 8005c78:	b2db      	uxtb	r3, r3
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d104      	bne.n	8005c88 <HAL_UART_Init+0x20>
    huart->Lock = HAL_UNLOCKED;
 8005c7e:	0002      	movs	r2, r0
 8005c80:	3268      	adds	r2, #104	; 0x68
 8005c82:	7013      	strb	r3, [r2, #0]
    HAL_UART_MspInit(huart);
 8005c84:	f001 f982 	bl	8006f8c <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8005c88:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8005c8a:	2101      	movs	r1, #1
 8005c8c:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8005c8e:	702b      	strb	r3, [r5, #0]
  __HAL_UART_DISABLE(huart);
 8005c90:	6813      	ldr	r3, [r2, #0]
 8005c92:	438b      	bics	r3, r1
 8005c94:	6013      	str	r3, [r2, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005c96:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d002      	beq.n	8005ca2 <HAL_UART_Init+0x3a>
    UART_AdvFeatureConfig(huart);
 8005c9c:	0020      	movs	r0, r4
 8005c9e:	f7ff feb1 	bl	8005a04 <UART_AdvFeatureConfig>
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005ca2:	0020      	movs	r0, r4
 8005ca4:	f7ff fd7e 	bl	80057a4 <UART_SetConfig>
 8005ca8:	2801      	cmp	r0, #1
 8005caa:	d0e0      	beq.n	8005c6e <HAL_UART_Init+0x6>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005cac:	6823      	ldr	r3, [r4, #0]
 8005cae:	4908      	ldr	r1, [pc, #32]	; (8005cd0 <HAL_UART_Init+0x68>)
 8005cb0:	685a      	ldr	r2, [r3, #4]
  return (UART_CheckIdleState(huart));
 8005cb2:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005cb4:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005cb6:	212a      	movs	r1, #42	; 0x2a
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005cb8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005cba:	689a      	ldr	r2, [r3, #8]
 8005cbc:	438a      	bics	r2, r1
 8005cbe:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8005cc0:	2201      	movs	r2, #1
 8005cc2:	6819      	ldr	r1, [r3, #0]
 8005cc4:	430a      	orrs	r2, r1
 8005cc6:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8005cc8:	f7ff ff9c 	bl	8005c04 <UART_CheckIdleState>
 8005ccc:	e7d0      	b.n	8005c70 <HAL_UART_Init+0x8>
 8005cce:	46c0      	nop			; (mov r8, r8)
 8005cd0:	ffffb7ff 	.word	0xffffb7ff

08005cd4 <DelayMs>:
/* Includes ------------------------------------------------------------------*/
#include "hw.h"
#include "timeServer.h"

void DelayMs( uint32_t ms )
{
 8005cd4:	b510      	push	{r4, lr}
  HW_RTC_DelayMs( ms );
 8005cd6:	f000 fb75 	bl	80063c4 <HW_RTC_DelayMs>

}
 8005cda:	bd10      	pop	{r4, pc}

08005cdc <LowPower_Disable>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005cdc:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8005ce0:	b672      	cpsid	i
{
  BACKUP_PRIMASK();
  
  DISABLE_IRQ( );
  
  LowPower_State |= state;
 8005ce2:	4a03      	ldr	r2, [pc, #12]	; (8005cf0 <LowPower_Disable+0x14>)
 8005ce4:	6811      	ldr	r1, [r2, #0]
 8005ce6:	4308      	orrs	r0, r1
 8005ce8:	6010      	str	r0, [r2, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005cea:	f383 8810 	msr	PRIMASK, r3

  RESTORE_PRIMASK( );
}
 8005cee:	4770      	bx	lr
 8005cf0:	2000021c 	.word	0x2000021c

08005cf4 <LowPower_Enable>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005cf4:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8005cf8:	b672      	cpsid	i
{
  BACKUP_PRIMASK();
  
  DISABLE_IRQ( );
  
  LowPower_State &= ~state;
 8005cfa:	4903      	ldr	r1, [pc, #12]	; (8005d08 <LowPower_Enable+0x14>)
 8005cfc:	680a      	ldr	r2, [r1, #0]
 8005cfe:	4382      	bics	r2, r0
 8005d00:	600a      	str	r2, [r1, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d02:	f383 8810 	msr	PRIMASK, r3
  
  RESTORE_PRIMASK( );
}
 8005d06:	4770      	bx	lr
 8005d08:	2000021c 	.word	0x2000021c

08005d0c <LowPower_GetState>:
 * \param [IN] state
 * \retval flag state 
 */
uint32_t LowPower_GetState( void )
{
  return LowPower_State;
 8005d0c:	4b01      	ldr	r3, [pc, #4]	; (8005d14 <LowPower_GetState+0x8>)
 8005d0e:	6818      	ldr	r0, [r3, #0]
}
 8005d10:	4770      	bx	lr
 8005d12:	46c0      	nop			; (mov r8, r8)
 8005d14:	2000021c 	.word	0x2000021c

08005d18 <LowPower_Handler>:
{
  DBG_GPIO_RST(GPIOB, GPIO_PIN_15);
  
  DBG_GPIO_RST(GPIOB, GPIO_PIN_14);
  
  if ( LowPower_State == 0 )
 8005d18:	4b07      	ldr	r3, [pc, #28]	; (8005d38 <LowPower_Handler+0x20>)
{
 8005d1a:	b510      	push	{r4, lr}
  if ( LowPower_State == 0 )
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d106      	bne.n	8005d30 <LowPower_Handler+0x18>
  {    
    
    DBG_PRINTF_CRITICAL("dz\n\r");
    
    HW_EnterStopMode( );
 8005d22:	f000 ffd3 	bl	8006ccc <HW_EnterStopMode>
    
    /* mcu dependent. to be implemented by user*/
    HW_ExitStopMode();
 8005d26:	f000 ffe5 	bl	8006cf4 <HW_ExitStopMode>
    
    DBG_GPIO_SET(GPIOB, GPIO_PIN_15);
    
    HW_RTC_setMcuWakeUpTime( );
 8005d2a:	f000 fa09 	bl	8006140 <HW_RTC_setMcuWakeUpTime>
    HW_EnterSleepMode( );

    DBG_GPIO_SET(GPIOB, GPIO_PIN_14);
  }
  
}
 8005d2e:	bd10      	pop	{r4, pc}
    HW_EnterSleepMode( );
 8005d30:	f001 f808 	bl	8006d44 <HW_EnterSleepMode>
}
 8005d34:	e7fb      	b.n	8005d2e <LowPower_Handler+0x16>
 8005d36:	46c0      	nop			; (mov r8, r8)
 8005d38:	2000021c 	.word	0x2000021c

08005d3c <TimerSetTimeout>:
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return HW_RTC_Tick2ms( nowInTicks- pastInTicks );
}

static void TimerSetTimeout( TimerEvent_t *obj )
{
 8005d3c:	b570      	push	{r4, r5, r6, lr}
 8005d3e:	0004      	movs	r4, r0
  int32_t minTicks= HW_RTC_GetMinimumTimeout( );
 8005d40:	f000 fa38 	bl	80061b4 <HW_RTC_GetMinimumTimeout>
  obj->IsRunning = true; 
 8005d44:	2301      	movs	r3, #1
 8005d46:	7223      	strb	r3, [r4, #8]
  int32_t minTicks= HW_RTC_GetMinimumTimeout( );
 8005d48:	0005      	movs	r5, r0

  //in case deadline too soon
  if(obj->Timestamp  < (HW_RTC_GetTimerElapsedTime(  ) + minTicks) )
 8005d4a:	6826      	ldr	r6, [r4, #0]
 8005d4c:	f000 fa46 	bl	80061dc <HW_RTC_GetTimerElapsedTime>
 8005d50:	1828      	adds	r0, r5, r0
 8005d52:	4286      	cmp	r6, r0
 8005d54:	d203      	bcs.n	8005d5e <TimerSetTimeout+0x22>
  {
    obj->Timestamp = HW_RTC_GetTimerElapsedTime(  ) + minTicks;
 8005d56:	f000 fa41 	bl	80061dc <HW_RTC_GetTimerElapsedTime>
 8005d5a:	182d      	adds	r5, r5, r0
 8005d5c:	6025      	str	r5, [r4, #0]
  }
  HW_RTC_SetAlarm( obj->Timestamp );
 8005d5e:	6820      	ldr	r0, [r4, #0]
 8005d60:	f000 fa62 	bl	8006228 <HW_RTC_SetAlarm>
}
 8005d64:	bd70      	pop	{r4, r5, r6, pc}
	...

08005d68 <TimerInsertNewHeadTimer>:
  TimerEvent_t* cur = TimerListHead;
 8005d68:	4a05      	ldr	r2, [pc, #20]	; (8005d80 <TimerInsertNewHeadTimer+0x18>)
{
 8005d6a:	b510      	push	{r4, lr}
  TimerEvent_t* cur = TimerListHead;
 8005d6c:	6813      	ldr	r3, [r2, #0]
  if( cur != NULL )
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d001      	beq.n	8005d76 <TimerInsertNewHeadTimer+0xe>
    cur->IsRunning = false;
 8005d72:	2100      	movs	r1, #0
 8005d74:	7219      	strb	r1, [r3, #8]
  obj->Next = cur;
 8005d76:	6103      	str	r3, [r0, #16]
  TimerListHead = obj;
 8005d78:	6010      	str	r0, [r2, #0]
  TimerSetTimeout( TimerListHead );
 8005d7a:	f7ff ffdf 	bl	8005d3c <TimerSetTimeout>
}
 8005d7e:	bd10      	pop	{r4, pc}
 8005d80:	20000220 	.word	0x20000220

08005d84 <TimerInit>:
  obj->Timestamp = 0;
 8005d84:	2300      	movs	r3, #0
  obj->Callback = callback;
 8005d86:	60c1      	str	r1, [r0, #12]
  obj->Timestamp = 0;
 8005d88:	6003      	str	r3, [r0, #0]
  obj->ReloadValue = 0;
 8005d8a:	6043      	str	r3, [r0, #4]
  obj->IsRunning = false;
 8005d8c:	7203      	strb	r3, [r0, #8]
  obj->Next = NULL;
 8005d8e:	6103      	str	r3, [r0, #16]
}
 8005d90:	4770      	bx	lr
	...

08005d94 <TimerStart>:
{
 8005d94:	b570      	push	{r4, r5, r6, lr}
 8005d96:	0004      	movs	r4, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005d98:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8005d9c:	b672      	cpsid	i
  if( ( obj == NULL ) || ( TimerExists( obj ) == true ) )
 8005d9e:	2800      	cmp	r0, #0
 8005da0:	d00e      	beq.n	8005dc0 <TimerStart+0x2c>
  TimerEvent_t* cur = TimerListHead;
 8005da2:	4e17      	ldr	r6, [pc, #92]	; (8005e00 <TimerStart+0x6c>)
 8005da4:	6832      	ldr	r2, [r6, #0]
 8005da6:	0013      	movs	r3, r2
  while( cur != NULL )
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d10c      	bne.n	8005dc6 <TimerStart+0x32>
  obj->Timestamp = obj->ReloadValue;
 8005dac:	6861      	ldr	r1, [r4, #4]
  obj->IsRunning = false;
 8005dae:	7223      	strb	r3, [r4, #8]
  obj->Timestamp = obj->ReloadValue;
 8005db0:	6021      	str	r1, [r4, #0]
  if( TimerListHead == NULL )
 8005db2:	2a00      	cmp	r2, #0
 8005db4:	d10b      	bne.n	8005dce <TimerStart+0x3a>
    HW_RTC_SetTimerContext( );
 8005db6:	f000 fb19 	bl	80063ec <HW_RTC_SetTimerContext>
      TimerInsertNewHeadTimer( obj);
 8005dba:	0020      	movs	r0, r4
 8005dbc:	f7ff ffd4 	bl	8005d68 <TimerInsertNewHeadTimer>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005dc0:	f385 8810 	msr	PRIMASK, r5
}
 8005dc4:	bd70      	pop	{r4, r5, r6, pc}
    if( cur == obj )
 8005dc6:	429c      	cmp	r4, r3
 8005dc8:	d0fa      	beq.n	8005dc0 <TimerStart+0x2c>
    cur = cur->Next;
 8005dca:	691b      	ldr	r3, [r3, #16]
 8005dcc:	e7ec      	b.n	8005da8 <TimerStart+0x14>
    elapsedTime = HW_RTC_GetTimerElapsedTime( );
 8005dce:	f000 fa05 	bl	80061dc <HW_RTC_GetTimerElapsedTime>
    obj->Timestamp += elapsedTime;
 8005dd2:	6823      	ldr	r3, [r4, #0]
 8005dd4:	18c0      	adds	r0, r0, r3
    if( obj->Timestamp < TimerListHead->Timestamp )
 8005dd6:	6833      	ldr	r3, [r6, #0]
    obj->Timestamp += elapsedTime;
 8005dd8:	6020      	str	r0, [r4, #0]
    if( obj->Timestamp < TimerListHead->Timestamp )
 8005dda:	681a      	ldr	r2, [r3, #0]
 8005ddc:	4290      	cmp	r0, r2
 8005dde:	d3ec      	bcc.n	8005dba <TimerStart+0x26>
  TimerEvent_t* next = TimerListHead->Next;
 8005de0:	691a      	ldr	r2, [r3, #16]
  while (cur->Next != NULL )
 8005de2:	6919      	ldr	r1, [r3, #16]
 8005de4:	2900      	cmp	r1, #0
 8005de6:	d102      	bne.n	8005dee <TimerStart+0x5a>
  cur->Next = obj;
 8005de8:	611c      	str	r4, [r3, #16]
  obj->Next = NULL;
 8005dea:	6121      	str	r1, [r4, #16]
 8005dec:	e7e8      	b.n	8005dc0 <TimerStart+0x2c>
    if( obj->Timestamp  > next->Timestamp )
 8005dee:	6811      	ldr	r1, [r2, #0]
 8005df0:	4288      	cmp	r0, r1
 8005df2:	d902      	bls.n	8005dfa <TimerStart+0x66>
        next = next->Next;
 8005df4:	0013      	movs	r3, r2
 8005df6:	6912      	ldr	r2, [r2, #16]
 8005df8:	e7f3      	b.n	8005de2 <TimerStart+0x4e>
        cur->Next = obj;
 8005dfa:	611c      	str	r4, [r3, #16]
        obj->Next = next;
 8005dfc:	6122      	str	r2, [r4, #16]
 8005dfe:	e7df      	b.n	8005dc0 <TimerStart+0x2c>
 8005e00:	20000220 	.word	0x20000220

08005e04 <TimerIrqHandler>:
{
 8005e04:	b570      	push	{r4, r5, r6, lr}
  uint32_t old =  HW_RTC_GetTimerContext( );
 8005e06:	f000 fb3d 	bl	8006484 <HW_RTC_GetTimerContext>
 8005e0a:	0004      	movs	r4, r0
  uint32_t now =  HW_RTC_SetTimerContext( );
 8005e0c:	f000 faee 	bl	80063ec <HW_RTC_SetTimerContext>
  uint32_t DeltaContext = now - old; //intentionnal wrap around
 8005e10:	1b00      	subs	r0, r0, r4
  if ( TimerListHead != NULL )
 8005e12:	4c18      	ldr	r4, [pc, #96]	; (8005e74 <TimerIrqHandler+0x70>)
 8005e14:	6822      	ldr	r2, [r4, #0]
 8005e16:	2a00      	cmp	r2, #0
 8005e18:	d013      	beq.n	8005e42 <TimerIrqHandler+0x3e>
 8005e1a:	0013      	movs	r3, r2
        next->Timestamp = 0 ;
 8005e1c:	2500      	movs	r5, #0
    for (cur=TimerListHead; cur->Next != NULL; cur= cur->Next)
 8005e1e:	691b      	ldr	r3, [r3, #16]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d105      	bne.n	8005e30 <TimerIrqHandler+0x2c>
    TimerListHead = TimerListHead->Next;
 8005e24:	6913      	ldr	r3, [r2, #16]
 8005e26:	6023      	str	r3, [r4, #0]
    exec_cb( cur->Callback );
 8005e28:	68d3      	ldr	r3, [r2, #12]
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d108      	bne.n	8005e40 <TimerIrqHandler+0x3c>
 8005e2e:	e7fe      	b.n	8005e2e <TimerIrqHandler+0x2a>
      if (next->Timestamp > DeltaContext)
 8005e30:	6819      	ldr	r1, [r3, #0]
 8005e32:	4288      	cmp	r0, r1
 8005e34:	d202      	bcs.n	8005e3c <TimerIrqHandler+0x38>
        next->Timestamp -= DeltaContext;
 8005e36:	1a09      	subs	r1, r1, r0
 8005e38:	6019      	str	r1, [r3, #0]
 8005e3a:	e7f0      	b.n	8005e1e <TimerIrqHandler+0x1a>
        next->Timestamp = 0 ;
 8005e3c:	601d      	str	r5, [r3, #0]
 8005e3e:	e7ee      	b.n	8005e1e <TimerIrqHandler+0x1a>
   exec_cb( cur->Callback );
 8005e40:	4798      	blx	r3
  while( ( TimerListHead != NULL ) && ( TimerListHead->Timestamp < HW_RTC_GetTimerElapsedTime(  )  ))
 8005e42:	6823      	ldr	r3, [r4, #0]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d103      	bne.n	8005e50 <TimerIrqHandler+0x4c>
  if(( TimerListHead != NULL ) && (TimerListHead->IsRunning == false))
 8005e48:	6820      	ldr	r0, [r4, #0]
 8005e4a:	2800      	cmp	r0, #0
 8005e4c:	d10c      	bne.n	8005e68 <TimerIrqHandler+0x64>
}
 8005e4e:	bd70      	pop	{r4, r5, r6, pc}
  while( ( TimerListHead != NULL ) && ( TimerListHead->Timestamp < HW_RTC_GetTimerElapsedTime(  )  ))
 8005e50:	681d      	ldr	r5, [r3, #0]
 8005e52:	f000 f9c3 	bl	80061dc <HW_RTC_GetTimerElapsedTime>
 8005e56:	4285      	cmp	r5, r0
 8005e58:	d2f6      	bcs.n	8005e48 <TimerIrqHandler+0x44>
   cur = TimerListHead;
 8005e5a:	6823      	ldr	r3, [r4, #0]
   TimerListHead = TimerListHead->Next;
 8005e5c:	691a      	ldr	r2, [r3, #16]
   exec_cb( cur->Callback );
 8005e5e:	68db      	ldr	r3, [r3, #12]
   TimerListHead = TimerListHead->Next;
 8005e60:	6022      	str	r2, [r4, #0]
   exec_cb( cur->Callback );
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d1ec      	bne.n	8005e40 <TimerIrqHandler+0x3c>
 8005e66:	e7fe      	b.n	8005e66 <TimerIrqHandler+0x62>
  if(( TimerListHead != NULL ) && (TimerListHead->IsRunning == false))
 8005e68:	7a03      	ldrb	r3, [r0, #8]
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d1ef      	bne.n	8005e4e <TimerIrqHandler+0x4a>
    TimerSetTimeout( TimerListHead );
 8005e6e:	f7ff ff65 	bl	8005d3c <TimerSetTimeout>
}
 8005e72:	e7ec      	b.n	8005e4e <TimerIrqHandler+0x4a>
 8005e74:	20000220 	.word	0x20000220

08005e78 <TimerStop>:
{
 8005e78:	b570      	push	{r4, r5, r6, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005e7a:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8005e7e:	b672      	cpsid	i
  TimerEvent_t* prev = TimerListHead;
 8005e80:	4d12      	ldr	r5, [pc, #72]	; (8005ecc <TimerStop+0x54>)
 8005e82:	682b      	ldr	r3, [r5, #0]
  if( ( TimerListHead == NULL ) || ( obj == NULL ) )
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d001      	beq.n	8005e8c <TimerStop+0x14>
 8005e88:	2800      	cmp	r0, #0
 8005e8a:	d102      	bne.n	8005e92 <TimerStop+0x1a>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e8c:	f386 8810 	msr	PRIMASK, r6
}  
 8005e90:	bd70      	pop	{r4, r5, r6, pc}
  if( TimerListHead == obj ) // Stop the Head                  
 8005e92:	4283      	cmp	r3, r0
 8005e94:	d111      	bne.n	8005eba <TimerStop+0x42>
    if( TimerListHead->IsRunning == true ) // The head is already running 
 8005e96:	7a1a      	ldrb	r2, [r3, #8]
 8005e98:	691c      	ldr	r4, [r3, #16]
 8005e9a:	2a00      	cmp	r2, #0
 8005e9c:	d00a      	beq.n	8005eb4 <TimerStop+0x3c>
      if( TimerListHead->Next != NULL )
 8005e9e:	2c00      	cmp	r4, #0
 8005ea0:	d006      	beq.n	8005eb0 <TimerStop+0x38>
        TimerListHead->IsRunning = false;
 8005ea2:	2200      	movs	r2, #0
        TimerSetTimeout( TimerListHead );
 8005ea4:	0020      	movs	r0, r4
        TimerListHead->IsRunning = false;
 8005ea6:	721a      	strb	r2, [r3, #8]
        TimerListHead = TimerListHead->Next;
 8005ea8:	602c      	str	r4, [r5, #0]
        TimerSetTimeout( TimerListHead );
 8005eaa:	f7ff ff47 	bl	8005d3c <TimerSetTimeout>
 8005eae:	e7ed      	b.n	8005e8c <TimerStop+0x14>
        HW_RTC_StopAlarm( );
 8005eb0:	f000 f9a8 	bl	8006204 <HW_RTC_StopAlarm>
        TimerListHead = NULL;
 8005eb4:	602c      	str	r4, [r5, #0]
 8005eb6:	e7e9      	b.n	8005e8c <TimerStop+0x14>
 8005eb8:	0013      	movs	r3, r2
        cur = cur->Next;
 8005eba:	691a      	ldr	r2, [r3, #16]
    while( cur != NULL )
 8005ebc:	2a00      	cmp	r2, #0
 8005ebe:	d0e5      	beq.n	8005e8c <TimerStop+0x14>
      if( cur == obj )
 8005ec0:	4290      	cmp	r0, r2
 8005ec2:	d1f9      	bne.n	8005eb8 <TimerStop+0x40>
        if( cur->Next != NULL )
 8005ec4:	6902      	ldr	r2, [r0, #16]
 8005ec6:	611a      	str	r2, [r3, #16]
 8005ec8:	e7e0      	b.n	8005e8c <TimerStop+0x14>
 8005eca:	46c0      	nop			; (mov r8, r8)
 8005ecc:	20000220 	.word	0x20000220

08005ed0 <TimerSetValue>:
{
 8005ed0:	b570      	push	{r4, r5, r6, lr}
 8005ed2:	0005      	movs	r5, r0
  uint32_t ticks = HW_RTC_ms2Tick( value );
 8005ed4:	0008      	movs	r0, r1
 8005ed6:	f000 f96f 	bl	80061b8 <HW_RTC_ms2Tick>
 8005eda:	0004      	movs	r4, r0
  TimerStop( obj );
 8005edc:	0028      	movs	r0, r5
 8005ede:	f7ff ffcb 	bl	8005e78 <TimerStop>
  minValue = HW_RTC_GetMinimumTimeout( );
 8005ee2:	f000 f967 	bl	80061b4 <HW_RTC_GetMinimumTimeout>
 8005ee6:	4284      	cmp	r4, r0
 8005ee8:	d200      	bcs.n	8005eec <TimerSetValue+0x1c>
 8005eea:	0004      	movs	r4, r0
  obj->Timestamp = ticks;
 8005eec:	602c      	str	r4, [r5, #0]
  obj->ReloadValue = ticks;
 8005eee:	606c      	str	r4, [r5, #4]
}
 8005ef0:	bd70      	pop	{r4, r5, r6, pc}

08005ef2 <TimerGetCurrentTime>:
{
 8005ef2:	b510      	push	{r4, lr}
  uint32_t now = HW_RTC_GetTimerValue( );
 8005ef4:	f000 f97e 	bl	80061f4 <HW_RTC_GetTimerValue>
  return  HW_RTC_Tick2ms(now);
 8005ef8:	f000 f966 	bl	80061c8 <HW_RTC_Tick2ms>
}
 8005efc:	bd10      	pop	{r4, pc}

08005efe <TimerGetElapsedTime>:
{
 8005efe:	b570      	push	{r4, r5, r6, lr}
 8005f00:	0005      	movs	r5, r0
  uint32_t nowInTicks = HW_RTC_GetTimerValue( );
 8005f02:	f000 f977 	bl	80061f4 <HW_RTC_GetTimerValue>
 8005f06:	0004      	movs	r4, r0
  uint32_t pastInTicks = HW_RTC_ms2Tick( past );
 8005f08:	0028      	movs	r0, r5
 8005f0a:	f000 f955 	bl	80061b8 <HW_RTC_ms2Tick>
  return HW_RTC_Tick2ms( nowInTicks- pastInTicks );
 8005f0e:	1a20      	subs	r0, r4, r0
 8005f10:	f000 f95a 	bl	80061c8 <HW_RTC_Tick2ms>
}
 8005f14:	bd70      	pop	{r4, r5, r6, pc}

08005f16 <memcpy1>:
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
}

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
    while( size-- )
 8005f16:	2300      	movs	r3, #0
{
 8005f18:	b510      	push	{r4, lr}
    while( size-- )
 8005f1a:	4293      	cmp	r3, r2
 8005f1c:	d100      	bne.n	8005f20 <memcpy1+0xa>
    {
        *dst++ = *src++;
    }
}
 8005f1e:	bd10      	pop	{r4, pc}
        *dst++ = *src++;
 8005f20:	5ccc      	ldrb	r4, [r1, r3]
 8005f22:	54c4      	strb	r4, [r0, r3]
 8005f24:	3301      	adds	r3, #1
 8005f26:	e7f8      	b.n	8005f1a <memcpy1+0x4>

08005f28 <DBG_Init>:
  HAL_DBGMCU_EnableDBGStandbyMode( );

#else /* DEBUG */
  /* sw interface off*/
  GPIO_InitTypeDef GPIO_InitStructure; 
  GPIO_InitStructure.Mode   = GPIO_MODE_ANALOG;
 8005f28:	2303      	movs	r3, #3
{
 8005f2a:	b510      	push	{r4, lr}
 8005f2c:	b086      	sub	sp, #24
  GPIO_InitStructure.Mode   = GPIO_MODE_ANALOG;
 8005f2e:	9302      	str	r3, [sp, #8]
  GPIO_InitStructure.Pull   = GPIO_NOPULL;
 8005f30:	2300      	movs	r3, #0
  GPIO_InitStructure.Pin    = (GPIO_PIN_13 | GPIO_PIN_14);
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8005f32:	20a0      	movs	r0, #160	; 0xa0
  GPIO_InitStructure.Pull   = GPIO_NOPULL;
 8005f34:	9303      	str	r3, [sp, #12]
  GPIO_InitStructure.Pin    = (GPIO_PIN_13 | GPIO_PIN_14);
 8005f36:	23c0      	movs	r3, #192	; 0xc0
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8005f38:	a901      	add	r1, sp, #4
 8005f3a:	05c0      	lsls	r0, r0, #23
  GPIO_InitStructure.Pin    = (GPIO_PIN_13 | GPIO_PIN_14);
 8005f3c:	01db      	lsls	r3, r3, #7
 8005f3e:	9301      	str	r3, [sp, #4]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8005f40:	f7fd ffca 	bl	8003ed8 <HAL_GPIO_Init>
  
  __HAL_RCC_DBGMCU_CLK_ENABLE( );
 8005f44:	2380      	movs	r3, #128	; 0x80
 8005f46:	4c08      	ldr	r4, [pc, #32]	; (8005f68 <DBG_Init+0x40>)
 8005f48:	03db      	lsls	r3, r3, #15
 8005f4a:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8005f4c:	4313      	orrs	r3, r2
 8005f4e:	6363      	str	r3, [r4, #52]	; 0x34
  HAL_DBGMCU_DisableDBGSleepMode( );
 8005f50:	f7fd fe78 	bl	8003c44 <HAL_DBGMCU_DisableDBGSleepMode>
  HAL_DBGMCU_DisableDBGStopMode( );
 8005f54:	f7fd fe7e 	bl	8003c54 <HAL_DBGMCU_DisableDBGStopMode>
  HAL_DBGMCU_DisableDBGStandbyMode( );
 8005f58:	f7fd fe84 	bl	8003c64 <HAL_DBGMCU_DisableDBGStandbyMode>
  __HAL_RCC_DBGMCU_CLK_DISABLE( );
 8005f5c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005f5e:	4a03      	ldr	r2, [pc, #12]	; (8005f6c <DBG_Init+0x44>)
 8005f60:	4013      	ands	r3, r2
 8005f62:	6363      	str	r3, [r4, #52]	; 0x34
#endif
}
 8005f64:	b006      	add	sp, #24
 8005f66:	bd10      	pop	{r4, pc}
 8005f68:	40021000 	.word	0x40021000
 8005f6c:	ffbfffff 	.word	0xffbfffff

08005f70 <Error_Handler>:
  * @brief Error_Handler
  * @param None
  * @retval None
  */
void Error_Handler(void)
{
 8005f70:	e7fe      	b.n	8005f70 <Error_Handler>
	...

08005f74 <HW_GPIO_GetBitPos>:
 */
static uint8_t HW_GPIO_GetBitPos(uint16_t GPIO_Pin)
{
  uint8_t PinPos=0;
  
  if ( ( GPIO_Pin & 0xFF00 ) != 0) { PinPos |= 0x8; }
 8005f74:	0001      	movs	r1, r0
 8005f76:	23ff      	movs	r3, #255	; 0xff
 8005f78:	4399      	bics	r1, r3
 8005f7a:	000b      	movs	r3, r1
{
 8005f7c:	0002      	movs	r2, r0
  if ( ( GPIO_Pin & 0xFF00 ) != 0) { PinPos |= 0x8; }
 8005f7e:	1e58      	subs	r0, r3, #1
 8005f80:	4183      	sbcs	r3, r0
 8005f82:	00d8      	lsls	r0, r3, #3
  if ( ( GPIO_Pin & 0xF0F0 ) != 0) { PinPos |= 0x4; }
 8005f84:	4b07      	ldr	r3, [pc, #28]	; (8005fa4 <HW_GPIO_GetBitPos+0x30>)
 8005f86:	421a      	tst	r2, r3
 8005f88:	d001      	beq.n	8005f8e <HW_GPIO_GetBitPos+0x1a>
 8005f8a:	2304      	movs	r3, #4
 8005f8c:	4318      	orrs	r0, r3
  if ( ( GPIO_Pin & 0xCCCC ) != 0) { PinPos |= 0x2; }
 8005f8e:	4b06      	ldr	r3, [pc, #24]	; (8005fa8 <HW_GPIO_GetBitPos+0x34>)
 8005f90:	421a      	tst	r2, r3
 8005f92:	d001      	beq.n	8005f98 <HW_GPIO_GetBitPos+0x24>
 8005f94:	2302      	movs	r3, #2
 8005f96:	4318      	orrs	r0, r3
  if ( ( GPIO_Pin & 0xAAAA ) != 0) { PinPos |= 0x1; }
 8005f98:	4b04      	ldr	r3, [pc, #16]	; (8005fac <HW_GPIO_GetBitPos+0x38>)
 8005f9a:	421a      	tst	r2, r3
 8005f9c:	d001      	beq.n	8005fa2 <HW_GPIO_GetBitPos+0x2e>
 8005f9e:	2301      	movs	r3, #1
 8005fa0:	4318      	orrs	r0, r3
  
  return PinPos;
}
 8005fa2:	4770      	bx	lr
 8005fa4:	fffff0f0 	.word	0xfffff0f0
 8005fa8:	ffffcccc 	.word	0xffffcccc
 8005fac:	ffffaaaa 	.word	0xffffaaaa

08005fb0 <HW_GPIO_Init>:
{
 8005fb0:	b530      	push	{r4, r5, lr}
  RCC_GPIO_CLK_ENABLE(  (uint32_t) port);
 8005fb2:	4c21      	ldr	r4, [pc, #132]	; (8006038 <HW_GPIO_Init+0x88>)
{
 8005fb4:	b087      	sub	sp, #28
 8005fb6:	4b21      	ldr	r3, [pc, #132]	; (800603c <HW_GPIO_Init+0x8c>)
  RCC_GPIO_CLK_ENABLE(  (uint32_t) port);
 8005fb8:	42a0      	cmp	r0, r4
 8005fba:	d02a      	beq.n	8006012 <HW_GPIO_Init+0x62>
 8005fbc:	d80c      	bhi.n	8005fd8 <HW_GPIO_Init+0x28>
 8005fbe:	24a0      	movs	r4, #160	; 0xa0
 8005fc0:	05e4      	lsls	r4, r4, #23
 8005fc2:	42a0      	cmp	r0, r4
 8005fc4:	d017      	beq.n	8005ff6 <HW_GPIO_Init+0x46>
 8005fc6:	2580      	movs	r5, #128	; 0x80
 8005fc8:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8005fca:	432c      	orrs	r4, r5
 8005fcc:	62dc      	str	r4, [r3, #44]	; 0x2c
 8005fce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fd0:	402b      	ands	r3, r5
 8005fd2:	9305      	str	r3, [sp, #20]
 8005fd4:	9b05      	ldr	r3, [sp, #20]
 8005fd6:	e016      	b.n	8006006 <HW_GPIO_Init+0x56>
 8005fd8:	4c19      	ldr	r4, [pc, #100]	; (8006040 <HW_GPIO_Init+0x90>)
 8005fda:	42a0      	cmp	r0, r4
 8005fdc:	d022      	beq.n	8006024 <HW_GPIO_Init+0x74>
 8005fde:	4c19      	ldr	r4, [pc, #100]	; (8006044 <HW_GPIO_Init+0x94>)
 8005fe0:	42a0      	cmp	r0, r4
 8005fe2:	d1f0      	bne.n	8005fc6 <HW_GPIO_Init+0x16>
 8005fe4:	2508      	movs	r5, #8
 8005fe6:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8005fe8:	432c      	orrs	r4, r5
 8005fea:	62dc      	str	r4, [r3, #44]	; 0x2c
 8005fec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fee:	402b      	ands	r3, r5
 8005ff0:	9304      	str	r3, [sp, #16]
 8005ff2:	9b04      	ldr	r3, [sp, #16]
 8005ff4:	e007      	b.n	8006006 <HW_GPIO_Init+0x56>
 8005ff6:	2501      	movs	r5, #1
 8005ff8:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8005ffa:	432c      	orrs	r4, r5
 8005ffc:	62dc      	str	r4, [r3, #44]	; 0x2c
 8005ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006000:	402b      	ands	r3, r5
 8006002:	9301      	str	r3, [sp, #4]
 8006004:	9b01      	ldr	r3, [sp, #4]
  initStruct->Pin = GPIO_Pin ;
 8006006:	6011      	str	r1, [r2, #0]
  HAL_GPIO_Init( port, initStruct );
 8006008:	0011      	movs	r1, r2
 800600a:	f7fd ff65 	bl	8003ed8 <HAL_GPIO_Init>
}
 800600e:	b007      	add	sp, #28
 8006010:	bd30      	pop	{r4, r5, pc}
  RCC_GPIO_CLK_ENABLE(  (uint32_t) port);
 8006012:	2502      	movs	r5, #2
 8006014:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8006016:	432c      	orrs	r4, r5
 8006018:	62dc      	str	r4, [r3, #44]	; 0x2c
 800601a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800601c:	402b      	ands	r3, r5
 800601e:	9302      	str	r3, [sp, #8]
 8006020:	9b02      	ldr	r3, [sp, #8]
 8006022:	e7f0      	b.n	8006006 <HW_GPIO_Init+0x56>
 8006024:	2504      	movs	r5, #4
 8006026:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8006028:	432c      	orrs	r4, r5
 800602a:	62dc      	str	r4, [r3, #44]	; 0x2c
 800602c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800602e:	402b      	ands	r3, r5
 8006030:	9303      	str	r3, [sp, #12]
 8006032:	9b03      	ldr	r3, [sp, #12]
 8006034:	e7e7      	b.n	8006006 <HW_GPIO_Init+0x56>
 8006036:	46c0      	nop			; (mov r8, r8)
 8006038:	50000400 	.word	0x50000400
 800603c:	40021000 	.word	0x40021000
 8006040:	50000800 	.word	0x50000800
 8006044:	50000c00 	.word	0x50000c00

08006048 <HW_GPIO_SetIrq>:
{
 8006048:	b570      	push	{r4, r5, r6, lr}
  uint32_t BitPos = HW_GPIO_GetBitPos( GPIO_Pin ) ;
 800604a:	0008      	movs	r0, r1
{
 800604c:	001d      	movs	r5, r3
 800604e:	000c      	movs	r4, r1
 8006050:	0016      	movs	r6, r2
  uint32_t BitPos = HW_GPIO_GetBitPos( GPIO_Pin ) ;
 8006052:	f7ff ff8f 	bl	8005f74 <HW_GPIO_GetBitPos>
  if ( irqHandler != NULL)
 8006056:	2d00      	cmp	r5, #0
 8006058:	d00d      	beq.n	8006076 <HW_GPIO_SetIrq+0x2e>
    GpioIrq[ BitPos ] = irqHandler;
 800605a:	4b07      	ldr	r3, [pc, #28]	; (8006078 <HW_GPIO_SetIrq+0x30>)
 800605c:	0080      	lsls	r0, r0, #2
 800605e:	50c5      	str	r5, [r0, r3]
    IRQnb = MSP_GetIRQn( GPIO_Pin );
 8006060:	0020      	movs	r0, r4
 8006062:	f000 fd6d 	bl	8006b40 <MSP_GetIRQn>
 8006066:	0004      	movs	r4, r0
    HAL_NVIC_SetPriority( IRQnb , prio, 0);
 8006068:	2200      	movs	r2, #0
 800606a:	0031      	movs	r1, r6
 800606c:	f7fd fed8 	bl	8003e20 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ( IRQnb );
 8006070:	0020      	movs	r0, r4
 8006072:	f7fd ff05 	bl	8003e80 <HAL_NVIC_EnableIRQ>
}
 8006076:	bd70      	pop	{r4, r5, r6, pc}
 8006078:	20000224 	.word	0x20000224

0800607c <HW_GPIO_IrqHandler>:
{
 800607c:	b510      	push	{r4, lr}
  uint32_t BitPos = HW_GPIO_GetBitPos( GPIO_Pin );
 800607e:	f7ff ff79 	bl	8005f74 <HW_GPIO_GetBitPos>
  if ( GpioIrq[ BitPos ]  != NULL)
 8006082:	4b03      	ldr	r3, [pc, #12]	; (8006090 <HW_GPIO_IrqHandler+0x14>)
 8006084:	0080      	lsls	r0, r0, #2
 8006086:	58c3      	ldr	r3, [r0, r3]
 8006088:	2b00      	cmp	r3, #0
 800608a:	d000      	beq.n	800608e <HW_GPIO_IrqHandler+0x12>
    GpioIrq[ BitPos ] ( );
 800608c:	4798      	blx	r3
}
 800608e:	bd10      	pop	{r4, pc}
 8006090:	20000224 	.word	0x20000224

08006094 <HW_GPIO_Write>:
{
 8006094:	b510      	push	{r4, lr}
  HAL_GPIO_WritePin( GPIOx, GPIO_Pin , (GPIO_PinState) value );
 8006096:	b2d2      	uxtb	r2, r2
 8006098:	f7fd ffe0 	bl	800405c <HAL_GPIO_WritePin>
}
 800609c:	bd10      	pop	{r4, pc}
	...

080060a0 <HW_RTC_GetCalendarValue>:
 * @param pointer to RTC_DateStruct
 * @param pointer to RTC_TimeStruct
 * @retval time in ticks
 */
static TimerTime_t HW_RTC_GetCalendarValue( RTC_DateTypeDef* RTC_DateStruct, RTC_TimeTypeDef* RTC_TimeStruct )
{
 80060a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  TimerTime_t calendarValue = 0;
  uint32_t first_read;
  uint32_t correction;
  
  /* Get Time and Date*/
  HAL_RTC_GetTime( &RtcHandle, RTC_TimeStruct, RTC_FORMAT_BIN );
 80060a2:	4f21      	ldr	r7, [pc, #132]	; (8006128 <HW_RTC_GetCalendarValue+0x88>)
{
 80060a4:	0006      	movs	r6, r0
  HAL_RTC_GetTime( &RtcHandle, RTC_TimeStruct, RTC_FORMAT_BIN );
 80060a6:	2200      	movs	r2, #0
 80060a8:	0038      	movs	r0, r7
{
 80060aa:	000d      	movs	r5, r1
  HAL_RTC_GetTime( &RtcHandle, RTC_TimeStruct, RTC_FORMAT_BIN );
 80060ac:	f7ff f878 	bl	80051a0 <HAL_RTC_GetTime>
 
   /* make sure it is correct due to asynchronus nature of RTC*/
  do {
    first_read = RTC_TimeStruct->SubSeconds;
    HAL_RTC_GetDate( &RtcHandle, RTC_DateStruct, RTC_FORMAT_BIN );
 80060b0:	2200      	movs	r2, #0
 80060b2:	0031      	movs	r1, r6
 80060b4:	0038      	movs	r0, r7
    first_read = RTC_TimeStruct->SubSeconds;
 80060b6:	686c      	ldr	r4, [r5, #4]
    HAL_RTC_GetDate( &RtcHandle, RTC_DateStruct, RTC_FORMAT_BIN );
 80060b8:	f7ff f89c 	bl	80051f4 <HAL_RTC_GetDate>
    HAL_RTC_GetTime( &RtcHandle, RTC_TimeStruct, RTC_FORMAT_BIN );
 80060bc:	2200      	movs	r2, #0
 80060be:	0029      	movs	r1, r5
 80060c0:	0038      	movs	r0, r7
 80060c2:	f7ff f86d 	bl	80051a0 <HAL_RTC_GetTime>
  } while (first_read != RTC_TimeStruct->SubSeconds);
 80060c6:	686b      	ldr	r3, [r5, #4]
 80060c8:	429c      	cmp	r4, r3
 80060ca:	d1f1      	bne.n	80060b0 <HW_RTC_GetCalendarValue+0x10>
 
  /* calculte amount of elapsed days since 01/01/2000 */
  calendarValue= DIVC( (DAYS_IN_YEAR*3 + DAYS_IN_LEAP_YEAR)* RTC_DateStruct->Year , 4);
 80060cc:	78f3      	ldrb	r3, [r6, #3]
 80060ce:	4817      	ldr	r0, [pc, #92]	; (800612c <HW_RTC_GetCalendarValue+0x8c>)
 80060d0:	4358      	muls	r0, r3
 80060d2:	3003      	adds	r0, #3
 80060d4:	0880      	lsrs	r0, r0, #2

  correction = ( (RTC_DateStruct->Year % 4) == 0 ) ? DAYS_IN_MONTH_CORRECTION_LEAP : DAYS_IN_MONTH_CORRECTION_NORM ;
 80060d6:	079b      	lsls	r3, r3, #30
 80060d8:	d024      	beq.n	8006124 <HW_RTC_GetCalendarValue+0x84>
 80060da:	4915      	ldr	r1, [pc, #84]	; (8006130 <HW_RTC_GetCalendarValue+0x90>)
 
  calendarValue +=( DIVC( (RTC_DateStruct->Month-1)*(30+31) ,2 ) - (((correction>> ((RTC_DateStruct->Month-1)*2) )&0x3)));
 80060dc:	223d      	movs	r2, #61	; 0x3d
 80060de:	7877      	ldrb	r7, [r6, #1]
 80060e0:	3f01      	subs	r7, #1
 80060e2:	437a      	muls	r2, r7
 80060e4:	3201      	adds	r2, #1
 80060e6:	0fd3      	lsrs	r3, r2, #31
 80060e8:	189b      	adds	r3, r3, r2

  calendarValue += (RTC_DateStruct->Date -1);
 80060ea:	78b2      	ldrb	r2, [r6, #2]
  calendarValue +=( DIVC( (RTC_DateStruct->Month-1)*(30+31) ,2 ) - (((correction>> ((RTC_DateStruct->Month-1)*2) )&0x3)));
 80060ec:	105b      	asrs	r3, r3, #1
 80060ee:	3a01      	subs	r2, #1
 80060f0:	1812      	adds	r2, r2, r0
 80060f2:	189a      	adds	r2, r3, r2
 80060f4:	000b      	movs	r3, r1
 80060f6:	007f      	lsls	r7, r7, #1
 80060f8:	40fb      	lsrs	r3, r7
 80060fa:	2003      	movs	r0, #3
 80060fc:	4003      	ands	r3, r0
  
  /* convert from days to seconds */
  calendarValue *= SECONDS_IN_1DAY; 
 80060fe:	480d      	ldr	r0, [pc, #52]	; (8006134 <HW_RTC_GetCalendarValue+0x94>)
  calendarValue += (RTC_DateStruct->Date -1);
 8006100:	1ad3      	subs	r3, r2, r3
  calendarValue *= SECONDS_IN_1DAY; 
 8006102:	4343      	muls	r3, r0

  calendarValue += ( ( uint32_t )RTC_TimeStruct->Seconds + 
                     ( ( uint32_t )RTC_TimeStruct->Minutes * SECONDS_IN_1MINUTE ) +
                     ( ( uint32_t )RTC_TimeStruct->Hours * SECONDS_IN_1HOUR ) ) ;
 8006104:	20e1      	movs	r0, #225	; 0xe1
 8006106:	782a      	ldrb	r2, [r5, #0]
 8006108:	0100      	lsls	r0, r0, #4
 800610a:	4350      	muls	r0, r2
                     ( ( uint32_t )RTC_TimeStruct->Minutes * SECONDS_IN_1MINUTE ) +
 800610c:	223c      	movs	r2, #60	; 0x3c
 800610e:	7869      	ldrb	r1, [r5, #1]
 8006110:	434a      	muls	r2, r1
 8006112:	1880      	adds	r0, r0, r2
  calendarValue += ( ( uint32_t )RTC_TimeStruct->Seconds + 
 8006114:	78aa      	ldrb	r2, [r5, #2]
                     ( ( uint32_t )RTC_TimeStruct->Minutes * SECONDS_IN_1MINUTE ) +
 8006116:	1880      	adds	r0, r0, r2
  calendarValue += ( ( uint32_t )RTC_TimeStruct->Seconds + 
 8006118:	18c0      	adds	r0, r0, r3


  
  calendarValue = (calendarValue<<N_PREDIV_S) + ( PREDIV_S - RTC_TimeStruct->SubSeconds);
 800611a:	0280      	lsls	r0, r0, #10
 800611c:	4b06      	ldr	r3, [pc, #24]	; (8006138 <HW_RTC_GetCalendarValue+0x98>)
 800611e:	1b00      	subs	r0, r0, r4
 8006120:	18c0      	adds	r0, r0, r3

  return( calendarValue );
}
 8006122:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  correction = ( (RTC_DateStruct->Year % 4) == 0 ) ? DAYS_IN_MONTH_CORRECTION_LEAP : DAYS_IN_MONTH_CORRECTION_NORM ;
 8006124:	4905      	ldr	r1, [pc, #20]	; (800613c <HW_RTC_GetCalendarValue+0x9c>)
 8006126:	e7d9      	b.n	80060dc <HW_RTC_GetCalendarValue+0x3c>
 8006128:	20000264 	.word	0x20000264
 800612c:	000005b5 	.word	0x000005b5
 8006130:	0099aaa0 	.word	0x0099aaa0
 8006134:	00015180 	.word	0x00015180
 8006138:	000003ff 	.word	0x000003ff
 800613c:	00445550 	.word	0x00445550

08006140 <HW_RTC_setMcuWakeUpTime>:
{
 8006140:	b5f0      	push	{r4, r5, r6, r7, lr}
  if ((McuWakeUpTimeInitialized == false) &&
 8006142:	4d1a      	ldr	r5, [pc, #104]	; (80061ac <HW_RTC_setMcuWakeUpTime+0x6c>)
{
 8006144:	b087      	sub	sp, #28
  if ((McuWakeUpTimeInitialized == false) &&
 8006146:	1d6c      	adds	r4, r5, #5
 8006148:	7fe7      	ldrb	r7, [r4, #31]
 800614a:	2f00      	cmp	r7, #0
 800614c:	d12c      	bne.n	80061a8 <HW_RTC_setMcuWakeUpTime+0x68>
      ( HAL_NVIC_GetPendingIRQ( RTC_Alarm_IRQn ) == 1))
 800614e:	2002      	movs	r0, #2
 8006150:	f7fd feaa 	bl	8003ea8 <HAL_NVIC_GetPendingIRQ>
  if ((McuWakeUpTimeInitialized == false) &&
 8006154:	2801      	cmp	r0, #1
 8006156:	d127      	bne.n	80061a8 <HW_RTC_setMcuWakeUpTime+0x68>
    McuWakeUpTimeInitialized = true;
 8006158:	77e0      	strb	r0, [r4, #31]
    now = HW_RTC_GetCalendarValue( &RTC_DateStruct, &RTC_TimeStruct );
 800615a:	a901      	add	r1, sp, #4
 800615c:	4668      	mov	r0, sp
    HAL_RTC_GetAlarm(&RtcHandle, &RTC_AlarmStructure, RTC_ALARM_A, RTC_FORMAT_BIN );
 800615e:	002e      	movs	r6, r5
    now = HW_RTC_GetCalendarValue( &RTC_DateStruct, &RTC_TimeStruct );
 8006160:	f7ff ff9e 	bl	80060a0 <HW_RTC_GetCalendarValue>
    HAL_RTC_GetAlarm(&RtcHandle, &RTC_AlarmStructure, RTC_ALARM_A, RTC_FORMAT_BIN );
 8006164:	2280      	movs	r2, #128	; 0x80
 8006166:	3628      	adds	r6, #40	; 0x28
    now = HW_RTC_GetCalendarValue( &RTC_DateStruct, &RTC_TimeStruct );
 8006168:	0004      	movs	r4, r0
    HAL_RTC_GetAlarm(&RtcHandle, &RTC_AlarmStructure, RTC_ALARM_A, RTC_FORMAT_BIN );
 800616a:	003b      	movs	r3, r7
 800616c:	0052      	lsls	r2, r2, #1
 800616e:	0031      	movs	r1, r6
 8006170:	0028      	movs	r0, r5
 8006172:	f7ff f861 	bl	8005238 <HAL_RTC_GetAlarm>
          24*(RTC_AlarmStructure.AlarmDateWeekDay)));
 8006176:	002b      	movs	r3, r5
 8006178:	2018      	movs	r0, #24
 800617a:	3329      	adds	r3, #41	; 0x29
 800617c:	7fdb      	ldrb	r3, [r3, #31]
          60*(RTC_AlarmStructure.AlarmTime.Minutes+
 800617e:	7872      	ldrb	r2, [r6, #1]
          24*(RTC_AlarmStructure.AlarmDateWeekDay)));
 8006180:	4358      	muls	r0, r3
          60*(RTC_AlarmStructure.AlarmTime.Hours+
 8006182:	7833      	ldrb	r3, [r6, #0]
 8006184:	18c0      	adds	r0, r0, r3
 8006186:	233c      	movs	r3, #60	; 0x3c
 8006188:	4358      	muls	r0, r3
          60*(RTC_AlarmStructure.AlarmTime.Minutes+
 800618a:	1880      	adds	r0, r0, r2
    McuWakeUpTimeCal += McuWakeUpTime;
 800618c:	002a      	movs	r2, r5
          60*(RTC_AlarmStructure.AlarmTime.Minutes+
 800618e:	4358      	muls	r0, r3
    hit = RTC_AlarmStructure.AlarmTime.Seconds+
 8006190:	78b3      	ldrb	r3, [r6, #2]
    McuWakeUpTimeCal += McuWakeUpTime;
 8006192:	3250      	adds	r2, #80	; 0x50
    hit = RTC_AlarmStructure.AlarmTime.Seconds+
 8006194:	18c0      	adds	r0, r0, r3
    hit = ( hit << N_PREDIV_S ) + (PREDIV_S - RTC_AlarmStructure.AlarmTime.SubSeconds);
 8006196:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8006198:	0280      	lsls	r0, r0, #10
 800619a:	1ac0      	subs	r0, r0, r3
 800619c:	4b04      	ldr	r3, [pc, #16]	; (80061b0 <HW_RTC_setMcuWakeUpTime+0x70>)
 800619e:	18c0      	adds	r0, r0, r3
    McuWakeUpTimeCal += McuWakeUpTime;
 80061a0:	8813      	ldrh	r3, [r2, #0]
 80061a2:	1a18      	subs	r0, r3, r0
 80061a4:	1904      	adds	r4, r0, r4
 80061a6:	8014      	strh	r4, [r2, #0]
}
 80061a8:	b007      	add	sp, #28
 80061aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80061ac:	20000264 	.word	0x20000264
 80061b0:	000003ff 	.word	0x000003ff

080061b4 <HW_RTC_GetMinimumTimeout>:
}
 80061b4:	2003      	movs	r0, #3
 80061b6:	4770      	bx	lr

080061b8 <HW_RTC_ms2Tick>:
{
 80061b8:	b510      	push	{r4, lr}
  return ( uint32_t) ( ( ((uint64_t)timeMicroSec) * CONV_DENOM ) / CONV_NUMER );
 80061ba:	0e41      	lsrs	r1, r0, #25
 80061bc:	227d      	movs	r2, #125	; 0x7d
 80061be:	01c0      	lsls	r0, r0, #7
 80061c0:	2300      	movs	r3, #0
 80061c2:	f7fa f95f 	bl	8000484 <__aeabi_uldivmod>
}
 80061c6:	bd10      	pop	{r4, pc}

080061c8 <HW_RTC_Tick2ms>:
{
 80061c8:	b510      	push	{r4, lr}
  return  ( ( (uint64_t)( tick )* CONV_NUMER ) / CONV_DENOM );
 80061ca:	227d      	movs	r2, #125	; 0x7d
 80061cc:	2300      	movs	r3, #0
 80061ce:	2100      	movs	r1, #0
 80061d0:	f7fa f978 	bl	80004c4 <__aeabi_lmul>
 80061d4:	0649      	lsls	r1, r1, #25
 80061d6:	09c0      	lsrs	r0, r0, #7
 80061d8:	4308      	orrs	r0, r1
}
 80061da:	bd10      	pop	{r4, pc}

080061dc <HW_RTC_GetTimerElapsedTime>:
{
 80061dc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  TimerTime_t CalendarValue = HW_RTC_GetCalendarValue(&RTC_DateStruct, &RTC_TimeStruct );
 80061de:	a901      	add	r1, sp, #4
 80061e0:	4668      	mov	r0, sp
 80061e2:	f7ff ff5d 	bl	80060a0 <HW_RTC_GetCalendarValue>
  return( ( uint32_t )( CalendarValue - RtcTimerContext.Rtc_Time ));
 80061e6:	4b02      	ldr	r3, [pc, #8]	; (80061f0 <HW_RTC_GetTimerElapsedTime+0x14>)
 80061e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061ea:	1ac0      	subs	r0, r0, r3
}
 80061ec:	b007      	add	sp, #28
 80061ee:	bd00      	pop	{pc}
 80061f0:	20000264 	.word	0x20000264

080061f4 <HW_RTC_GetTimerValue>:
{
 80061f4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  uint32_t CalendarValue = (uint32_t) HW_RTC_GetCalendarValue(&RTC_DateStruct, &RTC_TimeStruct );
 80061f6:	a901      	add	r1, sp, #4
 80061f8:	4668      	mov	r0, sp
 80061fa:	f7ff ff51 	bl	80060a0 <HW_RTC_GetCalendarValue>
}
 80061fe:	b007      	add	sp, #28
 8006200:	bd00      	pop	{pc}
	...

08006204 <HW_RTC_StopAlarm>:
  __HAL_RTC_ALARM_CLEAR_FLAG( &RtcHandle, RTC_FLAG_ALRAF);
 8006204:	4806      	ldr	r0, [pc, #24]	; (8006220 <HW_RTC_StopAlarm+0x1c>)
 8006206:	4b07      	ldr	r3, [pc, #28]	; (8006224 <HW_RTC_StopAlarm+0x20>)
 8006208:	6801      	ldr	r1, [r0, #0]
{
 800620a:	b510      	push	{r4, lr}
  __HAL_RTC_ALARM_CLEAR_FLAG( &RtcHandle, RTC_FLAG_ALRAF);
 800620c:	68ca      	ldr	r2, [r1, #12]
 800620e:	b2d2      	uxtb	r2, r2
 8006210:	4313      	orrs	r3, r2
 8006212:	60cb      	str	r3, [r1, #12]
  HAL_RTC_DeactivateAlarm(&RtcHandle, RTC_ALARM_A );
 8006214:	2180      	movs	r1, #128	; 0x80
 8006216:	0049      	lsls	r1, r1, #1
 8006218:	f7fe fd1a 	bl	8004c50 <HAL_RTC_DeactivateAlarm>
}
 800621c:	bd10      	pop	{r4, pc}
 800621e:	46c0      	nop			; (mov r8, r8)
 8006220:	20000264 	.word	0x20000264
 8006224:	fffffe7f 	.word	0xfffffe7f

08006228 <HW_RTC_SetAlarm>:
{
 8006228:	b5f0      	push	{r4, r5, r6, r7, lr}
  if ( (MIN_ALARM_DELAY + McuWakeUpTimeCal ) < ((timeout - HW_RTC_GetTimerElapsedTime( ) )) )
 800622a:	4c50      	ldr	r4, [pc, #320]	; (800636c <HW_RTC_SetAlarm+0x144>)
{
 800622c:	b087      	sub	sp, #28
  if ( (MIN_ALARM_DELAY + McuWakeUpTimeCal ) < ((timeout - HW_RTC_GetTimerElapsedTime( ) )) )
 800622e:	0023      	movs	r3, r4
 8006230:	3350      	adds	r3, #80	; 0x50
{
 8006232:	0006      	movs	r6, r0
  if ( (MIN_ALARM_DELAY + McuWakeUpTimeCal ) < ((timeout - HW_RTC_GetTimerElapsedTime( ) )) )
 8006234:	2500      	movs	r5, #0
 8006236:	5f5d      	ldrsh	r5, [r3, r5]
 8006238:	f7ff ffd0 	bl	80061dc <HW_RTC_GetTimerElapsedTime>
 800623c:	3503      	adds	r5, #3
 800623e:	1a30      	subs	r0, r6, r0
 8006240:	4285      	cmp	r5, r0
 8006242:	d300      	bcc.n	8006246 <HW_RTC_SetAlarm+0x1e>
 8006244:	e06d      	b.n	8006322 <HW_RTC_SetAlarm+0xfa>
    LowPower_Enable( e_LOW_POWER_RTC );
 8006246:	2001      	movs	r0, #1
 8006248:	f7ff fd54 	bl	8005cf4 <LowPower_Enable>
  if( LowPower_GetState() == 0 )
 800624c:	f7ff fd5e 	bl	8005d0c <LowPower_GetState>
 8006250:	2800      	cmp	r0, #0
 8006252:	d107      	bne.n	8006264 <HW_RTC_SetAlarm+0x3c>
    LowPower_Enable( e_LOW_POWER_RTC );
 8006254:	3001      	adds	r0, #1
 8006256:	f7ff fd4d 	bl	8005cf4 <LowPower_Enable>
    timeout = timeout -  McuWakeUpTimeCal;
 800625a:	0023      	movs	r3, r4
 800625c:	3350      	adds	r3, #80	; 0x50
 800625e:	2200      	movs	r2, #0
 8006260:	5e9b      	ldrsh	r3, [r3, r2]
 8006262:	1af6      	subs	r6, r6, r3
  RTC_TimeTypeDef RTC_TimeStruct = RtcTimerContext.RTC_Calndr_Time;
 8006264:	0023      	movs	r3, r4
 8006266:	3354      	adds	r3, #84	; 0x54
 8006268:	795a      	ldrb	r2, [r3, #5]
 800626a:	6de7      	ldr	r7, [r4, #92]	; 0x5c
 800626c:	9201      	str	r2, [sp, #4]
 800626e:	799a      	ldrb	r2, [r3, #6]
  RTC_DateTypeDef RTC_DateStruct = RtcTimerContext.RTC_Calndr_Date;
 8006270:	7e9c      	ldrb	r4, [r3, #26]
  RTC_TimeTypeDef RTC_TimeStruct = RtcTimerContext.RTC_Calndr_Time;
 8006272:	9202      	str	r2, [sp, #8]
 8006274:	79da      	ldrb	r2, [r3, #7]
 8006276:	791d      	ldrb	r5, [r3, #4]
 8006278:	9203      	str	r2, [sp, #12]
  RTC_DateTypeDef RTC_DateStruct = RtcTimerContext.RTC_Calndr_Date;
 800627a:	7e5a      	ldrb	r2, [r3, #25]
 800627c:	7edb      	ldrb	r3, [r3, #27]
 800627e:	9200      	str	r2, [sp, #0]
 8006280:	9304      	str	r3, [sp, #16]
  HW_RTC_StopAlarm( );
 8006282:	f7ff ffbf 	bl	8006204 <HW_RTC_StopAlarm>
  rtcAlarmSubSeconds =  PREDIV_S - RTC_TimeStruct.SubSeconds;
 8006286:	4a3a      	ldr	r2, [pc, #232]	; (8006370 <HW_RTC_SetAlarm+0x148>)
  rtcAlarmSubSeconds += ( timeoutValue & PREDIV_S);
 8006288:	05b3      	lsls	r3, r6, #22
  rtcAlarmSubSeconds =  PREDIV_S - RTC_TimeStruct.SubSeconds;
 800628a:	1bd7      	subs	r7, r2, r7
  rtcAlarmSubSeconds += ( timeoutValue & PREDIV_S);
 800628c:	0d9b      	lsrs	r3, r3, #22
 800628e:	18fb      	adds	r3, r7, r3
 8006290:	9205      	str	r2, [sp, #20]
  while (timeoutValue >= SECONDS_IN_1DAY)
 8006292:	4a38      	ldr	r2, [pc, #224]	; (8006374 <HW_RTC_SetAlarm+0x14c>)
  rtcAlarmSubSeconds += ( timeoutValue & PREDIV_S);
 8006294:	b29b      	uxth	r3, r3
  timeoutValue >>= N_PREDIV_S;  /* convert timeout  in seconds */
 8006296:	0ab6      	lsrs	r6, r6, #10
  rtcAlarmDays =  RTC_DateStruct.Date;
 8006298:	b2a0      	uxth	r0, r4
  while (timeoutValue >= SECONDS_IN_1DAY)
 800629a:	4296      	cmp	r6, r2
 800629c:	d845      	bhi.n	800632a <HW_RTC_SetAlarm+0x102>
  while (timeoutValue >= SECONDS_IN_1HOUR)
 800629e:	4a36      	ldr	r2, [pc, #216]	; (8006378 <HW_RTC_SetAlarm+0x150>)
  rtcAlarmHours = RTC_TimeStruct.Hours;
 80062a0:	b2ad      	uxth	r5, r5
  while (timeoutValue >= SECONDS_IN_1HOUR)
 80062a2:	4296      	cmp	r6, r2
 80062a4:	d846      	bhi.n	8006334 <HW_RTC_SetAlarm+0x10c>
  rtcAlarmMinutes = RTC_TimeStruct.Minutes;
 80062a6:	466a      	mov	r2, sp
 80062a8:	8897      	ldrh	r7, [r2, #4]
  while (timeoutValue >= SECONDS_IN_1MINUTE)
 80062aa:	2e3b      	cmp	r6, #59	; 0x3b
 80062ac:	d847      	bhi.n	800633e <HW_RTC_SetAlarm+0x116>
 80062ae:	0a9a      	lsrs	r2, r3, #10
 80062b0:	0294      	lsls	r4, r2, #10
 80062b2:	1b1c      	subs	r4, r3, r4
 80062b4:	9b02      	ldr	r3, [sp, #8]
 80062b6:	b2a4      	uxth	r4, r4
 80062b8:	18d2      	adds	r2, r2, r3
 80062ba:	1996      	adds	r6, r2, r6
 80062bc:	b2b6      	uxth	r6, r6
  while (rtcAlarmSeconds >= SECONDS_IN_1MINUTE)
 80062be:	2e3b      	cmp	r6, #59	; 0x3b
 80062c0:	d841      	bhi.n	8006346 <HW_RTC_SetAlarm+0x11e>
  while (rtcAlarmMinutes >= MINUTES_IN_1HOUR)
 80062c2:	2f3b      	cmp	r7, #59	; 0x3b
 80062c4:	d844      	bhi.n	8006350 <HW_RTC_SetAlarm+0x128>
  while (rtcAlarmHours >= HOURS_IN_1DAY)
 80062c6:	2d17      	cmp	r5, #23
 80062c8:	d847      	bhi.n	800635a <HW_RTC_SetAlarm+0x132>
  if( RTC_DateStruct.Year % 4 == 0 ) 
 80062ca:	9a04      	ldr	r2, [sp, #16]
 80062cc:	4b2b      	ldr	r3, [pc, #172]	; (800637c <HW_RTC_SetAlarm+0x154>)
 80062ce:	0792      	lsls	r2, r2, #30
 80062d0:	d148      	bne.n	8006364 <HW_RTC_SetAlarm+0x13c>
    if( rtcAlarmDays > DaysInMonthLeapYear[ RTC_DateStruct.Month - 1 ] )    
 80062d2:	9a00      	ldr	r2, [sp, #0]
 80062d4:	189b      	adds	r3, r3, r2
 80062d6:	3b01      	subs	r3, #1
 80062d8:	7819      	ldrb	r1, [r3, #0]
    if( rtcAlarmDays > DaysInMonth[ RTC_DateStruct.Month - 1 ] )    
 80062da:	4288      	cmp	r0, r1
 80062dc:	d902      	bls.n	80062e4 <HW_RTC_SetAlarm+0xbc>
      rtcAlarmDays = rtcAlarmDays % DaysInMonth[ RTC_DateStruct.Month - 1 ];
 80062de:	f7fa f88d 	bl	80003fc <__aeabi_idivmod>
 80062e2:	b288      	uxth	r0, r1
  RTC_AlarmStructure.AlarmTime.SubSeconds = PREDIV_S-rtcAlarmSubSeconds;
 80062e4:	9a05      	ldr	r2, [sp, #20]
 80062e6:	4b21      	ldr	r3, [pc, #132]	; (800636c <HW_RTC_SetAlarm+0x144>)
 80062e8:	1b14      	subs	r4, r2, r4
  RTC_AlarmStructure.AlarmSubSecondMask  = HW_RTC_ALARMSUBSECONDMASK; 
 80062ea:	22a0      	movs	r2, #160	; 0xa0
 80062ec:	0512      	lsls	r2, r2, #20
 80062ee:	641a      	str	r2, [r3, #64]	; 0x40
  RTC_AlarmStructure.AlarmDateWeekDay    = ( uint8_t )rtcAlarmDays;
 80062f0:	001a      	movs	r2, r3
 80062f2:	3229      	adds	r2, #41	; 0x29
 80062f4:	77d0      	strb	r0, [r2, #31]
  RTC_AlarmStructure.AlarmTime.TimeFormat   = RTC_TimeStruct.TimeFormat;
 80062f6:	466a      	mov	r2, sp
  RTC_AlarmStructure.AlarmTime.Seconds = rtcAlarmSeconds;
 80062f8:	0019      	movs	r1, r3
  RTC_AlarmStructure.AlarmTime.TimeFormat   = RTC_TimeStruct.TimeFormat;
 80062fa:	7b12      	ldrb	r2, [r2, #12]
  RTC_AlarmStructure.Alarm = RTC_ALARM_A;
 80062fc:	2080      	movs	r0, #128	; 0x80
  RTC_AlarmStructure.AlarmTime.Seconds = rtcAlarmSeconds;
 80062fe:	3128      	adds	r1, #40	; 0x28
  RTC_AlarmStructure.AlarmTime.TimeFormat   = RTC_TimeStruct.TimeFormat;
 8006300:	70ca      	strb	r2, [r1, #3]
  RTC_AlarmStructure.AlarmDateWeekDaySel   = RTC_ALARMDATEWEEKDAYSEL_DATE; 
 8006302:	2200      	movs	r2, #0
  RTC_AlarmStructure.Alarm = RTC_ALARM_A;
 8006304:	0040      	lsls	r0, r0, #1
 8006306:	64d8      	str	r0, [r3, #76]	; 0x4c
  HAL_RTC_SetAlarm_IT( &RtcHandle, &RTC_AlarmStructure, RTC_FORMAT_BIN );
 8006308:	0018      	movs	r0, r3
  RTC_AlarmStructure.AlarmTime.SubSeconds = PREDIV_S-rtcAlarmSubSeconds;
 800630a:	62dc      	str	r4, [r3, #44]	; 0x2c
  RTC_AlarmStructure.AlarmTime.Seconds = rtcAlarmSeconds;
 800630c:	708e      	strb	r6, [r1, #2]
  RTC_AlarmStructure.AlarmTime.Minutes = rtcAlarmMinutes;
 800630e:	704f      	strb	r7, [r1, #1]
  RTC_AlarmStructure.AlarmTime.Hours   = rtcAlarmHours;
 8006310:	700d      	strb	r5, [r1, #0]
  RTC_AlarmStructure.AlarmDateWeekDaySel   = RTC_ALARMDATEWEEKDAYSEL_DATE; 
 8006312:	645a      	str	r2, [r3, #68]	; 0x44
  RTC_AlarmStructure.AlarmMask       = RTC_ALARMMASK_NONE;
 8006314:	63da      	str	r2, [r3, #60]	; 0x3c
  RTC_AlarmStructure.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8006316:	635a      	str	r2, [r3, #52]	; 0x34
  RTC_AlarmStructure.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8006318:	639a      	str	r2, [r3, #56]	; 0x38
  HAL_RTC_SetAlarm_IT( &RtcHandle, &RTC_AlarmStructure, RTC_FORMAT_BIN );
 800631a:	f7fe fe6f 	bl	8004ffc <HAL_RTC_SetAlarm_IT>
}
 800631e:	b007      	add	sp, #28
 8006320:	bdf0      	pop	{r4, r5, r6, r7, pc}
    LowPower_Disable( e_LOW_POWER_RTC );
 8006322:	2001      	movs	r0, #1
 8006324:	f7ff fcda 	bl	8005cdc <LowPower_Disable>
 8006328:	e790      	b.n	800624c <HW_RTC_SetAlarm+0x24>
    timeoutValue -= SECONDS_IN_1DAY;
 800632a:	4915      	ldr	r1, [pc, #84]	; (8006380 <HW_RTC_SetAlarm+0x158>)
    rtcAlarmDays++;
 800632c:	3001      	adds	r0, #1
    timeoutValue -= SECONDS_IN_1DAY;
 800632e:	1876      	adds	r6, r6, r1
    rtcAlarmDays++;
 8006330:	b280      	uxth	r0, r0
 8006332:	e7b2      	b.n	800629a <HW_RTC_SetAlarm+0x72>
    timeoutValue -= SECONDS_IN_1HOUR;
 8006334:	4913      	ldr	r1, [pc, #76]	; (8006384 <HW_RTC_SetAlarm+0x15c>)
    rtcAlarmHours++;
 8006336:	3501      	adds	r5, #1
    timeoutValue -= SECONDS_IN_1HOUR;
 8006338:	1876      	adds	r6, r6, r1
    rtcAlarmHours++;
 800633a:	b2ad      	uxth	r5, r5
 800633c:	e7b1      	b.n	80062a2 <HW_RTC_SetAlarm+0x7a>
    rtcAlarmMinutes++;
 800633e:	3701      	adds	r7, #1
    timeoutValue -= SECONDS_IN_1MINUTE;
 8006340:	3e3c      	subs	r6, #60	; 0x3c
    rtcAlarmMinutes++;
 8006342:	b2bf      	uxth	r7, r7
 8006344:	e7b1      	b.n	80062aa <HW_RTC_SetAlarm+0x82>
    rtcAlarmSeconds -= SECONDS_IN_1MINUTE;
 8006346:	3e3c      	subs	r6, #60	; 0x3c
    rtcAlarmMinutes++;
 8006348:	3701      	adds	r7, #1
    rtcAlarmSeconds -= SECONDS_IN_1MINUTE;
 800634a:	b2b6      	uxth	r6, r6
    rtcAlarmMinutes++;
 800634c:	b2bf      	uxth	r7, r7
 800634e:	e7b6      	b.n	80062be <HW_RTC_SetAlarm+0x96>
    rtcAlarmMinutes -= MINUTES_IN_1HOUR;
 8006350:	3f3c      	subs	r7, #60	; 0x3c
    rtcAlarmHours++;
 8006352:	3501      	adds	r5, #1
    rtcAlarmMinutes -= MINUTES_IN_1HOUR;
 8006354:	b2bf      	uxth	r7, r7
    rtcAlarmHours++;
 8006356:	b2ad      	uxth	r5, r5
 8006358:	e7b3      	b.n	80062c2 <HW_RTC_SetAlarm+0x9a>
    rtcAlarmHours -= HOURS_IN_1DAY;
 800635a:	3d18      	subs	r5, #24
    rtcAlarmDays++;
 800635c:	3001      	adds	r0, #1
    rtcAlarmHours -= HOURS_IN_1DAY;
 800635e:	b2ad      	uxth	r5, r5
    rtcAlarmDays++;
 8006360:	b280      	uxth	r0, r0
 8006362:	e7b0      	b.n	80062c6 <HW_RTC_SetAlarm+0x9e>
    if( rtcAlarmDays > DaysInMonth[ RTC_DateStruct.Month - 1 ] )    
 8006364:	9a00      	ldr	r2, [sp, #0]
 8006366:	189b      	adds	r3, r3, r2
 8006368:	7ad9      	ldrb	r1, [r3, #11]
 800636a:	e7b6      	b.n	80062da <HW_RTC_SetAlarm+0xb2>
 800636c:	20000264 	.word	0x20000264
 8006370:	000003ff 	.word	0x000003ff
 8006374:	0001517f 	.word	0x0001517f
 8006378:	00000e0f 	.word	0x00000e0f
 800637c:	08007d6a 	.word	0x08007d6a
 8006380:	fffeae80 	.word	0xfffeae80
 8006384:	fffff1f0 	.word	0xfffff1f0

08006388 <HW_RTC_IrqHandler>:
  LowPower_Enable( e_LOW_POWER_RTC );
 8006388:	2001      	movs	r0, #1
{
 800638a:	b510      	push	{r4, lr}
  LowPower_Enable( e_LOW_POWER_RTC );
 800638c:	f7ff fcb2 	bl	8005cf4 <LowPower_Enable>
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != RESET)
 8006390:	4809      	ldr	r0, [pc, #36]	; (80063b8 <HW_RTC_IrqHandler+0x30>)
 8006392:	6803      	ldr	r3, [r0, #0]
 8006394:	689a      	ldr	r2, [r3, #8]
 8006396:	04d2      	lsls	r2, r2, #19
 8006398:	d50d      	bpl.n	80063b6 <HW_RTC_IrqHandler+0x2e>
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != RESET)
 800639a:	68da      	ldr	r2, [r3, #12]
 800639c:	05d2      	lsls	r2, r2, #23
 800639e:	d50a      	bpl.n	80063b6 <HW_RTC_IrqHandler+0x2e>
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF); 
 80063a0:	68d9      	ldr	r1, [r3, #12]
 80063a2:	4a06      	ldr	r2, [pc, #24]	; (80063bc <HW_RTC_IrqHandler+0x34>)
 80063a4:	b2c9      	uxtb	r1, r1
 80063a6:	430a      	orrs	r2, r1
 80063a8:	60da      	str	r2, [r3, #12]
      __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 80063aa:	2280      	movs	r2, #128	; 0x80
 80063ac:	4b04      	ldr	r3, [pc, #16]	; (80063c0 <HW_RTC_IrqHandler+0x38>)
 80063ae:	0292      	lsls	r2, r2, #10
 80063b0:	615a      	str	r2, [r3, #20]
      HAL_RTC_AlarmAEventCallback(hrtc);
 80063b2:	f000 fbbd 	bl	8006b30 <HAL_RTC_AlarmAEventCallback>
}
 80063b6:	bd10      	pop	{r4, pc}
 80063b8:	20000264 	.word	0x20000264
 80063bc:	fffffe7f 	.word	0xfffffe7f
 80063c0:	40010400 	.word	0x40010400

080063c4 <HW_RTC_DelayMs>:
{
 80063c4:	b570      	push	{r4, r5, r6, lr}
  return ( uint32_t) ( ( ((uint64_t)timeMicroSec) * CONV_DENOM ) / CONV_NUMER );
 80063c6:	0e41      	lsrs	r1, r0, #25
 80063c8:	227d      	movs	r2, #125	; 0x7d
 80063ca:	2300      	movs	r3, #0
 80063cc:	01c0      	lsls	r0, r0, #7
 80063ce:	f7fa f859 	bl	8000484 <__aeabi_uldivmod>
 80063d2:	0004      	movs	r4, r0
  timeout = HW_RTC_GetTimerValue( );
 80063d4:	f7ff ff0e 	bl	80061f4 <HW_RTC_GetTimerValue>
 80063d8:	0005      	movs	r5, r0
  while( ( ( HW_RTC_GetTimerValue( ) - timeout ) ) < delayValue )
 80063da:	f7ff ff0b 	bl	80061f4 <HW_RTC_GetTimerValue>
 80063de:	1b40      	subs	r0, r0, r5
 80063e0:	42a0      	cmp	r0, r4
 80063e2:	d300      	bcc.n	80063e6 <HW_RTC_DelayMs+0x22>
}
 80063e4:	bd70      	pop	{r4, r5, r6, pc}
  __ASM volatile ("nop");
 80063e6:	46c0      	nop			; (mov r8, r8)
 80063e8:	e7f7      	b.n	80063da <HW_RTC_DelayMs+0x16>
	...

080063ec <HW_RTC_SetTimerContext>:
{
 80063ec:	b510      	push	{r4, lr}
  RtcTimerContext.Rtc_Time = HW_RTC_GetCalendarValue( &RtcTimerContext.RTC_Calndr_Date, &RtcTimerContext.RTC_Calndr_Time );
 80063ee:	4c04      	ldr	r4, [pc, #16]	; (8006400 <HW_RTC_SetTimerContext+0x14>)
 80063f0:	0021      	movs	r1, r4
 80063f2:	0020      	movs	r0, r4
 80063f4:	3158      	adds	r1, #88	; 0x58
 80063f6:	306c      	adds	r0, #108	; 0x6c
 80063f8:	f7ff fe52 	bl	80060a0 <HW_RTC_GetCalendarValue>
 80063fc:	6560      	str	r0, [r4, #84]	; 0x54
}
 80063fe:	bd10      	pop	{r4, pc}
 8006400:	20000264 	.word	0x20000264

08006404 <HW_RTC_Init>:
{
 8006404:	b5f0      	push	{r4, r5, r6, r7, lr}
  if( HW_RTC_Initalized == false )
 8006406:	4d1c      	ldr	r5, [pc, #112]	; (8006478 <HW_RTC_Init+0x74>)
{
 8006408:	b087      	sub	sp, #28
  if( HW_RTC_Initalized == false )
 800640a:	002f      	movs	r7, r5
 800640c:	3770      	adds	r7, #112	; 0x70
 800640e:	783c      	ldrb	r4, [r7, #0]
 8006410:	2c00      	cmp	r4, #0
 8006412:	d12e      	bne.n	8006472 <HW_RTC_Init+0x6e>
  RtcHandle.Instance = RTC;
 8006414:	4b19      	ldr	r3, [pc, #100]	; (800647c <HW_RTC_Init+0x78>)
  HAL_RTC_Init( &RtcHandle );
 8006416:	0028      	movs	r0, r5
  RtcHandle.Instance = RTC;
 8006418:	602b      	str	r3, [r5, #0]
  RtcHandle.Init.AsynchPrediv = PREDIV_A; /* RTC_ASYNCH_PREDIV; */
 800641a:	231f      	movs	r3, #31
 800641c:	60ab      	str	r3, [r5, #8]
  RtcHandle.Init.SynchPrediv = PREDIV_S; /* RTC_SYNCH_PREDIV; */
 800641e:	4b18      	ldr	r3, [pc, #96]	; (8006480 <HW_RTC_Init+0x7c>)
  RTC_DateStruct.Month = RTC_MONTH_JANUARY;
 8006420:	2601      	movs	r6, #1
  RtcHandle.Init.SynchPrediv = PREDIV_S; /* RTC_SYNCH_PREDIV; */
 8006422:	60eb      	str	r3, [r5, #12]
  RtcHandle.Init.HourFormat = RTC_HOURFORMAT_24;
 8006424:	606c      	str	r4, [r5, #4]
  RtcHandle.Init.OutPut = RTC_OUTPUT;
 8006426:	612c      	str	r4, [r5, #16]
  RtcHandle.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8006428:	61ac      	str	r4, [r5, #24]
  RtcHandle.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800642a:	61ec      	str	r4, [r5, #28]
  HAL_RTC_Init( &RtcHandle );
 800642c:	f7fe fca6 	bl	8004d7c <HAL_RTC_Init>
  RTC_DateStruct.Year = 0;
 8006430:	466b      	mov	r3, sp
  HAL_RTC_SetDate(&RtcHandle , &RTC_DateStruct, RTC_FORMAT_BIN);
 8006432:	4669      	mov	r1, sp
 8006434:	0022      	movs	r2, r4
 8006436:	0028      	movs	r0, r5
  RTC_DateStruct.Year = 0;
 8006438:	70dc      	strb	r4, [r3, #3]
  RTC_DateStruct.Month = RTC_MONTH_JANUARY;
 800643a:	705e      	strb	r6, [r3, #1]
  RTC_DateStruct.Date = 1;
 800643c:	709e      	strb	r6, [r3, #2]
  RTC_DateStruct.WeekDay = RTC_WEEKDAY_MONDAY;
 800643e:	701e      	strb	r6, [r3, #0]
  HAL_RTC_SetDate(&RtcHandle , &RTC_DateStruct, RTC_FORMAT_BIN);
 8006440:	f7fe fd70 	bl	8004f24 <HAL_RTC_SetDate>
  RTC_TimeStruct.Hours = 0;
 8006444:	a901      	add	r1, sp, #4
  HAL_RTC_SetTime(&RtcHandle , &RTC_TimeStruct, RTC_FORMAT_BIN);
 8006446:	0022      	movs	r2, r4
 8006448:	0028      	movs	r0, r5
  RTC_TimeStruct.Hours = 0;
 800644a:	700c      	strb	r4, [r1, #0]
  RTC_TimeStruct.Minutes = 0;
 800644c:	704c      	strb	r4, [r1, #1]
  RTC_TimeStruct.Seconds = 0;
 800644e:	708c      	strb	r4, [r1, #2]
  RTC_TimeStruct.TimeFormat = 0;
 8006450:	70cc      	strb	r4, [r1, #3]
  RTC_TimeStruct.SubSeconds = 0;
 8006452:	604c      	str	r4, [r1, #4]
  RTC_TimeStruct.StoreOperation = RTC_DAYLIGHTSAVING_NONE;
 8006454:	610c      	str	r4, [r1, #16]
  RTC_TimeStruct.DayLightSaving = RTC_STOREOPERATION_RESET;
 8006456:	60cc      	str	r4, [r1, #12]
  HAL_RTC_SetTime(&RtcHandle , &RTC_TimeStruct, RTC_FORMAT_BIN);
 8006458:	f7fe fce6 	bl	8004e28 <HAL_RTC_SetTime>
  HAL_RTCEx_EnableBypassShadow(&RtcHandle);
 800645c:	0028      	movs	r0, r5
 800645e:	f7fe ff4d 	bl	80052fc <HAL_RTCEx_EnableBypassShadow>
  HAL_RTC_DeactivateAlarm(&RtcHandle, RTC_ALARM_A);
 8006462:	2180      	movs	r1, #128	; 0x80
 8006464:	0028      	movs	r0, r5
 8006466:	0049      	lsls	r1, r1, #1
 8006468:	f7fe fbf2 	bl	8004c50 <HAL_RTC_DeactivateAlarm>
    HW_RTC_SetTimerContext( );
 800646c:	f7ff ffbe 	bl	80063ec <HW_RTC_SetTimerContext>
    HW_RTC_Initalized = true;
 8006470:	703e      	strb	r6, [r7, #0]
}
 8006472:	b007      	add	sp, #28
 8006474:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006476:	46c0      	nop			; (mov r8, r8)
 8006478:	20000264 	.word	0x20000264
 800647c:	40002800 	.word	0x40002800
 8006480:	000003ff 	.word	0x000003ff

08006484 <HW_RTC_GetTimerContext>:
  return (uint32_t) RtcTimerContext.Rtc_Time;
 8006484:	4b01      	ldr	r3, [pc, #4]	; (800648c <HW_RTC_GetTimerContext+0x8>)
 8006486:	6d58      	ldr	r0, [r3, #84]	; 0x54
}
 8006488:	4770      	bx	lr
 800648a:	46c0      	nop			; (mov r8, r8)
 800648c:	20000264 	.word	0x20000264

08006490 <HW_SPI_Init>:
 * @brief Initializes the SPI object and MCU peripheral
 *
 * @param [IN] none
 */
void HW_SPI_Init( void )
{
 8006490:	b510      	push	{r4, lr}
 8006492:	b086      	sub	sp, #24
  GPIO_InitTypeDef initStruct={0};
 8006494:	2214      	movs	r2, #20
 8006496:	2100      	movs	r1, #0
 8006498:	a801      	add	r0, sp, #4
 800649a:	f000 fe0a 	bl	80070b2 <memset>
  /*##-1- Configure the SPI peripheral */
  /* Set the SPI parameters */

  hspi.Instance = SPI1;
 800649e:	4b2e      	ldr	r3, [pc, #184]	; (8006558 <HW_SPI_Init+0xc8>)
 80064a0:	482e      	ldr	r0, [pc, #184]	; (800655c <HW_SPI_Init+0xcc>)
{
  uint32_t divisor = 0;
  uint32_t SysClkTmp = SystemCoreClock;
  uint32_t baudRate;
  
  while( SysClkTmp > hz)
 80064a2:	492f      	ldr	r1, [pc, #188]	; (8006560 <HW_SPI_Init+0xd0>)
  hspi.Instance = SPI1;
 80064a4:	6003      	str	r3, [r0, #0]
  uint32_t SysClkTmp = SystemCoreClock;
 80064a6:	4b2f      	ldr	r3, [pc, #188]	; (8006564 <HW_SPI_Init+0xd4>)
 80064a8:	681a      	ldr	r2, [r3, #0]
  uint32_t divisor = 0;
 80064aa:	2300      	movs	r3, #0
  while( SysClkTmp > hz)
 80064ac:	428a      	cmp	r2, r1
 80064ae:	d903      	bls.n	80064b8 <HW_SPI_Init+0x28>
  {
    divisor++;
 80064b0:	3301      	adds	r3, #1
    SysClkTmp= ( SysClkTmp >> 1);
 80064b2:	0852      	lsrs	r2, r2, #1
    
    if (divisor >= 7)
 80064b4:	2b07      	cmp	r3, #7
 80064b6:	d1f9      	bne.n	80064ac <HW_SPI_Init+0x1c>
      break;
  }
  
  baudRate =((( divisor & 0x4 ) == 0 )? 0x0 : SPI_CR1_BR_2  )| 
 80064b8:	075a      	lsls	r2, r3, #29
            ((( divisor & 0x2 ) == 0 )? 0x0 : SPI_CR1_BR_1  )| 
 80064ba:	0799      	lsls	r1, r3, #30
  baudRate =((( divisor & 0x4 ) == 0 )? 0x0 : SPI_CR1_BR_2  )| 
 80064bc:	0fd2      	lsrs	r2, r2, #31
            ((( divisor & 0x2 ) == 0 )? 0x0 : SPI_CR1_BR_1  )| 
 80064be:	0fc9      	lsrs	r1, r1, #31
 80064c0:	0109      	lsls	r1, r1, #4
  baudRate =((( divisor & 0x4 ) == 0 )? 0x0 : SPI_CR1_BR_2  )| 
 80064c2:	0152      	lsls	r2, r2, #5
 80064c4:	430a      	orrs	r2, r1
            ((( divisor & 0x1 ) == 0 )? 0x0 : SPI_CR1_BR_0  );
 80064c6:	2101      	movs	r1, #1
 80064c8:	400b      	ands	r3, r1
 80064ca:	00db      	lsls	r3, r3, #3
  baudRate =((( divisor & 0x4 ) == 0 )? 0x0 : SPI_CR1_BR_2  )| 
 80064cc:	4313      	orrs	r3, r2
  hspi.Init.BaudRatePrescaler = SpiFrequency( 10000000 );
 80064ce:	61c3      	str	r3, [r0, #28]
  hspi.Init.Direction      = SPI_DIRECTION_2LINES;
 80064d0:	2300      	movs	r3, #0
  hspi.Init.Mode           = SPI_MODE_MASTER;
 80064d2:	2282      	movs	r2, #130	; 0x82
  hspi.Init.Direction      = SPI_DIRECTION_2LINES;
 80064d4:	6083      	str	r3, [r0, #8]
  hspi.Init.CLKPolarity    = SPI_POLARITY_LOW;
 80064d6:	6103      	str	r3, [r0, #16]
  hspi.Init.CLKPhase       = SPI_PHASE_1EDGE;
 80064d8:	6143      	str	r3, [r0, #20]
  hspi.Init.DataSize       = SPI_DATASIZE_8BIT;
 80064da:	60c3      	str	r3, [r0, #12]
  hspi.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;  
 80064dc:	6283      	str	r3, [r0, #40]	; 0x28
  hspi.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 80064de:	6203      	str	r3, [r0, #32]
  hspi.Init.TIMode         = SPI_TIMODE_DISABLE;
 80064e0:	6243      	str	r3, [r0, #36]	; 0x24
  SPI_CLK_ENABLE(); 
 80064e2:	2380      	movs	r3, #128	; 0x80
  hspi.Init.Mode           = SPI_MODE_MASTER;
 80064e4:	0052      	lsls	r2, r2, #1
 80064e6:	6042      	str	r2, [r0, #4]
  hspi.Init.NSS            = SPI_NSS_SOFT;
 80064e8:	32fc      	adds	r2, #252	; 0xfc
 80064ea:	6182      	str	r2, [r0, #24]
  SPI_CLK_ENABLE(); 
 80064ec:	4a1e      	ldr	r2, [pc, #120]	; (8006568 <HW_SPI_Init+0xd8>)
 80064ee:	015b      	lsls	r3, r3, #5
 80064f0:	6b51      	ldr	r1, [r2, #52]	; 0x34
 80064f2:	430b      	orrs	r3, r1
 80064f4:	6353      	str	r3, [r2, #52]	; 0x34
  if(HAL_SPI_Init( &hspi) != HAL_OK)
 80064f6:	f7fe ff67 	bl	80053c8 <HAL_SPI_Init>
 80064fa:	2800      	cmp	r0, #0
 80064fc:	d001      	beq.n	8006502 <HW_SPI_Init+0x72>
     Error_Handler();
 80064fe:	f7ff fd37 	bl	8005f70 <Error_Handler>
  initStruct.Mode =GPIO_MODE_AF_PP;
 8006502:	2302      	movs	r3, #2
 8006504:	9302      	str	r3, [sp, #8]
  initStruct.Pull = GPIO_PULLDOWN;
 8006506:	9303      	str	r3, [sp, #12]
  initStruct.Speed = GPIO_SPEED_HIGH;
 8006508:	3301      	adds	r3, #1
 800650a:	9304      	str	r3, [sp, #16]
  initStruct.Alternate= SPI1_AF ;
 800650c:	2300      	movs	r3, #0
  HW_GPIO_Init( RADIO_SCLK_PORT, RADIO_SCLK_PIN, &initStruct); 
 800650e:	aa01      	add	r2, sp, #4
 8006510:	2108      	movs	r1, #8
 8006512:	4816      	ldr	r0, [pc, #88]	; (800656c <HW_SPI_Init+0xdc>)
  initStruct.Alternate= SPI1_AF ;
 8006514:	9305      	str	r3, [sp, #20]
  HW_GPIO_Init( RADIO_SCLK_PORT, RADIO_SCLK_PIN, &initStruct); 
 8006516:	f7ff fd4b 	bl	8005fb0 <HW_GPIO_Init>
  HW_GPIO_Init( RADIO_MISO_PORT, RADIO_MISO_PIN, &initStruct); 
 800651a:	20a0      	movs	r0, #160	; 0xa0
 800651c:	aa01      	add	r2, sp, #4
 800651e:	2140      	movs	r1, #64	; 0x40
 8006520:	05c0      	lsls	r0, r0, #23
 8006522:	f7ff fd45 	bl	8005fb0 <HW_GPIO_Init>
  HW_GPIO_Init( RADIO_MOSI_PORT, RADIO_MOSI_PIN, &initStruct); 
 8006526:	20a0      	movs	r0, #160	; 0xa0
 8006528:	aa01      	add	r2, sp, #4
 800652a:	2180      	movs	r1, #128	; 0x80
 800652c:	05c0      	lsls	r0, r0, #23
 800652e:	f7ff fd3f 	bl	8005fb0 <HW_GPIO_Init>
  HW_GPIO_Init(  RADIO_NSS_PORT, RADIO_NSS_PIN, &initStruct );
 8006532:	2180      	movs	r1, #128	; 0x80
 8006534:	20a0      	movs	r0, #160	; 0xa0
  initStruct.Mode =GPIO_MODE_OUTPUT_PP;
 8006536:	2401      	movs	r4, #1
  HW_GPIO_Init(  RADIO_NSS_PORT, RADIO_NSS_PIN, &initStruct );
 8006538:	aa01      	add	r2, sp, #4
 800653a:	0209      	lsls	r1, r1, #8
 800653c:	05c0      	lsls	r0, r0, #23
  initStruct.Mode =GPIO_MODE_OUTPUT_PP;
 800653e:	9402      	str	r4, [sp, #8]
  initStruct.Pull = GPIO_PULLUP;
 8006540:	9403      	str	r4, [sp, #12]
  HW_GPIO_Init(  RADIO_NSS_PORT, RADIO_NSS_PIN, &initStruct );
 8006542:	f7ff fd35 	bl	8005fb0 <HW_GPIO_Init>
  HW_GPIO_Write ( RADIO_NSS_PORT, RADIO_NSS_PIN, 1 );
 8006546:	2180      	movs	r1, #128	; 0x80
 8006548:	20a0      	movs	r0, #160	; 0xa0
 800654a:	0022      	movs	r2, r4
 800654c:	0209      	lsls	r1, r1, #8
 800654e:	05c0      	lsls	r0, r0, #23
 8006550:	f7ff fda0 	bl	8006094 <HW_GPIO_Write>
}
 8006554:	b006      	add	sp, #24
 8006556:	bd10      	pop	{r4, pc}
 8006558:	40013000 	.word	0x40013000
 800655c:	200002d8 	.word	0x200002d8
 8006560:	00989680 	.word	0x00989680
 8006564:	20000044 	.word	0x20000044
 8006568:	40021000 	.word	0x40021000
 800656c:	50000400 	.word	0x50000400

08006570 <HW_SPI_DeInit>:
{
 8006570:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006572:	b087      	sub	sp, #28
  GPIO_InitTypeDef initStruct={0};
 8006574:	2214      	movs	r2, #20
 8006576:	2100      	movs	r1, #0
 8006578:	a801      	add	r0, sp, #4
 800657a:	f000 fd9a 	bl	80070b2 <memset>
  HAL_SPI_DeInit( &hspi);
 800657e:	4822      	ldr	r0, [pc, #136]	; (8006608 <HW_SPI_DeInit+0x98>)
 8006580:	f7fe ff63 	bl	800544a <HAL_SPI_DeInit>
  __HAL_RCC_SPI1_FORCE_RESET();
 8006584:	2280      	movs	r2, #128	; 0x80
  HW_GPIO_Init ( RADIO_MOSI_PORT, RADIO_MOSI_PIN, &initStruct ); 
 8006586:	24a0      	movs	r4, #160	; 0xa0
  initStruct.Pull =GPIO_NOPULL  ; 
 8006588:	2500      	movs	r5, #0
  initStruct.Mode =GPIO_MODE_OUTPUT_PP;
 800658a:	2601      	movs	r6, #1
  __HAL_RCC_SPI1_FORCE_RESET();
 800658c:	4b1f      	ldr	r3, [pc, #124]	; (800660c <HW_SPI_DeInit+0x9c>)
 800658e:	0152      	lsls	r2, r2, #5
 8006590:	6a59      	ldr	r1, [r3, #36]	; 0x24
  HW_GPIO_Init ( RADIO_MOSI_PORT, RADIO_MOSI_PIN, &initStruct ); 
 8006592:	05e4      	lsls	r4, r4, #23
  __HAL_RCC_SPI1_FORCE_RESET();
 8006594:	430a      	orrs	r2, r1
 8006596:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_RCC_SPI1_RELEASE_RESET();
 8006598:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800659a:	491d      	ldr	r1, [pc, #116]	; (8006610 <HW_SPI_DeInit+0xa0>)
  HW_GPIO_Init ( RADIO_MOSI_PORT, RADIO_MOSI_PIN, &initStruct ); 
 800659c:	0020      	movs	r0, r4
  __HAL_RCC_SPI1_RELEASE_RESET();
 800659e:	400a      	ands	r2, r1
 80065a0:	625a      	str	r2, [r3, #36]	; 0x24
  HW_GPIO_Init ( RADIO_MOSI_PORT, RADIO_MOSI_PIN, &initStruct ); 
 80065a2:	2180      	movs	r1, #128	; 0x80
 80065a4:	aa01      	add	r2, sp, #4
  initStruct.Pull =GPIO_NOPULL  ; 
 80065a6:	9503      	str	r5, [sp, #12]
  initStruct.Mode =GPIO_MODE_OUTPUT_PP;
 80065a8:	9602      	str	r6, [sp, #8]
  HW_GPIO_Init ( RADIO_MOSI_PORT, RADIO_MOSI_PIN, &initStruct ); 
 80065aa:	f7ff fd01 	bl	8005fb0 <HW_GPIO_Init>
  HW_GPIO_Write( RADIO_MOSI_PORT, RADIO_MOSI_PIN, 0 );
 80065ae:	002a      	movs	r2, r5
 80065b0:	0020      	movs	r0, r4
 80065b2:	2180      	movs	r1, #128	; 0x80
 80065b4:	f7ff fd6e 	bl	8006094 <HW_GPIO_Write>
  initStruct.Pull =GPIO_PULLDOWN; 
 80065b8:	2302      	movs	r3, #2
  HW_GPIO_Init ( RADIO_MISO_PORT, RADIO_MISO_PIN, &initStruct ); 
 80065ba:	aa01      	add	r2, sp, #4
 80065bc:	0020      	movs	r0, r4
  HW_GPIO_Init ( RADIO_SCLK_PORT, RADIO_SCLK_PIN, &initStruct ); 
 80065be:	4f15      	ldr	r7, [pc, #84]	; (8006614 <HW_SPI_DeInit+0xa4>)
  HW_GPIO_Init ( RADIO_MISO_PORT, RADIO_MISO_PIN, &initStruct ); 
 80065c0:	2140      	movs	r1, #64	; 0x40
  initStruct.Pull =GPIO_PULLDOWN; 
 80065c2:	9303      	str	r3, [sp, #12]
  HW_GPIO_Init ( RADIO_MISO_PORT, RADIO_MISO_PIN, &initStruct ); 
 80065c4:	f7ff fcf4 	bl	8005fb0 <HW_GPIO_Init>
  HW_GPIO_Write( RADIO_MISO_PORT, RADIO_MISO_PIN, 0 );
 80065c8:	002a      	movs	r2, r5
 80065ca:	0020      	movs	r0, r4
 80065cc:	2140      	movs	r1, #64	; 0x40
 80065ce:	f7ff fd61 	bl	8006094 <HW_GPIO_Write>
  HW_GPIO_Init ( RADIO_SCLK_PORT, RADIO_SCLK_PIN, &initStruct ); 
 80065d2:	aa01      	add	r2, sp, #4
 80065d4:	0038      	movs	r0, r7
 80065d6:	2108      	movs	r1, #8
  initStruct.Pull =GPIO_NOPULL  ; 
 80065d8:	9503      	str	r5, [sp, #12]
  HW_GPIO_Init ( RADIO_SCLK_PORT, RADIO_SCLK_PIN, &initStruct ); 
 80065da:	f7ff fce9 	bl	8005fb0 <HW_GPIO_Init>
  HW_GPIO_Write(  RADIO_SCLK_PORT, RADIO_SCLK_PIN, 0 );
 80065de:	002a      	movs	r2, r5
  HW_GPIO_Init ( RADIO_NSS_PORT, RADIO_NSS_PIN , &initStruct ); 
 80065e0:	2580      	movs	r5, #128	; 0x80
  HW_GPIO_Write(  RADIO_SCLK_PORT, RADIO_SCLK_PIN, 0 );
 80065e2:	0038      	movs	r0, r7
  HW_GPIO_Init ( RADIO_NSS_PORT, RADIO_NSS_PIN , &initStruct ); 
 80065e4:	022d      	lsls	r5, r5, #8
  HW_GPIO_Write(  RADIO_SCLK_PORT, RADIO_SCLK_PIN, 0 );
 80065e6:	2108      	movs	r1, #8
 80065e8:	f7ff fd54 	bl	8006094 <HW_GPIO_Write>
  HW_GPIO_Init ( RADIO_NSS_PORT, RADIO_NSS_PIN , &initStruct ); 
 80065ec:	aa01      	add	r2, sp, #4
 80065ee:	0029      	movs	r1, r5
 80065f0:	0020      	movs	r0, r4
  initStruct.Pull =GPIO_PULLUP  ; 
 80065f2:	9603      	str	r6, [sp, #12]
  HW_GPIO_Init ( RADIO_NSS_PORT, RADIO_NSS_PIN , &initStruct ); 
 80065f4:	f7ff fcdc 	bl	8005fb0 <HW_GPIO_Init>
  HW_GPIO_Write( RADIO_NSS_PORT, RADIO_NSS_PIN , 1 );
 80065f8:	0032      	movs	r2, r6
 80065fa:	0029      	movs	r1, r5
 80065fc:	0020      	movs	r0, r4
 80065fe:	f7ff fd49 	bl	8006094 <HW_GPIO_Write>
}
 8006602:	b007      	add	sp, #28
 8006604:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006606:	46c0      	nop			; (mov r8, r8)
 8006608:	200002d8 	.word	0x200002d8
 800660c:	40021000 	.word	0x40021000
 8006610:	ffffefff 	.word	0xffffefff
 8006614:	50000400 	.word	0x50000400

08006618 <HW_SPI_InOut>:
{
 8006618:	b510      	push	{r4, lr}
 800661a:	210e      	movs	r1, #14
  HAL_SPI_TransmitReceive( &hspi, ( uint8_t * ) &txData, ( uint8_t* ) &rxData, 1, HAL_MAX_DELAY);	
 800661c:	2416      	movs	r4, #22
 800661e:	2301      	movs	r3, #1
{
 8006620:	b086      	sub	sp, #24
 8006622:	4469      	add	r1, sp
  HAL_SPI_TransmitReceive( &hspi, ( uint8_t * ) &txData, ( uint8_t* ) &rxData, 1, HAL_MAX_DELAY);	
 8006624:	446c      	add	r4, sp
 8006626:	425b      	negs	r3, r3
{
 8006628:	8008      	strh	r0, [r1, #0]
  HAL_SPI_TransmitReceive( &hspi, ( uint8_t * ) &txData, ( uint8_t* ) &rxData, 1, HAL_MAX_DELAY);	
 800662a:	0022      	movs	r2, r4
 800662c:	9300      	str	r3, [sp, #0]
 800662e:	4803      	ldr	r0, [pc, #12]	; (800663c <HW_SPI_InOut+0x24>)
 8006630:	3302      	adds	r3, #2
 8006632:	f7fe ff21 	bl	8005478 <HAL_SPI_TransmitReceive>
  return rxData;
 8006636:	8820      	ldrh	r0, [r4, #0]
}
 8006638:	b006      	add	sp, #24
 800663a:	bd10      	pop	{r4, pc}
 800663c:	200002d8 	.word	0x200002d8

08006640 <OnTxTimeout>:
    PRINTF("Acknowledgment Received is: %s \t || \t Round Trip time = %d ms \t || \t RssiValue=%d dBm \t || \t SnrValue=%d \t ||", RxBuffer, Roundtrip, rssi, snr);
}

void OnTxTimeout( void )
{
    Radio.Sleep( );
 8006640:	4b05      	ldr	r3, [pc, #20]	; (8006658 <OnTxTimeout+0x18>)
{
 8006642:	b510      	push	{r4, lr}
    Radio.Sleep( );
 8006644:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006646:	4798      	blx	r3
    State = TX_TIMEOUT;
 8006648:	2205      	movs	r2, #5
 800664a:	4b04      	ldr	r3, [pc, #16]	; (800665c <OnTxTimeout+0x1c>)
  
    PRINTF("OnTxTimeout; ReTxing \n\r");
 800664c:	4804      	ldr	r0, [pc, #16]	; (8006660 <OnTxTimeout+0x20>)
    State = TX_TIMEOUT;
 800664e:	701a      	strb	r2, [r3, #0]
    PRINTF("OnTxTimeout; ReTxing \n\r");
 8006650:	f000 fbf0 	bl	8006e34 <vcom_Send>
}
 8006654:	bd10      	pop	{r4, pc}
 8006656:	46c0      	nop			; (mov r8, r8)
 8006658:	08007cd0 	.word	0x08007cd0
 800665c:	20000330 	.word	0x20000330
 8006660:	08007e23 	.word	0x08007e23

08006664 <OnRxTimeout>:

void OnRxTimeout( void )
{
    Radio.Sleep( );
 8006664:	4b05      	ldr	r3, [pc, #20]	; (800667c <OnRxTimeout+0x18>)
{
 8006666:	b510      	push	{r4, lr}
    Radio.Sleep( );
 8006668:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800666a:	4798      	blx	r3
    State = RX_TIMEOUT;
 800666c:	2202      	movs	r2, #2
 800666e:	4b04      	ldr	r3, [pc, #16]	; (8006680 <OnRxTimeout+0x1c>)
    PRINTF("OnRxTimeout\n\r");
 8006670:	4804      	ldr	r0, [pc, #16]	; (8006684 <OnRxTimeout+0x20>)
    State = RX_TIMEOUT;
 8006672:	701a      	strb	r2, [r3, #0]
    PRINTF("OnRxTimeout\n\r");
 8006674:	f000 fbde 	bl	8006e34 <vcom_Send>
}
 8006678:	bd10      	pop	{r4, pc}
 800667a:	46c0      	nop			; (mov r8, r8)
 800667c:	08007cd0 	.word	0x08007cd0
 8006680:	20000330 	.word	0x20000330
 8006684:	08007e3b 	.word	0x08007e3b

08006688 <OnRxError>:

void OnRxError( void )
{
    Radio.Sleep( );
 8006688:	4b05      	ldr	r3, [pc, #20]	; (80066a0 <OnRxError+0x18>)
{
 800668a:	b510      	push	{r4, lr}
    Radio.Sleep( );
 800668c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800668e:	4798      	blx	r3
    State = RX_ERROR;
 8006690:	2203      	movs	r2, #3
 8006692:	4b04      	ldr	r3, [pc, #16]	; (80066a4 <OnRxError+0x1c>)
    PRINTF("OnRxError\n\r");
 8006694:	4804      	ldr	r0, [pc, #16]	; (80066a8 <OnRxError+0x20>)
    State = RX_ERROR;
 8006696:	701a      	strb	r2, [r3, #0]
    PRINTF("OnRxError\n\r");
 8006698:	f000 fbcc 	bl	8006e34 <vcom_Send>
}
 800669c:	bd10      	pop	{r4, pc}
 800669e:	46c0      	nop			; (mov r8, r8)
 80066a0:	08007cd0 	.word	0x08007cd0
 80066a4:	20000330 	.word	0x20000330
 80066a8:	08007e49 	.word	0x08007e49

080066ac <OnTxDone>:
{
 80066ac:	b510      	push	{r4, lr}
	Currenttime = TimerGetCurrentTime();
 80066ae:	f7ff fc20 	bl	8005ef2 <TimerGetCurrentTime>
    Radio.Sleep( );
 80066b2:	4b05      	ldr	r3, [pc, #20]	; (80066c8 <OnTxDone+0x1c>)
	Currenttime = TimerGetCurrentTime();
 80066b4:	4c05      	ldr	r4, [pc, #20]	; (80066cc <OnTxDone+0x20>)
    Radio.Sleep( );
 80066b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
	Currenttime = TimerGetCurrentTime();
 80066b8:	6060      	str	r0, [r4, #4]
    Radio.Sleep( );
 80066ba:	4798      	blx	r3
    State = TX;
 80066bc:	2304      	movs	r3, #4
    PRINTF("OnTxDone\n\r");
 80066be:	4804      	ldr	r0, [pc, #16]	; (80066d0 <OnTxDone+0x24>)
    State = TX;
 80066c0:	7023      	strb	r3, [r4, #0]
    PRINTF("OnTxDone\n\r");
 80066c2:	f000 fbb7 	bl	8006e34 <vcom_Send>
}
 80066c6:	bd10      	pop	{r4, pc}
 80066c8:	08007cd0 	.word	0x08007cd0
 80066cc:	20000330 	.word	0x20000330
 80066d0:	08007e55 	.word	0x08007e55

080066d4 <OnRadioTransmission>:

  TimerStart(&timerLed );
}
static void OnRadioTransmission( void )
{
	PRINTF("...Txing the %u th payload \t ||", Txcount++);
 80066d4:	4b19      	ldr	r3, [pc, #100]	; (800673c <OnRadioTransmission+0x68>)
{
 80066d6:	b570      	push	{r4, r5, r6, lr}
	PRINTF("...Txing the %u th payload \t ||", Txcount++);
 80066d8:	8819      	ldrh	r1, [r3, #0]
 80066da:	4819      	ldr	r0, [pc, #100]	; (8006740 <OnRadioTransmission+0x6c>)
 80066dc:	1c4a      	adds	r2, r1, #1
 80066de:	801a      	strh	r2, [r3, #0]
 80066e0:	f000 fba8 	bl	8006e34 <vcom_Send>
	DelayMs( 1 );
 80066e4:	2001      	movs	r0, #1
 80066e6:	f7ff faf5 	bl	8005cd4 <DelayMs>
	Radio.Send( TxBuffer, BufferSize );
 80066ea:	4d16      	ldr	r5, [pc, #88]	; (8006744 <OnRadioTransmission+0x70>)
 80066ec:	4b16      	ldr	r3, [pc, #88]	; (8006748 <OnRadioTransmission+0x74>)
 80066ee:	4817      	ldr	r0, [pc, #92]	; (800674c <OnRadioTransmission+0x78>)
 80066f0:	7819      	ldrb	r1, [r3, #0]
 80066f2:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80066f4:	4798      	blx	r3
	Currenttime = TimerGetCurrentTime();
 80066f6:	f7ff fbfc 	bl	8005ef2 <TimerGetCurrentTime>
 80066fa:	4c15      	ldr	r4, [pc, #84]	; (8006750 <OnRadioTransmission+0x7c>)
	Radio.Rx( RX_TIMEOUT_VALUE );
 80066fc:	6beb      	ldr	r3, [r5, #60]	; 0x3c
	Currenttime = TimerGetCurrentTime();
 80066fe:	6060      	str	r0, [r4, #4]
	Radio.Rx( RX_TIMEOUT_VALUE );
 8006700:	4814      	ldr	r0, [pc, #80]	; (8006754 <OnRadioTransmission+0x80>)
 8006702:	4798      	blx	r3
	// Indicate on Blue LEd that Payload has be
	TimerStop(&timerLed );
 8006704:	0020      	movs	r0, r4
 8006706:	3008      	adds	r0, #8
 8006708:	f7ff fbb6 	bl	8005e78 <TimerStop>
	    LED_Off( LED_RED1);
 800670c:	2001      	movs	r0, #1
 800670e:	f7fb fdd5 	bl	80022bc <BSP_LED_Off>
	    LED_Off( LED_RED2 ) ;
 8006712:	2003      	movs	r0, #3
 8006714:	f7fb fdd2 	bl	80022bc <BSP_LED_Off>
	    LED_Off( LED_GREEN ) ;
 8006718:	2000      	movs	r0, #0
 800671a:	f7fb fdcf 	bl	80022bc <BSP_LED_Off>
	    LED_Toggle( LED_BLUE );
 800671e:	2002      	movs	r0, #2
 8006720:	f7fb fddc 	bl	80022dc <BSP_LED_Toggle>

	PRINTF("TX Power = %d dBm \n\r",TX_OUTPUT_POWER );
 8006724:	2114      	movs	r1, #20
 8006726:	480c      	ldr	r0, [pc, #48]	; (8006758 <OnRadioTransmission+0x84>)
 8006728:	f000 fb84 	bl	8006e34 <vcom_Send>
	State = RX;
	TxState = 1;
	TimerStart(&timerRadioTx );
 800672c:	0020      	movs	r0, r4
	State = RX;
 800672e:	2301      	movs	r3, #1
	TimerStart(&timerRadioTx );
 8006730:	3020      	adds	r0, #32
	State = RX;
 8006732:	7023      	strb	r3, [r4, #0]
	TxState = 1;
 8006734:	7723      	strb	r3, [r4, #28]
	TimerStart(&timerRadioTx );
 8006736:	f7ff fb2d 	bl	8005d94 <TimerStart>
}
 800673a:	bd70      	pop	{r4, r5, r6, pc}
 800673c:	20000614 	.word	0x20000614
 8006740:	08007e60 	.word	0x08007e60
 8006744:	08007cd0 	.word	0x08007cd0
 8006748:	20000048 	.word	0x20000048
 800674c:	20000656 	.word	0x20000656
 8006750:	20000330 	.word	0x20000330
 8006754:	00002710 	.word	0x00002710
 8006758:	08007e80 	.word	0x08007e80

0800675c <OnledEvent>:
{
 800675c:	b510      	push	{r4, lr}
  LED_Toggle( LED_BLUE ) ; 
 800675e:	2002      	movs	r0, #2
 8006760:	f7fb fdbc 	bl	80022dc <BSP_LED_Toggle>
  LED_Toggle( LED_RED1 ) ; 
 8006764:	2001      	movs	r0, #1
 8006766:	f7fb fdb9 	bl	80022dc <BSP_LED_Toggle>
  LED_Toggle( LED_RED2 ) ; 
 800676a:	2003      	movs	r0, #3
 800676c:	f7fb fdb6 	bl	80022dc <BSP_LED_Toggle>
  LED_Toggle( LED_GREEN ) ;   
 8006770:	2000      	movs	r0, #0
 8006772:	f7fb fdb3 	bl	80022dc <BSP_LED_Toggle>
  TimerStart(&timerLed );
 8006776:	4802      	ldr	r0, [pc, #8]	; (8006780 <OnledEvent+0x24>)
 8006778:	3008      	adds	r0, #8
 800677a:	f7ff fb0b 	bl	8005d94 <TimerStart>
}
 800677e:	bd10      	pop	{r4, pc}
 8006780:	20000330 	.word	0x20000330

08006784 <OnRxDone>:
{
 8006784:	b5f0      	push	{r4, r5, r6, r7, lr}
	Roundtrip = TimerGetElapsedTime(Currenttime);
 8006786:	4c1d      	ldr	r4, [pc, #116]	; (80067fc <OnRxDone+0x78>)
{
 8006788:	b085      	sub	sp, #20
 800678a:	0007      	movs	r7, r0
	Roundtrip = TimerGetElapsedTime(Currenttime);
 800678c:	6860      	ldr	r0, [r4, #4]
{
 800678e:	0016      	movs	r6, r2
 8006790:	9303      	str	r3, [sp, #12]
	Roundtrip = TimerGetElapsedTime(Currenttime);
 8006792:	f7ff fbb4 	bl	8005efe <TimerGetElapsedTime>
    Radio.Sleep( );
 8006796:	4b1a      	ldr	r3, [pc, #104]	; (8006800 <OnRxDone+0x7c>)
	Roundtrip = TimerGetElapsedTime(Currenttime);
 8006798:	6360      	str	r0, [r4, #52]	; 0x34
    Radio.Sleep( );
 800679a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800679c:	4798      	blx	r3
    memcpy( RxBuffer, payload, BufferSize );
 800679e:	4d19      	ldr	r5, [pc, #100]	; (8006804 <OnRxDone+0x80>)
 80067a0:	4b19      	ldr	r3, [pc, #100]	; (8006808 <OnRxDone+0x84>)
 80067a2:	0039      	movs	r1, r7
 80067a4:	881a      	ldrh	r2, [r3, #0]
 80067a6:	0028      	movs	r0, r5
 80067a8:	f000 fc7a 	bl	80070a0 <memcpy>
    RssiValue = rssi;
 80067ac:	0023      	movs	r3, r4
    SnrValue = snr;
 80067ae:	466a      	mov	r2, sp
    RssiValue = rssi;
 80067b0:	3338      	adds	r3, #56	; 0x38
 80067b2:	701e      	strb	r6, [r3, #0]
    TimerStop(&timerLed );
 80067b4:	0020      	movs	r0, r4
    SnrValue = snr;
 80067b6:	0023      	movs	r3, r4
    State = RX;
 80067b8:	2701      	movs	r7, #1
    SnrValue = snr;
 80067ba:	7b12      	ldrb	r2, [r2, #12]
 80067bc:	3339      	adds	r3, #57	; 0x39
    TimerStop(&timerLed );
 80067be:	3008      	adds	r0, #8
    SnrValue = snr;
 80067c0:	701a      	strb	r2, [r3, #0]
    State = RX;
 80067c2:	7027      	strb	r7, [r4, #0]
    TimerStop(&timerLed );
 80067c4:	f7ff fb58 	bl	8005e78 <TimerStop>
    LED_Off( LED_BLUE);
 80067c8:	2002      	movs	r0, #2
 80067ca:	f7fb fd77 	bl	80022bc <BSP_LED_Off>
    LED_Off( LED_GREEN );
 80067ce:	2000      	movs	r0, #0
 80067d0:	f7fb fd74 	bl	80022bc <BSP_LED_Off>
    LED_Off( LED_RED1 );
 80067d4:	0038      	movs	r0, r7
 80067d6:	f7fb fd71 	bl	80022bc <BSP_LED_Off>
    LED_Toggle( LED_RED2 );
 80067da:	2003      	movs	r0, #3
 80067dc:	f7fb fd7e 	bl	80022dc <BSP_LED_Toggle>
    PRINTF("OnRxDone \t ||");
 80067e0:	480a      	ldr	r0, [pc, #40]	; (800680c <OnRxDone+0x88>)
 80067e2:	f000 fb27 	bl	8006e34 <vcom_Send>
    PRINTF("Acknowledgment Received is: %s \t || \t Round Trip time = %d ms \t || \t RssiValue=%d dBm \t || \t SnrValue=%d \t ||", RxBuffer, Roundtrip, rssi, snr);
 80067e6:	9b03      	ldr	r3, [sp, #12]
 80067e8:	0029      	movs	r1, r5
 80067ea:	9300      	str	r3, [sp, #0]
 80067ec:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80067ee:	0033      	movs	r3, r6
 80067f0:	4807      	ldr	r0, [pc, #28]	; (8006810 <OnRxDone+0x8c>)
 80067f2:	f000 fb1f 	bl	8006e34 <vcom_Send>
}
 80067f6:	b005      	add	sp, #20
 80067f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80067fa:	46c0      	nop			; (mov r8, r8)
 80067fc:	20000330 	.word	0x20000330
 8006800:	08007cd0 	.word	0x08007cd0
 8006804:	20000616 	.word	0x20000616
 8006808:	20000048 	.word	0x20000048
 800680c:	08007e95 	.word	0x08007e95
 8006810:	08007ea3 	.word	0x08007ea3

08006814 <My_Strcat>:

int My_Strcat(uint8_t * Destination_ptr, uint8_t * Source_ptr)
{
 8006814:	b510      	push	{r4, lr}
  (*Destination_ptr)? My_Strcat(++Destination_ptr, Source_ptr): (*Destination_ptr++ = *Source_ptr++)&&My_Strcat(Destination_ptr, Source_ptr);
 8006816:	7803      	ldrb	r3, [r0, #0]
 8006818:	2b00      	cmp	r3, #0
 800681a:	d004      	beq.n	8006826 <My_Strcat+0x12>
 800681c:	3001      	adds	r0, #1
 800681e:	f7ff fff9 	bl	8006814 <My_Strcat>
  return 0;
}
 8006822:	2000      	movs	r0, #0
 8006824:	bd10      	pop	{r4, pc}
  (*Destination_ptr)? My_Strcat(++Destination_ptr, Source_ptr): (*Destination_ptr++ = *Source_ptr++)&&My_Strcat(Destination_ptr, Source_ptr);
 8006826:	780b      	ldrb	r3, [r1, #0]
 8006828:	7003      	strb	r3, [r0, #0]
 800682a:	2b00      	cmp	r3, #0
 800682c:	d0f9      	beq.n	8006822 <My_Strcat+0xe>
 800682e:	3101      	adds	r1, #1
 8006830:	e7f4      	b.n	800681c <My_Strcat+0x8>
	...

08006834 <Push_Button_Init>:
void Push_Button_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
	GPIO_InitTypeDef GPIO_InitStruct;

	/* Enable the BUTTON Clock */
	BUTTONx_GPIO_CLK_ENABLE(Button);
 8006834:	2302      	movs	r3, #2
{
 8006836:	b530      	push	{r4, r5, lr}
	BUTTONx_GPIO_CLK_ENABLE(Button);
 8006838:	4c20      	ldr	r4, [pc, #128]	; (80068bc <Push_Button_Init+0x88>)
{
 800683a:	b087      	sub	sp, #28
	BUTTONx_GPIO_CLK_ENABLE(Button);
 800683c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
{
 800683e:	000d      	movs	r5, r1
	BUTTONx_GPIO_CLK_ENABLE(Button);
 8006840:	431a      	orrs	r2, r3
 8006842:	62e2      	str	r2, [r4, #44]	; 0x2c
 8006844:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8006846:	401a      	ands	r2, r3
 8006848:	9200      	str	r2, [sp, #0]
 800684a:	9a00      	ldr	r2, [sp, #0]
	__HAL_RCC_SYSCFG_CLK_ENABLE();
 800684c:	2201      	movs	r2, #1
 800684e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006850:	430a      	orrs	r2, r1
 8006852:	6362      	str	r2, [r4, #52]	; 0x34

	if(ButtonMode == BUTTON_MODE_GPIO)
 8006854:	2d00      	cmp	r5, #0
 8006856:	d10b      	bne.n	8006870 <Push_Button_Init+0x3c>
	{
	 /* Configure Button pin as input */
	 GPIO_InitStruct.Pin = KEY_BUTTON_PIN;
 8006858:	2204      	movs	r2, #4
	 GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	 GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800685a:	9303      	str	r3, [sp, #12]
	 GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
	 HAL_GPIO_Init(KEY_BUTTON_GPIO_PORT, &GPIO_InitStruct);
 800685c:	a901      	add	r1, sp, #4
	 GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800685e:	3301      	adds	r3, #1
	 HAL_GPIO_Init(KEY_BUTTON_GPIO_PORT, &GPIO_InitStruct);
 8006860:	4817      	ldr	r0, [pc, #92]	; (80068c0 <Push_Button_Init+0x8c>)
	 GPIO_InitStruct.Pin = KEY_BUTTON_PIN;
 8006862:	9201      	str	r2, [sp, #4]
	 GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006864:	9502      	str	r5, [sp, #8]
	 GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006866:	9304      	str	r3, [sp, #16]
	 HAL_GPIO_Init(KEY_BUTTON_GPIO_PORT, &GPIO_InitStruct);
 8006868:	f7fd fb36 	bl	8003ed8 <HAL_GPIO_Init>

	 /* Enable and set Button EXTI Interrupt to the lowest priority */
	 NVIC_SetPriority((IRQn_Type)(KEY_BUTTON_EXTI_IRQn), 0x03);
	 HAL_NVIC_EnableIRQ((IRQn_Type)(KEY_BUTTON_EXTI_IRQn));
	 }
}
 800686c:	b007      	add	sp, #28
 800686e:	bd30      	pop	{r4, r5, pc}
	if(ButtonMode == BUTTON_MODE_EXTI)
 8006870:	2d01      	cmp	r5, #1
 8006872:	d1fb      	bne.n	800686c <Push_Button_Init+0x38>
	 GPIO_InitStruct.Pin = KEY_BUTTON_EXTI_LINE;
 8006874:	2204      	movs	r2, #4
	 GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8006876:	9303      	str	r3, [sp, #12]
	 GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8006878:	4b12      	ldr	r3, [pc, #72]	; (80068c4 <Push_Button_Init+0x90>)
	 HAL_GPIO_Init(KEY_BUTTON_GPIO_PORT, &GPIO_InitStruct);
 800687a:	a901      	add	r1, sp, #4
 800687c:	4810      	ldr	r0, [pc, #64]	; (80068c0 <Push_Button_Init+0x8c>)
	 GPIO_InitStruct.Pin = KEY_BUTTON_EXTI_LINE;
 800687e:	9201      	str	r2, [sp, #4]
	 GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8006880:	9302      	str	r3, [sp, #8]
	 HAL_GPIO_Init(KEY_BUTTON_GPIO_PORT, &GPIO_InitStruct);
 8006882:	f7fd fb29 	bl	8003ed8 <HAL_GPIO_Init>
	 RCC-> APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8006886:	6b63      	ldr	r3, [r4, #52]	; 0x34
	 SYSCFG -> EXTICR[0] &= ~SYSCFG_EXTICR1_EXTI2;
 8006888:	490f      	ldr	r1, [pc, #60]	; (80068c8 <Push_Button_Init+0x94>)
	 RCC-> APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 800688a:	431d      	orrs	r5, r3
	 SYSCFG -> EXTICR[0] &= ~SYSCFG_EXTICR1_EXTI2;
 800688c:	4b0f      	ldr	r3, [pc, #60]	; (80068cc <Push_Button_Init+0x98>)
	 RCC-> APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 800688e:	6365      	str	r5, [r4, #52]	; 0x34
	 SYSCFG -> EXTICR[0] &= ~SYSCFG_EXTICR1_EXTI2;
 8006890:	689a      	ldr	r2, [r3, #8]
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8006892:	480f      	ldr	r0, [pc, #60]	; (80068d0 <Push_Button_Init+0x9c>)
 8006894:	400a      	ands	r2, r1
 8006896:	609a      	str	r2, [r3, #8]
	 SYSCFG -> EXTICR[0] |= SYSCFG_EXTICR1_EXTI2_PB;
 8006898:	2280      	movs	r2, #128	; 0x80
 800689a:	6899      	ldr	r1, [r3, #8]
 800689c:	0052      	lsls	r2, r2, #1
 800689e:	430a      	orrs	r2, r1
 80068a0:	21c1      	movs	r1, #193	; 0xc1
 80068a2:	609a      	str	r2, [r3, #8]
 80068a4:	0089      	lsls	r1, r1, #2
 80068a6:	5843      	ldr	r3, [r0, r1]
 80068a8:	4a0a      	ldr	r2, [pc, #40]	; (80068d4 <Push_Button_Init+0xa0>)
 80068aa:	401a      	ands	r2, r3
 80068ac:	23c0      	movs	r3, #192	; 0xc0
 80068ae:	041b      	lsls	r3, r3, #16
 80068b0:	4313      	orrs	r3, r2
 80068b2:	5043      	str	r3, [r0, r1]
	 HAL_NVIC_EnableIRQ((IRQn_Type)(KEY_BUTTON_EXTI_IRQn));
 80068b4:	2006      	movs	r0, #6
 80068b6:	f7fd fae3 	bl	8003e80 <HAL_NVIC_EnableIRQ>
}
 80068ba:	e7d7      	b.n	800686c <Push_Button_Init+0x38>
 80068bc:	40021000 	.word	0x40021000
 80068c0:	50000400 	.word	0x50000400
 80068c4:	10210000 	.word	0x10210000
 80068c8:	fffff0ff 	.word	0xfffff0ff
 80068cc:	40010000 	.word	0x40010000
 80068d0:	e000e100 	.word	0xe000e100
 80068d4:	ff00ffff 	.word	0xff00ffff

080068d8 <main>:
{
 80068d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80068da:	b08d      	sub	sp, #52	; 0x34
  HAL_Init( );
 80068dc:	f7fd f994 	bl	8003c08 <HAL_Init>
  SystemClock_Config( );
 80068e0:	f000 f94e 	bl	8006b80 <SystemClock_Config>
  DBG_Init( );
 80068e4:	f7ff fb20 	bl	8005f28 <DBG_Init>
  HW_Init( );
 80068e8:	f000 f9cc 	bl	8006c84 <HW_Init>
  Push_Button_Init(BUTTON_KEY, BUTTON_MODE_EXTI);
 80068ec:	2101      	movs	r1, #1
 80068ee:	2000      	movs	r0, #0
 80068f0:	f7ff ffa0 	bl	8006834 <Push_Button_Init>
  TimerInit(&timerLed, OnledEvent);   
 80068f4:	4d42      	ldr	r5, [pc, #264]	; (8006a00 <main+0x128>)
 80068f6:	4943      	ldr	r1, [pc, #268]	; (8006a04 <main+0x12c>)
 80068f8:	002c      	movs	r4, r5
 80068fa:	3408      	adds	r4, #8
 80068fc:	0020      	movs	r0, r4
 80068fe:	f7ff fa41 	bl	8005d84 <TimerInit>
  TimerSetValue( &timerLed, LED_PERIOD_MS);
 8006902:	21c8      	movs	r1, #200	; 0xc8
 8006904:	0020      	movs	r0, r4
 8006906:	f7ff fae3 	bl	8005ed0 <TimerSetValue>
  TimerStart(&timerLed );
 800690a:	0020      	movs	r0, r4
  TimerInit(&timerRadioTx, OnRadioTransmission);
 800690c:	002c      	movs	r4, r5
 800690e:	3420      	adds	r4, #32
  TimerStart(&timerLed );
 8006910:	f7ff fa40 	bl	8005d94 <TimerStart>
  TimerInit(&timerRadioTx, OnRadioTransmission);
 8006914:	0020      	movs	r0, r4
 8006916:	493c      	ldr	r1, [pc, #240]	; (8006a08 <main+0x130>)
 8006918:	f7ff fa34 	bl	8005d84 <TimerInit>
  TimerSetValue( &timerRadioTx, RADIO_TX_PERIOD_MS);
 800691c:	493b      	ldr	r1, [pc, #236]	; (8006a0c <main+0x134>)
 800691e:	0020      	movs	r0, r4
 8006920:	f7ff fad6 	bl	8005ed0 <TimerSetValue>
  Radio.Init( &RadioEvents );
 8006924:	0028      	movs	r0, r5
  RadioEvents.TxDone = OnTxDone;
 8006926:	4b3a      	ldr	r3, [pc, #232]	; (8006a10 <main+0x138>)
  Radio.Init( &RadioEvents );
 8006928:	4e3a      	ldr	r6, [pc, #232]	; (8006a14 <main+0x13c>)
  RadioEvents.TxDone = OnTxDone;
 800692a:	63eb      	str	r3, [r5, #60]	; 0x3c
  RadioEvents.RxDone = OnRxDone;
 800692c:	4b3a      	ldr	r3, [pc, #232]	; (8006a18 <main+0x140>)
  Radio.Init( &RadioEvents );
 800692e:	303c      	adds	r0, #60	; 0x3c
  RadioEvents.RxDone = OnRxDone;
 8006930:	646b      	str	r3, [r5, #68]	; 0x44
  RadioEvents.TxTimeout = OnTxTimeout;
 8006932:	4b3a      	ldr	r3, [pc, #232]	; (8006a1c <main+0x144>)
  Radio.SetTxConfig( MODEM_LORA, TX_OUTPUT_POWER, 0, LORA_BANDWIDTH,
 8006934:	2400      	movs	r4, #0
  RadioEvents.TxTimeout = OnTxTimeout;
 8006936:	642b      	str	r3, [r5, #64]	; 0x40
  RadioEvents.RxTimeout = OnRxTimeout;
 8006938:	4b39      	ldr	r3, [pc, #228]	; (8006a20 <main+0x148>)
 800693a:	64ab      	str	r3, [r5, #72]	; 0x48
  RadioEvents.RxError = OnRxError;
 800693c:	4b39      	ldr	r3, [pc, #228]	; (8006a24 <main+0x14c>)
 800693e:	64eb      	str	r3, [r5, #76]	; 0x4c
  Radio.Init( &RadioEvents );
 8006940:	68b3      	ldr	r3, [r6, #8]
 8006942:	930b      	str	r3, [sp, #44]	; 0x2c
 8006944:	4798      	blx	r3
  Radio.SetChannel( RF_FREQUENCY );
 8006946:	6973      	ldr	r3, [r6, #20]
 8006948:	4837      	ldr	r0, [pc, #220]	; (8006a28 <main+0x150>)
 800694a:	930b      	str	r3, [sp, #44]	; 0x2c
 800694c:	4798      	blx	r3
  Radio.SetTxConfig( MODEM_LORA, TX_OUTPUT_POWER, 0, LORA_BANDWIDTH,
 800694e:	4b37      	ldr	r3, [pc, #220]	; (8006a2c <main+0x154>)
 8006950:	0022      	movs	r2, r4
 8006952:	9308      	str	r3, [sp, #32]
 8006954:	2301      	movs	r3, #1
 8006956:	9304      	str	r3, [sp, #16]
 8006958:	3307      	adds	r3, #7
 800695a:	9302      	str	r3, [sp, #8]
 800695c:	3b07      	subs	r3, #7
 800695e:	9301      	str	r3, [sp, #4]
 8006960:	330b      	adds	r3, #11
 8006962:	9300      	str	r3, [sp, #0]
 8006964:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8006966:	2114      	movs	r1, #20
 8006968:	930b      	str	r3, [sp, #44]	; 0x2c
 800696a:	2001      	movs	r0, #1
 800696c:	0023      	movs	r3, r4
 800696e:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8006970:	9407      	str	r4, [sp, #28]
 8006972:	9406      	str	r4, [sp, #24]
 8006974:	9405      	str	r4, [sp, #20]
 8006976:	9403      	str	r4, [sp, #12]
 8006978:	47b8      	blx	r7
  Radio.SetRxConfig( MODEM_LORA, LORA_BANDWIDTH, LORA_SPREADING_FACTOR,
 800697a:	2301      	movs	r3, #1
 800697c:	9309      	str	r3, [sp, #36]	; 0x24
 800697e:	9305      	str	r3, [sp, #20]
 8006980:	3304      	adds	r3, #4
 8006982:	9302      	str	r3, [sp, #8]
 8006984:	3303      	adds	r3, #3
 8006986:	9301      	str	r3, [sp, #4]
 8006988:	6a33      	ldr	r3, [r6, #32]
 800698a:	0021      	movs	r1, r4
 800698c:	930b      	str	r3, [sp, #44]	; 0x2c
 800698e:	2301      	movs	r3, #1
 8006990:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8006992:	0018      	movs	r0, r3
 8006994:	9408      	str	r4, [sp, #32]
 8006996:	9407      	str	r4, [sp, #28]
 8006998:	9406      	str	r4, [sp, #24]
 800699a:	9404      	str	r4, [sp, #16]
 800699c:	9403      	str	r4, [sp, #12]
 800699e:	9400      	str	r4, [sp, #0]
 80069a0:	220c      	movs	r2, #12
 80069a2:	47b8      	blx	r7
  My_Strcat(pt1, qt1);
 80069a4:	4f22      	ldr	r7, [pc, #136]	; (8006a30 <main+0x158>)
 80069a6:	6879      	ldr	r1, [r7, #4]
 80069a8:	68b8      	ldr	r0, [r7, #8]
 80069aa:	f7ff ff33 	bl	8006814 <My_Strcat>
  	My_Strcat(pt1, Data[i]);
 80069ae:	003b      	movs	r3, r7
 80069b0:	330c      	adds	r3, #12
 80069b2:	58e1      	ldr	r1, [r4, r3]
 80069b4:	68b8      	ldr	r0, [r7, #8]
 80069b6:	3404      	adds	r4, #4
 80069b8:	f7ff ff2c 	bl	8006814 <My_Strcat>
  for(i = 0; i < (sizeof(Data)/sizeof(Data[0])); i++ )
 80069bc:	2c28      	cmp	r4, #40	; 0x28
 80069be:	d1f6      	bne.n	80069ae <main+0xd6>
  My_Strcat(pt1, qt3);
 80069c0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80069c2:	68b8      	ldr	r0, [r7, #8]
 80069c4:	f7ff ff26 	bl	8006814 <My_Strcat>
  uint8_t PB_Previous_State = HAL_GPIO_ReadPin(KEY_BUTTON_GPIO_PORT, KEY_BUTTON_EXTI_LINE);
 80069c8:	2104      	movs	r1, #4
 80069ca:	481a      	ldr	r0, [pc, #104]	; (8006a34 <main+0x15c>)
 80069cc:	f7fd fb40 	bl	8004050 <HAL_GPIO_ReadPin>
	  switch( State )
 80069d0:	7828      	ldrb	r0, [r5, #0]
 80069d2:	3801      	subs	r0, #1
 80069d4:	2804      	cmp	r0, #4
 80069d6:	d80a      	bhi.n	80069ee <main+0x116>
	  		 Radio.Rx( RX_TIMEOUT_VALUE );
 80069d8:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
 80069da:	930b      	str	r3, [sp, #44]	; 0x2c
	  switch( State )
 80069dc:	f7f9 fb94 	bl	8000108 <__gnu_thumb1_case_uqi>
 80069e0:	03030303 	.word	0x03030303
 80069e4:	03          	.byte	0x03
 80069e5:	00          	.byte	0x00
	  		 Radio.Rx( RX_TIMEOUT_VALUE );
 80069e6:	4814      	ldr	r0, [pc, #80]	; (8006a38 <main+0x160>)
 80069e8:	4798      	blx	r3
	  		 State = LOWPOWER;
 80069ea:	2300      	movs	r3, #0
 80069ec:	702b      	strb	r3, [r5, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80069ee:	b672      	cpsid	i
	  if (State == LOWPOWER)
 80069f0:	782b      	ldrb	r3, [r5, #0]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d101      	bne.n	80069fa <main+0x122>
	  		      LowPower_Handler( );
 80069f6:	f7ff f98f 	bl	8005d18 <LowPower_Handler>
  __ASM volatile ("cpsie i" : : : "memory");
 80069fa:	b662      	cpsie	i
 80069fc:	e7e8      	b.n	80069d0 <main+0xf8>
 80069fe:	46c0      	nop			; (mov r8, r8)
 8006a00:	20000330 	.word	0x20000330
 8006a04:	0800675d 	.word	0x0800675d
 8006a08:	080066d5 	.word	0x080066d5
 8006a0c:	00001388 	.word	0x00001388
 8006a10:	080066ad 	.word	0x080066ad
 8006a14:	08007cd0 	.word	0x08007cd0
 8006a18:	08006785 	.word	0x08006785
 8006a1c:	08006641 	.word	0x08006641
 8006a20:	08006665 	.word	0x08006665
 8006a24:	08006689 	.word	0x08006689
 8006a28:	33bca100 	.word	0x33bca100
 8006a2c:	002dc6c0 	.word	0x002dc6c0
 8006a30:	20000048 	.word	0x20000048
 8006a34:	50000400 	.word	0x50000400
 8006a38:	00002710 	.word	0x00002710

08006a3c <EXTI2_3_IRQHandler>:

void EXTI2_3_IRQHandler(void)
{
	/* EXTI line interrupt detected */
	if((EXTI -> PR & EXTI_PR_PIF2) != RESET)
 8006a3c:	2304      	movs	r3, #4
{
 8006a3e:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if((EXTI -> PR & EXTI_PR_PIF2) != RESET)
 8006a40:	4a15      	ldr	r2, [pc, #84]	; (8006a98 <EXTI2_3_IRQHandler+0x5c>)
 8006a42:	6951      	ldr	r1, [r2, #20]
 8006a44:	4219      	tst	r1, r3
 8006a46:	d017      	beq.n	8006a78 <EXTI2_3_IRQHandler+0x3c>
	{
	  EXTI -> PR |= EXTI_PR_PIF2;
 8006a48:	6951      	ldr	r1, [r2, #20]
 8006a4a:	4c14      	ldr	r4, [pc, #80]	; (8006a9c <EXTI2_3_IRQHandler+0x60>)
 8006a4c:	430b      	orrs	r3, r1
 8006a4e:	6153      	str	r3, [r2, #20]

	  if(TxState == 0)
 8006a50:	4b13      	ldr	r3, [pc, #76]	; (8006aa0 <EXTI2_3_IRQHandler+0x64>)
 8006a52:	0018      	movs	r0, r3
 8006a54:	001d      	movs	r5, r3
 8006a56:	7f1a      	ldrb	r2, [r3, #28]
 8006a58:	3020      	adds	r0, #32
 8006a5a:	3508      	adds	r5, #8
 8006a5c:	2a00      	cmp	r2, #0
 8006a5e:	d10c      	bne.n	8006a7a <EXTI2_3_IRQHandler+0x3e>
	  {
		  /* Starting Tx timers */
		  TimerStart(&timerRadioTx );
 8006a60:	f7ff f998 	bl	8005d94 <TimerStart>
		  PRINTF("Tx Timer Started !!!!!\n\r");
 8006a64:	480f      	ldr	r0, [pc, #60]	; (8006aa4 <EXTI2_3_IRQHandler+0x68>)
 8006a66:	f000 f9e5 	bl	8006e34 <vcom_Send>
		  TimerStop(&timerLed );
 8006a6a:	0028      	movs	r0, r5
 8006a6c:	f7ff fa04 	bl	8005e78 <TimerStop>
		  Radio.Rx( RX_TIMEOUT_VALUE );
 8006a70:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006a72:	480d      	ldr	r0, [pc, #52]	; (8006aa8 <EXTI2_3_IRQHandler+0x6c>)
 8006a74:	9301      	str	r3, [sp, #4]
 8006a76:	4798      	blx	r3
		  PRINTF("Tx Timer Stopped !!!!!\n\r");
		  TimerStart(&timerLed );
		  Radio.Sleep();
	  }
	}
}
 8006a78:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
		  TxState = 0;
 8006a7a:	2200      	movs	r2, #0
 8006a7c:	771a      	strb	r2, [r3, #28]
		  TimerStop(&timerRadioTx );
 8006a7e:	f7ff f9fb 	bl	8005e78 <TimerStop>
		  PRINTF("Tx Timer Stopped !!!!!\n\r");
 8006a82:	480a      	ldr	r0, [pc, #40]	; (8006aac <EXTI2_3_IRQHandler+0x70>)
 8006a84:	f000 f9d6 	bl	8006e34 <vcom_Send>
		  TimerStart(&timerLed );
 8006a88:	0028      	movs	r0, r5
 8006a8a:	f7ff f983 	bl	8005d94 <TimerStart>
		  Radio.Sleep();
 8006a8e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006a90:	9301      	str	r3, [sp, #4]
 8006a92:	4798      	blx	r3
}
 8006a94:	e7f0      	b.n	8006a78 <EXTI2_3_IRQHandler+0x3c>
 8006a96:	46c0      	nop			; (mov r8, r8)
 8006a98:	40010400 	.word	0x40010400
 8006a9c:	08007cd0 	.word	0x08007cd0
 8006aa0:	20000330 	.word	0x20000330
 8006aa4:	08007f11 	.word	0x08007f11
 8006aa8:	00002710 	.word	0x00002710
 8006aac:	08007f2a 	.word	0x08007f2a

08006ab0 <HAL_InitTick>:
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
   /* Return function status */
  return HAL_OK;
}
 8006ab0:	2000      	movs	r0, #0
 8006ab2:	4770      	bx	lr

08006ab4 <HAL_MspInit>:
/**
  * @brief  Initializes the MSP.
  * @retval None
  */
void HAL_MspInit(void)
{
 8006ab4:	b510      	push	{r4, lr}
  /* Disable the Power Voltage Detector */
  HAL_PWR_DisablePVD( ); 
 8006ab6:	f7fd fae7 	bl	8004088 <HAL_PWR_DisablePVD>

  /* Enables the Ultra Low Power mode */
  HAL_PWREx_EnableUltraLowPower( );
 8006aba:	f7fd fb2b 	bl	8004114 <HAL_PWREx_EnableUltraLowPower>
  
  __HAL_FLASH_SLEEP_POWERDOWN_ENABLE();
 8006abe:	2308      	movs	r3, #8
 8006ac0:	4a03      	ldr	r2, [pc, #12]	; (8006ad0 <HAL_MspInit+0x1c>)
 8006ac2:	6811      	ldr	r1, [r2, #0]
 8006ac4:	430b      	orrs	r3, r1
 8006ac6:	6013      	str	r3, [r2, #0]
   */
  DBG( __HAL_FLASH_SLEEP_POWERDOWN_DISABLE(); );
  
#ifdef ENABLE_FAST_WAKEUP
  /*Enable fast wakeUp*/  
  HAL_PWREx_EnableFastWakeUp( );
 8006ac8:	f7fd fb1a 	bl	8004100 <HAL_PWREx_EnableFastWakeUp>
#else  
  HAL_PWREx_DisableFastWakeUp( );
#endif
}
 8006acc:	bd10      	pop	{r4, pc}
 8006ace:	46c0      	nop			; (mov r8, r8)
 8006ad0:	40022000 	.word	0x40022000

08006ad4 <HAL_RTC_MspInit>:
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_PeriphCLKInitTypeDef  PeriphClkInitStruct;

  /*##-1- Configue the RTC clock soucre ######################################*/
  /* -a- Enable LSE Oscillator */
  RCC_OscInitStruct.OscillatorType =  RCC_OSCILLATORTYPE_LSE;
 8006ad4:	2304      	movs	r3, #4
{
 8006ad6:	b500      	push	{lr}
 8006ad8:	b099      	sub	sp, #100	; 0x64
  RCC_OscInitStruct.OscillatorType =  RCC_OSCILLATORTYPE_LSE;
 8006ada:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8006adc:	2300      	movs	r3, #0
 8006ade:	9314      	str	r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8006ae0:	3301      	adds	r3, #1
 8006ae2:	33ff      	adds	r3, #255	; 0xff
  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006ae4:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8006ae6:	930c      	str	r3, [sp, #48]	; 0x30
  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006ae8:	f7fd fb58 	bl	800419c <HAL_RCC_OscConfig>
 8006aec:	2800      	cmp	r0, #0
 8006aee:	d001      	beq.n	8006af4 <HAL_RTC_MspInit+0x20>
  {
    Error_Handler();
 8006af0:	f7ff fa3e 	bl	8005f70 <Error_Handler>
  }

  /* -b- Select LSI as RTC clock source */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8006af4:	2320      	movs	r3, #32
 8006af6:	9301      	str	r3, [sp, #4]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8006af8:	2380      	movs	r3, #128	; 0x80
  if(HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006afa:	a801      	add	r0, sp, #4
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8006afc:	025b      	lsls	r3, r3, #9
 8006afe:	9302      	str	r3, [sp, #8]
  if(HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006b00:	f7fd fed4 	bl	80048ac <HAL_RCCEx_PeriphCLKConfig>
 8006b04:	2800      	cmp	r0, #0
 8006b06:	d001      	beq.n	8006b0c <HAL_RTC_MspInit+0x38>
  { 
    Error_Handler();
 8006b08:	f7ff fa32 	bl	8005f70 <Error_Handler>
  }

  /*##-2- Enable the RTC peripheral Clock ####################################*/
  /* Enable RTC Clock */
  __HAL_RCC_RTC_ENABLE();
 8006b0c:	2380      	movs	r3, #128	; 0x80
 8006b0e:	4a07      	ldr	r2, [pc, #28]	; (8006b2c <HAL_RTC_MspInit+0x58>)
 8006b10:	02db      	lsls	r3, r3, #11
 8006b12:	6d11      	ldr	r1, [r2, #80]	; 0x50
  
  /*##-3- Configure the NVIC for RTC Alarm ###################################*/
  HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0x0, 0);
 8006b14:	2002      	movs	r0, #2
  __HAL_RCC_RTC_ENABLE();
 8006b16:	430b      	orrs	r3, r1
 8006b18:	6513      	str	r3, [r2, #80]	; 0x50
  HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0x0, 0);
 8006b1a:	2200      	movs	r2, #0
 8006b1c:	0011      	movs	r1, r2
 8006b1e:	f7fd f97f 	bl	8003e20 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8006b22:	2002      	movs	r0, #2
 8006b24:	f7fd f9ac 	bl	8003e80 <HAL_NVIC_EnableIRQ>
}
 8006b28:	b019      	add	sp, #100	; 0x64
 8006b2a:	bd00      	pop	{pc}
 8006b2c:	40021000 	.word	0x40021000

08006b30 <HAL_RTC_AlarmAEventCallback>:
  * @brief  Alarm A callback.
  * @param  hrtc: RTC handle
  * @retval None
  */
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8006b30:	b510      	push	{r4, lr}
  TimerIrqHandler( );
 8006b32:	f7ff f967 	bl	8005e04 <TimerIrqHandler>
}
 8006b36:	bd10      	pop	{r4, pc}

08006b38 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8006b38:	b510      	push	{r4, lr}
  HW_GPIO_IrqHandler( GPIO_Pin );
 8006b3a:	f7ff fa9f 	bl	800607c <HW_GPIO_IrqHandler>
}
 8006b3e:	bd10      	pop	{r4, pc}

08006b40 <MSP_GetIRQn>:
  * @param  GPIO_Pin: Specifies the pins connected to the EXTI line.
  * @retval IRQ number
  */
IRQn_Type MSP_GetIRQn( uint16_t GPIO_Pin)
{
  switch( GPIO_Pin )
 8006b40:	3801      	subs	r0, #1
{
 8006b42:	b500      	push	{lr}
  switch( GPIO_Pin )
 8006b44:	2807      	cmp	r0, #7
 8006b46:	d807      	bhi.n	8006b58 <MSP_GetIRQn+0x18>
 8006b48:	f7f9 fade 	bl	8000108 <__gnu_thumb1_case_uqi>
 8006b4c:	04060808 	.word	0x04060808
 8006b50:	04060606 	.word	0x04060606
  {
    case GPIO_PIN_0:  
    case GPIO_PIN_1:  return EXTI0_1_IRQn;
    case GPIO_PIN_2: 
    case GPIO_PIN_3:  return EXTI2_3_IRQn;
 8006b54:	2006      	movs	r0, #6
    case GPIO_PIN_13:
    case GPIO_PIN_14:
    case GPIO_PIN_15: 
    default: return EXTI4_15_IRQn;
  }
}
 8006b56:	bd00      	pop	{pc}
    default: return EXTI4_15_IRQn;
 8006b58:	2007      	movs	r0, #7
 8006b5a:	e7fc      	b.n	8006b56 <MSP_GetIRQn+0x16>
    case GPIO_PIN_1:  return EXTI0_1_IRQn;
 8006b5c:	2005      	movs	r0, #5
 8006b5e:	e7fa      	b.n	8006b56 <MSP_GetIRQn+0x16>

08006b60 <HW_DeInit>:
  * @brief This function Deinitializes the hardware
  * @param None
  * @retval None
  */
void HW_DeInit( void )
{
 8006b60:	b510      	push	{r4, lr}
  HW_SPI_DeInit( );
 8006b62:	f7ff fd05 	bl	8006570 <HW_SPI_DeInit>
  
  Radio.IoDeInit( );
 8006b66:	4b04      	ldr	r3, [pc, #16]	; (8006b78 <HW_DeInit+0x18>)
 8006b68:	685b      	ldr	r3, [r3, #4]
 8006b6a:	4798      	blx	r3
  
  vcom_DeInit( );
 8006b6c:	f000 f95a 	bl	8006e24 <vcom_DeInit>
 
  McuInitialized = false;
 8006b70:	2200      	movs	r2, #0
 8006b72:	4b02      	ldr	r3, [pc, #8]	; (8006b7c <HW_DeInit+0x1c>)
 8006b74:	701a      	strb	r2, [r3, #0]
}
 8006b76:	bd10      	pop	{r4, pc}
 8006b78:	08007cd0 	.word	0x08007cd0
 8006b7c:	20000388 	.word	0x20000388

08006b80 <SystemClock_Config>:
  *            Flash Latency(WS)              = 1
  * @retval None
  */

void SystemClock_Config( void )
{
 8006b80:	b500      	push	{lr}
 8006b82:	b095      	sub	sp, #84	; 0x54
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8006b84:	2214      	movs	r2, #20
 8006b86:	2100      	movs	r1, #0
 8006b88:	a801      	add	r0, sp, #4
 8006b8a:	f000 fa92 	bl	80070b2 <memset>
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8006b8e:	2238      	movs	r2, #56	; 0x38
 8006b90:	2100      	movs	r1, #0
 8006b92:	a806      	add	r0, sp, #24
 8006b94:	f000 fa8d 	bl	80070b2 <memset>

  /* Enable HSE Oscillator and Activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType      = RCC_OSCILLATORTYPE_HSI;
 8006b98:	2302      	movs	r3, #2
 8006b9a:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.HSEState            = RCC_HSE_OFF;
  RCC_OscInitStruct.HSIState            = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState        = RCC_PLL_ON;
 8006b9c:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLSource       = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLMUL          = RCC_PLLMUL_6;
 8006b9e:	2380      	movs	r3, #128	; 0x80
 8006ba0:	031b      	lsls	r3, r3, #12
  RCC_OscInitStruct.HSIState            = RCC_HSI_ON;
 8006ba2:	2201      	movs	r2, #1
  RCC_OscInitStruct.PLL.PLLMUL          = RCC_PLLMUL_6;
 8006ba4:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLDIV          = RCC_PLLDIV_3;
 8006ba6:	2380      	movs	r3, #128	; 0x80
  RCC_OscInitStruct.HSIState            = RCC_HSI_ON;
 8006ba8:	9209      	str	r2, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLDIV          = RCC_PLLDIV_3;
 8006baa:	041b      	lsls	r3, r3, #16
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8006bac:	320f      	adds	r2, #15

  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006bae:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8006bb0:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLDIV          = RCC_PLLDIV_3;
 8006bb2:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006bb4:	f7fd faf2 	bl	800419c <HAL_RCC_OscConfig>
 8006bb8:	2800      	cmp	r0, #0
 8006bba:	d001      	beq.n	8006bc0 <SystemClock_Config+0x40>
  {
    Error_Handler();
 8006bbc:	f7ff f9d8 	bl	8005f70 <Error_Handler>
  }

  /* Set Voltage scale1 as MCU will run at 32MHz */
  __HAL_RCC_PWR_CLK_ENABLE();
 8006bc0:	2380      	movs	r3, #128	; 0x80
 8006bc2:	4a11      	ldr	r2, [pc, #68]	; (8006c08 <SystemClock_Config+0x88>)
 8006bc4:	055b      	lsls	r3, r3, #21
 8006bc6:	6b91      	ldr	r1, [r2, #56]	; 0x38
 8006bc8:	430b      	orrs	r3, r1
 8006bca:	6393      	str	r3, [r2, #56]	; 0x38
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8006bcc:	4b0f      	ldr	r3, [pc, #60]	; (8006c0c <SystemClock_Config+0x8c>)
 8006bce:	4910      	ldr	r1, [pc, #64]	; (8006c10 <SystemClock_Config+0x90>)
 8006bd0:	681a      	ldr	r2, [r3, #0]
 8006bd2:	4011      	ands	r1, r2
 8006bd4:	2280      	movs	r2, #128	; 0x80
 8006bd6:	0112      	lsls	r2, r2, #4
 8006bd8:	430a      	orrs	r2, r1
 8006bda:	601a      	str	r2, [r3, #0]
  
  /* Poll VOSF bit of in PWR_CSR. Wait until it is reset to 0 */
  while (__HAL_PWR_GET_FLAG(PWR_FLAG_VOS) != RESET) {};
 8006bdc:	2110      	movs	r1, #16
 8006bde:	001a      	movs	r2, r3
 8006be0:	6853      	ldr	r3, [r2, #4]
 8006be2:	400b      	ands	r3, r1
 8006be4:	d1fc      	bne.n	8006be0 <SystemClock_Config+0x60>

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2
  clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8006be6:	220f      	movs	r2, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8006be8:	2101      	movs	r1, #1
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8006bea:	9201      	str	r2, [sp, #4]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8006bec:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006bee:	3a0c      	subs	r2, #12
 8006bf0:	9202      	str	r2, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006bf2:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8006bf4:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8006bf6:	9305      	str	r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8006bf8:	f7fd fd80 	bl	80046fc <HAL_RCC_ClockConfig>
 8006bfc:	2800      	cmp	r0, #0
 8006bfe:	d001      	beq.n	8006c04 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8006c00:	f7ff f9b6 	bl	8005f70 <Error_Handler>
  }
}
 8006c04:	b015      	add	sp, #84	; 0x54
 8006c06:	bd00      	pop	{pc}
 8006c08:	40021000 	.word	0x40021000
 8006c0c:	40007000 	.word	0x40007000
 8006c10:	ffffe7ff 	.word	0xffffe7ff

08006c14 <HW_AdcInit>:
  * @brief This function initializes the ADC
  * @param none
  * @retval none
  */
void HW_AdcInit( void )
{
 8006c14:	b510      	push	{r4, lr}
  if( AdcInitialized == false )
 8006c16:	4818      	ldr	r0, [pc, #96]	; (8006c78 <HW_AdcInit+0x64>)
{
 8006c18:	b086      	sub	sp, #24
  if( AdcInitialized == false )
 8006c1a:	7844      	ldrb	r4, [r0, #1]
 8006c1c:	2c00      	cmp	r4, #0
 8006c1e:	d128      	bne.n	8006c72 <HW_AdcInit+0x5e>
  {
    AdcInitialized = true;
    GPIO_InitTypeDef initStruct;
    
    hadc.Instance  = ADC1;
 8006c20:	4a16      	ldr	r2, [pc, #88]	; (8006c7c <HW_AdcInit+0x68>)
    AdcInitialized = true;
 8006c22:	2301      	movs	r3, #1
    hadc.Instance  = ADC1;
 8006c24:	6042      	str	r2, [r0, #4]
    
    hadc.Init.OversamplingMode      = DISABLE;
  
    hadc.Init.ClockPrescaler        = ADC_CLOCK_SYNC_PCLK_DIV1;
 8006c26:	22c0      	movs	r2, #192	; 0xc0
 8006c28:	0612      	lsls	r2, r2, #24
 8006c2a:	6082      	str	r2, [r0, #8]
    hadc.Init.LowPowerAutoPowerOff  = DISABLE;
    hadc.Init.LowPowerFrequencyMode = ENABLE;
    hadc.Init.LowPowerAutoWait      = DISABLE;
    
    hadc.Init.Resolution            = ADC_RESOLUTION_12B;
    hadc.Init.SamplingTime          = ADC_SAMPLETIME_7CYCLES_5;
 8006c2c:	2202      	movs	r2, #2
    hadc.Init.LowPowerFrequencyMode = ENABLE;
 8006c2e:	63c3      	str	r3, [r0, #60]	; 0x3c
    hadc.Init.SamplingTime          = ADC_SAMPLETIME_7CYCLES_5;
 8006c30:	6402      	str	r2, [r0, #64]	; 0x40
    hadc.Init.ScanConvMode          = ADC_SCAN_DIRECTION_FORWARD;
 8006c32:	6143      	str	r3, [r0, #20]
    AdcInitialized = true;
 8006c34:	7043      	strb	r3, [r0, #1]
    hadc.Init.DiscontinuousConvMode = DISABLE;
    hadc.Init.ExternalTrigConvEdge  = ADC_EXTERNALTRIGCONVEDGE_NONE;
    hadc.Init.EOCSelection          = ADC_EOC_SINGLE_CONV;
    hadc.Init.DMAContinuousRequests = DISABLE;

    ADCCLK_ENABLE();
 8006c36:	4a12      	ldr	r2, [pc, #72]	; (8006c80 <HW_AdcInit+0x6c>)
    hadc.Init.EOCSelection          = ADC_EOC_SINGLE_CONV;
 8006c38:	3303      	adds	r3, #3
 8006c3a:	6183      	str	r3, [r0, #24]
    hadc.Init.OversamplingMode      = DISABLE;
 8006c3c:	6444      	str	r4, [r0, #68]	; 0x44
    hadc.Init.LowPowerAutoPowerOff  = DISABLE;
 8006c3e:	6204      	str	r4, [r0, #32]
    hadc.Init.LowPowerAutoWait      = DISABLE;
 8006c40:	61c4      	str	r4, [r0, #28]
    hadc.Init.Resolution            = ADC_RESOLUTION_12B;
 8006c42:	60c4      	str	r4, [r0, #12]
    hadc.Init.DataAlign             = ADC_DATAALIGN_RIGHT;
 8006c44:	6104      	str	r4, [r0, #16]
    hadc.Init.ContinuousConvMode    = DISABLE;
 8006c46:	6244      	str	r4, [r0, #36]	; 0x24
    hadc.Init.DiscontinuousConvMode = DISABLE;
 8006c48:	6284      	str	r4, [r0, #40]	; 0x28
    hadc.Init.ExternalTrigConvEdge  = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8006c4a:	6304      	str	r4, [r0, #48]	; 0x30
    hadc.Init.DMAContinuousRequests = DISABLE;
 8006c4c:	6344      	str	r4, [r0, #52]	; 0x34
    ADCCLK_ENABLE();
 8006c4e:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8006c50:	33fd      	adds	r3, #253	; 0xfd
 8006c52:	33ff      	adds	r3, #255	; 0xff
 8006c54:	430b      	orrs	r3, r1
 8006c56:	6353      	str	r3, [r2, #52]	; 0x34
    

    HAL_ADC_Init( &hadc );
 8006c58:	3004      	adds	r0, #4
 8006c5a:	f7fd f80d 	bl	8003c78 <HAL_ADC_Init>

    initStruct.Mode =GPIO_MODE_ANALOG;
    initStruct.Pull = GPIO_NOPULL;
    initStruct.Speed = GPIO_SPEED_HIGH;

    HW_GPIO_Init( BAT_LEVEL_PORT, BAT_LEVEL_PIN, &initStruct );
 8006c5e:	20a0      	movs	r0, #160	; 0xa0
    initStruct.Mode =GPIO_MODE_ANALOG;
 8006c60:	2303      	movs	r3, #3
    HW_GPIO_Init( BAT_LEVEL_PORT, BAT_LEVEL_PIN, &initStruct );
 8006c62:	aa01      	add	r2, sp, #4
 8006c64:	2110      	movs	r1, #16
 8006c66:	05c0      	lsls	r0, r0, #23
    initStruct.Mode =GPIO_MODE_ANALOG;
 8006c68:	9302      	str	r3, [sp, #8]
    initStruct.Pull = GPIO_NOPULL;
 8006c6a:	9403      	str	r4, [sp, #12]
    initStruct.Speed = GPIO_SPEED_HIGH;
 8006c6c:	9304      	str	r3, [sp, #16]
    HW_GPIO_Init( BAT_LEVEL_PORT, BAT_LEVEL_PIN, &initStruct );
 8006c6e:	f7ff f99f 	bl	8005fb0 <HW_GPIO_Init>
  }
}
 8006c72:	b006      	add	sp, #24
 8006c74:	bd10      	pop	{r4, pc}
 8006c76:	46c0      	nop			; (mov r8, r8)
 8006c78:	20000388 	.word	0x20000388
 8006c7c:	40012400 	.word	0x40012400
 8006c80:	40021000 	.word	0x40021000

08006c84 <HW_Init>:
{
 8006c84:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if( McuInitialized == false )
 8006c86:	4c0f      	ldr	r4, [pc, #60]	; (8006cc4 <HW_Init+0x40>)
 8006c88:	7825      	ldrb	r5, [r4, #0]
 8006c8a:	2d00      	cmp	r5, #0
 8006c8c:	d119      	bne.n	8006cc2 <HW_Init+0x3e>
    HW_AdcInit( );
 8006c8e:	f7ff ffc1 	bl	8006c14 <HW_AdcInit>
    Radio.IoInit( );
 8006c92:	4b0d      	ldr	r3, [pc, #52]	; (8006cc8 <HW_Init+0x44>)
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	9301      	str	r3, [sp, #4]
 8006c98:	4798      	blx	r3
    HW_SPI_Init( );
 8006c9a:	f7ff fbf9 	bl	8006490 <HW_SPI_Init>
    HW_RTC_Init( );
 8006c9e:	f7ff fbb1 	bl	8006404 <HW_RTC_Init>
    vcom_Init( );
 8006ca2:	f000 f89d 	bl	8006de0 <vcom_Init>
    BSP_LED_Init( LED1 );
 8006ca6:	0028      	movs	r0, r5
 8006ca8:	f7fb fac6 	bl	8002238 <BSP_LED_Init>
    BSP_LED_Init( LED2 );
 8006cac:	2001      	movs	r0, #1
 8006cae:	f7fb fac3 	bl	8002238 <BSP_LED_Init>
    BSP_LED_Init( LED3 );
 8006cb2:	2002      	movs	r0, #2
 8006cb4:	f7fb fac0 	bl	8002238 <BSP_LED_Init>
    BSP_LED_Init( LED4 );
 8006cb8:	2003      	movs	r0, #3
 8006cba:	f7fb fabd 	bl	8002238 <BSP_LED_Init>
    McuInitialized = true;
 8006cbe:	2301      	movs	r3, #1
 8006cc0:	7023      	strb	r3, [r4, #0]
}
 8006cc2:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
 8006cc4:	20000388 	.word	0x20000388
 8006cc8:	08007cd0 	.word	0x08007cd0

08006ccc <HW_EnterStopMode>:
  * @note ARM exists the function when waking up
  * @param none
  * @retval none
  */
void HW_EnterStopMode( void)
{
 8006ccc:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8006cce:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8006cd2:	b672      	cpsid	i
  BACKUP_PRIMASK();

  DISABLE_IRQ( );

  HW_DeInit( );
 8006cd4:	f7ff ff44 	bl	8006b60 <HW_DeInit>
  
  /*clear wake up flag*/
  SET_BIT(PWR->CR, PWR_CR_CWUF);
 8006cd8:	2304      	movs	r3, #4
 8006cda:	4a05      	ldr	r2, [pc, #20]	; (8006cf0 <HW_EnterStopMode+0x24>)
 8006cdc:	6811      	ldr	r1, [r2, #0]
 8006cde:	430b      	orrs	r3, r1
 8006ce0:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ce2:	f384 8810 	msr	PRIMASK, r4
  
  RESTORE_PRIMASK( );

  /* Enter Stop Mode */
  HAL_PWR_EnterSTOPMode ( PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI );
 8006ce6:	2101      	movs	r1, #1
 8006ce8:	0008      	movs	r0, r1
 8006cea:	f7fd f9ed 	bl	80040c8 <HAL_PWR_EnterSTOPMode>
}
 8006cee:	bd10      	pop	{r4, pc}
 8006cf0:	40007000 	.word	0x40007000

08006cf4 <HW_ExitStopMode>:
  * @note Enable the pll at 32MHz
  * @param none
  * @retval none
  */
void HW_ExitStopMode( void)
{
 8006cf4:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8006cf6:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8006cfa:	b672      	cpsid	i
  
  DISABLE_IRQ( );

  /* After wake-up from STOP reconfigure the system clock */
  /* Enable HSI */
  __HAL_RCC_HSI_ENABLE();
 8006cfc:	2201      	movs	r2, #1
 8006cfe:	4b10      	ldr	r3, [pc, #64]	; (8006d40 <HW_ExitStopMode+0x4c>)
 8006d00:	6819      	ldr	r1, [r3, #0]
 8006d02:	430a      	orrs	r2, r1
 8006d04:	601a      	str	r2, [r3, #0]

  /* Wait till HSI is ready */
  while( __HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET ) {}
 8006d06:	2204      	movs	r2, #4
 8006d08:	6819      	ldr	r1, [r3, #0]
 8006d0a:	4211      	tst	r1, r2
 8006d0c:	d0fc      	beq.n	8006d08 <HW_ExitStopMode+0x14>
  
  /* Enable PLL */
  __HAL_RCC_PLL_ENABLE();
 8006d0e:	2280      	movs	r2, #128	; 0x80
 8006d10:	6819      	ldr	r1, [r3, #0]
 8006d12:	0452      	lsls	r2, r2, #17
 8006d14:	430a      	orrs	r2, r1
 8006d16:	601a      	str	r2, [r3, #0]
  /* Wait till PLL is ready */
  while( __HAL_RCC_GET_FLAG( RCC_FLAG_PLLRDY ) == RESET ) {}
 8006d18:	2280      	movs	r2, #128	; 0x80
 8006d1a:	0492      	lsls	r2, r2, #18
 8006d1c:	6819      	ldr	r1, [r3, #0]
 8006d1e:	4211      	tst	r1, r2
 8006d20:	d0fc      	beq.n	8006d1c <HW_ExitStopMode+0x28>
  
  /* Select PLL as system clock source */
  __HAL_RCC_SYSCLK_CONFIG ( RCC_SYSCLKSOURCE_PLLCLK );
 8006d22:	2203      	movs	r2, #3
 8006d24:	68d9      	ldr	r1, [r3, #12]
 8006d26:	430a      	orrs	r2, r1
  
  /* Wait till PLL is used as system clock source */ 
  while( __HAL_RCC_GET_SYSCLK_SOURCE( ) != RCC_SYSCLKSOURCE_STATUS_PLLCLK ) {}
 8006d28:	210c      	movs	r1, #12
  __HAL_RCC_SYSCLK_CONFIG ( RCC_SYSCLKSOURCE_PLLCLK );
 8006d2a:	60da      	str	r2, [r3, #12]
  while( __HAL_RCC_GET_SYSCLK_SOURCE( ) != RCC_SYSCLKSOURCE_STATUS_PLLCLK ) {}
 8006d2c:	68da      	ldr	r2, [r3, #12]
 8006d2e:	400a      	ands	r2, r1
 8006d30:	2a0c      	cmp	r2, #12
 8006d32:	d1fb      	bne.n	8006d2c <HW_ExitStopMode+0x38>
    
  /*initilizes the peripherals*/
  HW_Init( );
 8006d34:	f7ff ffa6 	bl	8006c84 <HW_Init>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006d38:	f384 8810 	msr	PRIMASK, r4

  RESTORE_PRIMASK( );
}
 8006d3c:	bd10      	pop	{r4, pc}
 8006d3e:	46c0      	nop			; (mov r8, r8)
 8006d40:	40021000 	.word	0x40021000

08006d44 <HW_EnterSleepMode>:
  * @note ARM exits the function when waking up
  * @param none
  * @retval none
  */
void HW_EnterSleepMode( void)
{
 8006d44:	b510      	push	{r4, lr}
    HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8006d46:	2101      	movs	r1, #1
 8006d48:	2000      	movs	r0, #0
 8006d4a:	f7fd f9a5 	bl	8004098 <HAL_PWR_EnterSLEEPMode>
}
 8006d4e:	bd10      	pop	{r4, pc}

08006d50 <NMI_Handler>:
 8006d50:	4770      	bx	lr

08006d52 <HardFault_Handler>:
  __ASM volatile ("nop");
 8006d52:	46c0      	nop			; (mov r8, r8)
 8006d54:	e7fd      	b.n	8006d52 <HardFault_Handler>

08006d56 <SVC_Handler>:
 8006d56:	4770      	bx	lr

08006d58 <PendSV_Handler>:
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
}
 8006d58:	4770      	bx	lr

08006d5a <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8006d5a:	b510      	push	{r4, lr}
  HAL_IncTick();
 8006d5c:	f7fc ff64 	bl	8003c28 <HAL_IncTick>
}
 8006d60:	bd10      	pop	{r4, pc}

08006d62 <USART2_IRQHandler>:
/*void PPP_IRQHandler(void)
{
}*/

void USART2_IRQHandler( void )
{
 8006d62:	b510      	push	{r4, lr}
   vcom_Print( );
 8006d64:	f000 f8ac 	bl	8006ec0 <vcom_Print>
}
 8006d68:	bd10      	pop	{r4, pc}

08006d6a <RTC_IRQHandler>:

void RTC_IRQHandler( void )
{
 8006d6a:	b510      	push	{r4, lr}
  HW_RTC_IrqHandler ( );
 8006d6c:	f7ff fb0c 	bl	8006388 <HW_RTC_IrqHandler>
}
 8006d70:	bd10      	pop	{r4, pc}

08006d72 <EXTI0_1_IRQHandler>:

void EXTI0_1_IRQHandler( void )
{
 8006d72:	b510      	push	{r4, lr}
  HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_0 );
 8006d74:	2001      	movs	r0, #1
 8006d76:	f7fd f97b 	bl	8004070 <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_1 );
 8006d7a:	2002      	movs	r0, #2
 8006d7c:	f7fd f978 	bl	8004070 <HAL_GPIO_EXTI_IRQHandler>
}
 8006d80:	bd10      	pop	{r4, pc}

08006d82 <EXTI4_15_IRQHandler>:
//  HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_3 );
//}


void EXTI4_15_IRQHandler( void )
{
 8006d82:	b510      	push	{r4, lr}
  HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_4 );
 8006d84:	2010      	movs	r0, #16
 8006d86:	f7fd f973 	bl	8004070 <HAL_GPIO_EXTI_IRQHandler>
  
  HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_5 );
 8006d8a:	2020      	movs	r0, #32
 8006d8c:	f7fd f970 	bl	8004070 <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_6 );
 8006d90:	2040      	movs	r0, #64	; 0x40
 8006d92:	f7fd f96d 	bl	8004070 <HAL_GPIO_EXTI_IRQHandler>
  
  HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_7 );
 8006d96:	2080      	movs	r0, #128	; 0x80
 8006d98:	f7fd f96a 	bl	8004070 <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_8 );
 8006d9c:	2080      	movs	r0, #128	; 0x80
 8006d9e:	0040      	lsls	r0, r0, #1
 8006da0:	f7fd f966 	bl	8004070 <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_9 );
 8006da4:	2080      	movs	r0, #128	; 0x80
 8006da6:	0080      	lsls	r0, r0, #2
 8006da8:	f7fd f962 	bl	8004070 <HAL_GPIO_EXTI_IRQHandler>
  
  HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_10 );
 8006dac:	2080      	movs	r0, #128	; 0x80
 8006dae:	00c0      	lsls	r0, r0, #3
 8006db0:	f7fd f95e 	bl	8004070 <HAL_GPIO_EXTI_IRQHandler>
  
  HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_11 );
 8006db4:	2080      	movs	r0, #128	; 0x80
 8006db6:	0100      	lsls	r0, r0, #4
 8006db8:	f7fd f95a 	bl	8004070 <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_12 );
 8006dbc:	2080      	movs	r0, #128	; 0x80
 8006dbe:	0140      	lsls	r0, r0, #5
 8006dc0:	f7fd f956 	bl	8004070 <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_13 );
 8006dc4:	2080      	movs	r0, #128	; 0x80
 8006dc6:	0180      	lsls	r0, r0, #6
 8006dc8:	f7fd f952 	bl	8004070 <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_14 );
 8006dcc:	2080      	movs	r0, #128	; 0x80
 8006dce:	01c0      	lsls	r0, r0, #7
 8006dd0:	f7fd f94e 	bl	8004070 <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_15 );
 8006dd4:	2080      	movs	r0, #128	; 0x80
 8006dd6:	0200      	lsls	r0, r0, #8
 8006dd8:	f7fd f94a 	bl	8004070 <HAL_GPIO_EXTI_IRQHandler>
}
 8006ddc:	bd10      	pop	{r4, pc}
	...

08006de0 <vcom_Init>:
      - Word Length = 8 Bits
      - Stop Bit = One Stop bit
      - Parity = ODD parity
      - BaudRate = 921600 baud
      - Hardware flow control disabled (RTS and CTS signals) */
  UartHandle.Instance        = USARTX;
 8006de0:	480e      	ldr	r0, [pc, #56]	; (8006e1c <vcom_Init+0x3c>)
 8006de2:	4b0f      	ldr	r3, [pc, #60]	; (8006e20 <vcom_Init+0x40>)
{
 8006de4:	b510      	push	{r4, lr}
  UartHandle.Instance        = USARTX;
 8006de6:	6003      	str	r3, [r0, #0]
  
  UartHandle.Init.BaudRate   = 115200;
 8006de8:	23e1      	movs	r3, #225	; 0xe1
 8006dea:	025b      	lsls	r3, r3, #9
 8006dec:	6043      	str	r3, [r0, #4]
  UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
 8006dee:	2300      	movs	r3, #0
 8006df0:	6083      	str	r3, [r0, #8]
  UartHandle.Init.StopBits   = UART_STOPBITS_1;
 8006df2:	60c3      	str	r3, [r0, #12]
  UartHandle.Init.Parity     = UART_PARITY_NONE;
 8006df4:	6103      	str	r3, [r0, #16]
  UartHandle.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 8006df6:	6183      	str	r3, [r0, #24]
  UartHandle.Init.Mode       = UART_MODE_TX_RX;
 8006df8:	330c      	adds	r3, #12
 8006dfa:	6143      	str	r3, [r0, #20]
  
  if(HAL_UART_Init(&UartHandle) != HAL_OK)
 8006dfc:	f7fe ff34 	bl	8005c68 <HAL_UART_Init>
 8006e00:	2800      	cmp	r0, #0
 8006e02:	d001      	beq.n	8006e08 <vcom_Init+0x28>
  {
    /* Initialization Error */
    Error_Handler(); 
 8006e04:	f7ff f8b4 	bl	8005f70 <Error_Handler>
  }
  
  HAL_NVIC_SetPriority(USARTX_IRQn, 0x1, 0);
 8006e08:	2200      	movs	r2, #0
 8006e0a:	2101      	movs	r1, #1
 8006e0c:	201c      	movs	r0, #28
 8006e0e:	f7fd f807 	bl	8003e20 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USARTX_IRQn);
 8006e12:	201c      	movs	r0, #28
 8006e14:	f7fd f834 	bl	8003e80 <HAL_NVIC_EnableIRQ>
}
 8006e18:	bd10      	pop	{r4, pc}
 8006e1a:	46c0      	nop			; (mov r8, r8)
 8006e1c:	200003ec 	.word	0x200003ec
 8006e20:	40004400 	.word	0x40004400

08006e24 <vcom_DeInit>:


void vcom_DeInit(void)
{
 8006e24:	b510      	push	{r4, lr}
#if 1
  HAL_UART_DeInit(&UartHandle);
 8006e26:	4802      	ldr	r0, [pc, #8]	; (8006e30 <vcom_DeInit+0xc>)
 8006e28:	f7fe fc9e 	bl	8005768 <HAL_UART_DeInit>
#endif
}
 8006e2c:	bd10      	pop	{r4, pc}
 8006e2e:	46c0      	nop			; (mov r8, r8)
 8006e30:	200003ec 	.word	0x200003ec

08006e34 <vcom_Send>:

void vcom_Send( char *format, ... )
{
 8006e34:	b40f      	push	{r0, r1, r2, r3}
 8006e36:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006e38:	b0a5      	sub	sp, #148	; 0x94
 8006e3a:	ab2a      	add	r3, sp, #168	; 0xa8
 8006e3c:	cb02      	ldmia	r3!, {r1}
  va_list args;
  va_start(args, format);
 8006e3e:	9303      	str	r3, [sp, #12]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8006e40:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8006e44:	b672      	cpsid	i
  
  BACKUP_PRIMASK();
  DISABLE_IRQ();
  
  /*convert into string at buff[0] of length iw*/
  len = vsprintf(&tempBuff[0], format, args);
 8006e46:	9a03      	ldr	r2, [sp, #12]
 8006e48:	a804      	add	r0, sp, #16
 8006e4a:	f000 f953 	bl	80070f4 <vsiprintf>
  
  if (iw+len<BUFSIZE)
 8006e4e:	4e1b      	ldr	r6, [pc, #108]	; (8006ebc <vcom_Send+0x88>)
 8006e50:	b2c2      	uxtb	r2, r0
 8006e52:	0035      	movs	r5, r6
 8006e54:	3570      	adds	r5, #112	; 0x70
 8006e56:	882b      	ldrh	r3, [r5, #0]
  len = vsprintf(&tempBuff[0], format, args);
 8006e58:	b2c4      	uxtb	r4, r0
  if (iw+len<BUFSIZE)
 8006e5a:	189b      	adds	r3, r3, r2
 8006e5c:	3672      	adds	r6, #114	; 0x72
 8006e5e:	2bff      	cmp	r3, #255	; 0xff
 8006e60:	dc12      	bgt.n	8006e88 <vcom_Send+0x54>
  {
    memcpy( &buff[iw], &tempBuff[0], len);
 8006e62:	8828      	ldrh	r0, [r5, #0]
 8006e64:	a904      	add	r1, sp, #16
 8006e66:	1830      	adds	r0, r6, r0
 8006e68:	f000 f91a 	bl	80070a0 <memcpy>
    iw+=len;
 8006e6c:	882b      	ldrh	r3, [r5, #0]
 8006e6e:	191c      	adds	r4, r3, r4
  {
    lenTop=BUFSIZE-iw;
    memcpy( &buff[iw], &tempBuff[0], lenTop);
    len-=lenTop;
    memcpy( &buff[0], &tempBuff[lenTop], len);
    iw = len;
 8006e70:	b2a4      	uxth	r4, r4
 8006e72:	802c      	strh	r4, [r5, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e74:	f387 8810 	msr	PRIMASK, r7
  }
  RESTORE_PRIMASK();
  
  HAL_NVIC_SetPendingIRQ(USARTX_IRQn);
 8006e78:	201c      	movs	r0, #28
 8006e7a:	f7fd f80b 	bl	8003e94 <HAL_NVIC_SetPendingIRQ>
    
  va_end(args);
}
 8006e7e:	b025      	add	sp, #148	; 0x94
 8006e80:	bcf0      	pop	{r4, r5, r6, r7}
 8006e82:	bc08      	pop	{r3}
 8006e84:	b004      	add	sp, #16
 8006e86:	4718      	bx	r3
    lenTop=BUFSIZE-iw;
 8006e88:	882b      	ldrh	r3, [r5, #0]
    memcpy( &buff[iw], &tempBuff[0], lenTop);
 8006e8a:	8828      	ldrh	r0, [r5, #0]
    lenTop=BUFSIZE-iw;
 8006e8c:	b2db      	uxtb	r3, r3
 8006e8e:	4259      	negs	r1, r3
 8006e90:	9300      	str	r3, [sp, #0]
    memcpy( &buff[iw], &tempBuff[0], lenTop);
 8006e92:	b2cb      	uxtb	r3, r1
 8006e94:	001a      	movs	r2, r3
 8006e96:	a904      	add	r1, sp, #16
 8006e98:	1830      	adds	r0, r6, r0
 8006e9a:	9301      	str	r3, [sp, #4]
 8006e9c:	f000 f900 	bl	80070a0 <memcpy>
    memcpy( &buff[0], &tempBuff[lenTop], len);
 8006ea0:	aa04      	add	r2, sp, #16
 8006ea2:	4694      	mov	ip, r2
    len-=lenTop;
 8006ea4:	9b00      	ldr	r3, [sp, #0]
    memcpy( &buff[0], &tempBuff[lenTop], len);
 8006ea6:	0030      	movs	r0, r6
    len-=lenTop;
 8006ea8:	18e4      	adds	r4, r4, r3
    memcpy( &buff[0], &tempBuff[lenTop], len);
 8006eaa:	9b01      	ldr	r3, [sp, #4]
    len-=lenTop;
 8006eac:	b2e4      	uxtb	r4, r4
    memcpy( &buff[0], &tempBuff[lenTop], len);
 8006eae:	4463      	add	r3, ip
 8006eb0:	0019      	movs	r1, r3
 8006eb2:	0022      	movs	r2, r4
 8006eb4:	f000 f8f4 	bl	80070a0 <memcpy>
 8006eb8:	e7da      	b.n	8006e70 <vcom_Send+0x3c>
 8006eba:	46c0      	nop			; (mov r8, r8)
 8006ebc:	200003ec 	.word	0x200003ec

08006ec0 <vcom_Print>:

/* modifes only ir*/
void vcom_Print( void)
{
 8006ec0:	b570      	push	{r4, r5, r6, lr}
  char* CurChar;
  while( ( (iw+BUFSIZE-ir)%BUFSIZE) >0 )
 8006ec2:	4c16      	ldr	r4, [pc, #88]	; (8006f1c <vcom_Print+0x5c>)
  {
    BACKUP_PRIMASK();
    DISABLE_IRQ();
    
    CurChar = &buff[ir];
 8006ec4:	0025      	movs	r5, r4
 8006ec6:	3572      	adds	r5, #114	; 0x72
  while( ( (iw+BUFSIZE-ir)%BUFSIZE) >0 )
 8006ec8:	4815      	ldr	r0, [pc, #84]	; (8006f20 <vcom_Print+0x60>)
 8006eca:	0022      	movs	r2, r4
 8006ecc:	0003      	movs	r3, r0
 8006ece:	3370      	adds	r3, #112	; 0x70
 8006ed0:	881b      	ldrh	r3, [r3, #0]
 8006ed2:	3272      	adds	r2, #114	; 0x72
 8006ed4:	8812      	ldrh	r2, [r2, #0]
 8006ed6:	3301      	adds	r3, #1
 8006ed8:	33ff      	adds	r3, #255	; 0xff
 8006eda:	1a9b      	subs	r3, r3, r2
 8006edc:	4a11      	ldr	r2, [pc, #68]	; (8006f24 <vcom_Print+0x64>)
 8006ede:	4013      	ands	r3, r2
 8006ee0:	d503      	bpl.n	8006eea <vcom_Print+0x2a>
 8006ee2:	4a11      	ldr	r2, [pc, #68]	; (8006f28 <vcom_Print+0x68>)
 8006ee4:	3b01      	subs	r3, #1
 8006ee6:	4313      	orrs	r3, r2
 8006ee8:	3301      	adds	r3, #1
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	dc03      	bgt.n	8006ef6 <vcom_Print+0x36>
    
    RESTORE_PRIMASK();
    
    HAL_UART_Transmit(&UartHandle,(uint8_t *) CurChar, 1, 300);    
  }
  HAL_NVIC_ClearPendingIRQ(USARTX_IRQn);
 8006eee:	201c      	movs	r0, #28
 8006ef0:	f7fc ffe6 	bl	8003ec0 <HAL_NVIC_ClearPendingIRQ>
}
 8006ef4:	bd70      	pop	{r4, r5, r6, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8006ef6:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8006efa:	b672      	cpsid	i
    CurChar = &buff[ir];
 8006efc:	882e      	ldrh	r6, [r5, #0]
    ir= (ir+1) %BUFSIZE;
 8006efe:	1c72      	adds	r2, r6, #1
 8006f00:	b2d2      	uxtb	r2, r2
 8006f02:	802a      	strh	r2, [r5, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f04:	f383 8810 	msr	PRIMASK, r3
    CurChar = &buff[ir];
 8006f08:	0001      	movs	r1, r0
    HAL_UART_Transmit(&UartHandle,(uint8_t *) CurChar, 1, 300);    
 8006f0a:	2396      	movs	r3, #150	; 0x96
    CurChar = &buff[ir];
 8006f0c:	3172      	adds	r1, #114	; 0x72
 8006f0e:	1989      	adds	r1, r1, r6
    HAL_UART_Transmit(&UartHandle,(uint8_t *) CurChar, 1, 300);    
 8006f10:	005b      	lsls	r3, r3, #1
 8006f12:	2201      	movs	r2, #1
 8006f14:	f7fe fe10 	bl	8005b38 <HAL_UART_Transmit>
 8006f18:	e7d6      	b.n	8006ec8 <vcom_Print+0x8>
 8006f1a:	46c0      	nop			; (mov r8, r8)
 8006f1c:	200004ec 	.word	0x200004ec
 8006f20:	200003ec 	.word	0x200003ec
 8006f24:	800000ff 	.word	0x800000ff
 8006f28:	ffffff00 	.word	0xffffff00

08006f2c <vcom_IoInit>:
  /*##-2- Configure peripheral GPIO ##########################################*/  
  vcom_IoInit( );
}

void vcom_IoInit(void)
{
 8006f2c:	b530      	push	{r4, r5, lr}
 8006f2e:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef  GPIO_InitStruct={0};
 8006f30:	2214      	movs	r2, #20
 8006f32:	2100      	movs	r1, #0
 8006f34:	a803      	add	r0, sp, #12
 8006f36:	f000 f8bc 	bl	80070b2 <memset>
    /* Enable GPIO TX/RX clock */
  USARTX_TX_GPIO_CLK_ENABLE();
 8006f3a:	2201      	movs	r2, #1
 8006f3c:	4b12      	ldr	r3, [pc, #72]	; (8006f88 <vcom_IoInit+0x5c>)
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
  GPIO_InitStruct.Speed     = GPIO_SPEED_HIGH;
  GPIO_InitStruct.Alternate = USARTX_TX_AF;

  HAL_GPIO_Init(USARTX_TX_GPIO_PORT, &GPIO_InitStruct);
 8006f3e:	25a0      	movs	r5, #160	; 0xa0
  USARTX_TX_GPIO_CLK_ENABLE();
 8006f40:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
  GPIO_InitStruct.Pin       = USARTX_TX_PIN;
 8006f42:	2404      	movs	r4, #4
  USARTX_TX_GPIO_CLK_ENABLE();
 8006f44:	4311      	orrs	r1, r2
 8006f46:	62d9      	str	r1, [r3, #44]	; 0x2c
 8006f48:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
  HAL_GPIO_Init(USARTX_TX_GPIO_PORT, &GPIO_InitStruct);
 8006f4a:	05ed      	lsls	r5, r5, #23
  USARTX_TX_GPIO_CLK_ENABLE();
 8006f4c:	4011      	ands	r1, r2
 8006f4e:	9101      	str	r1, [sp, #4]
 8006f50:	9901      	ldr	r1, [sp, #4]
  USARTX_RX_GPIO_CLK_ENABLE();
 8006f52:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
  HAL_GPIO_Init(USARTX_TX_GPIO_PORT, &GPIO_InitStruct);
 8006f54:	0028      	movs	r0, r5
  USARTX_RX_GPIO_CLK_ENABLE();
 8006f56:	4311      	orrs	r1, r2
 8006f58:	62d9      	str	r1, [r3, #44]	; 0x2c
 8006f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  HAL_GPIO_Init(USARTX_TX_GPIO_PORT, &GPIO_InitStruct);
 8006f5c:	a903      	add	r1, sp, #12
  USARTX_RX_GPIO_CLK_ENABLE();
 8006f5e:	4013      	ands	r3, r2
 8006f60:	9302      	str	r3, [sp, #8]
 8006f62:	9b02      	ldr	r3, [sp, #8]
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8006f64:	2302      	movs	r3, #2
 8006f66:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Speed     = GPIO_SPEED_HIGH;
 8006f68:	189b      	adds	r3, r3, r2
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
 8006f6a:	9205      	str	r2, [sp, #20]
  GPIO_InitStruct.Speed     = GPIO_SPEED_HIGH;
 8006f6c:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pin       = USARTX_TX_PIN;
 8006f6e:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Alternate = USARTX_TX_AF;
 8006f70:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(USARTX_TX_GPIO_PORT, &GPIO_InitStruct);
 8006f72:	f7fc ffb1 	bl	8003ed8 <HAL_GPIO_Init>

  /* UART RX GPIO pin configuration  */
  GPIO_InitStruct.Pin = USARTX_RX_PIN;
 8006f76:	2308      	movs	r3, #8
  GPIO_InitStruct.Alternate = USARTX_RX_AF;

  HAL_GPIO_Init(USARTX_RX_GPIO_PORT, &GPIO_InitStruct);
 8006f78:	a903      	add	r1, sp, #12
 8006f7a:	0028      	movs	r0, r5
  GPIO_InitStruct.Pin = USARTX_RX_PIN;
 8006f7c:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Alternate = USARTX_RX_AF;
 8006f7e:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(USARTX_RX_GPIO_PORT, &GPIO_InitStruct);
 8006f80:	f7fc ffaa 	bl	8003ed8 <HAL_GPIO_Init>
}
 8006f84:	b009      	add	sp, #36	; 0x24
 8006f86:	bd30      	pop	{r4, r5, pc}
 8006f88:	40021000 	.word	0x40021000

08006f8c <HAL_UART_MspInit>:
  USARTX_CLK_ENABLE(); 
 8006f8c:	2380      	movs	r3, #128	; 0x80
 8006f8e:	4a04      	ldr	r2, [pc, #16]	; (8006fa0 <HAL_UART_MspInit+0x14>)
{
 8006f90:	b510      	push	{r4, lr}
  USARTX_CLK_ENABLE(); 
 8006f92:	6b91      	ldr	r1, [r2, #56]	; 0x38
 8006f94:	029b      	lsls	r3, r3, #10
 8006f96:	430b      	orrs	r3, r1
 8006f98:	6393      	str	r3, [r2, #56]	; 0x38
  vcom_IoInit( );
 8006f9a:	f7ff ffc7 	bl	8006f2c <vcom_IoInit>
}
 8006f9e:	bd10      	pop	{r4, pc}
 8006fa0:	40021000 	.word	0x40021000

08006fa4 <vcom_IoDeInit>:

void vcom_IoDeInit(void)
{
 8006fa4:	b510      	push	{r4, lr}
 8006fa6:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStructure={0};
 8006fa8:	2214      	movs	r2, #20
 8006faa:	2100      	movs	r1, #0
 8006fac:	a803      	add	r0, sp, #12
 8006fae:	f000 f880 	bl	80070b2 <memset>
  
  USARTX_TX_GPIO_CLK_ENABLE();
 8006fb2:	2201      	movs	r2, #1
 8006fb4:	4b10      	ldr	r3, [pc, #64]	; (8006ff8 <vcom_IoDeInit+0x54>)

  GPIO_InitStructure.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStructure.Pull = GPIO_NOPULL;
  
  GPIO_InitStructure.Pin =  USARTX_TX_PIN ;
  HAL_GPIO_Init(  USARTX_TX_GPIO_PORT, &GPIO_InitStructure );
 8006fb6:	24a0      	movs	r4, #160	; 0xa0
  USARTX_TX_GPIO_CLK_ENABLE();
 8006fb8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
  HAL_GPIO_Init(  USARTX_TX_GPIO_PORT, &GPIO_InitStructure );
 8006fba:	05e4      	lsls	r4, r4, #23
  USARTX_TX_GPIO_CLK_ENABLE();
 8006fbc:	4311      	orrs	r1, r2
 8006fbe:	62d9      	str	r1, [r3, #44]	; 0x2c
 8006fc0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
  HAL_GPIO_Init(  USARTX_TX_GPIO_PORT, &GPIO_InitStructure );
 8006fc2:	0020      	movs	r0, r4
  USARTX_TX_GPIO_CLK_ENABLE();
 8006fc4:	4011      	ands	r1, r2
 8006fc6:	9101      	str	r1, [sp, #4]
 8006fc8:	9901      	ldr	r1, [sp, #4]
  USARTX_RX_GPIO_CLK_ENABLE();
 8006fca:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006fcc:	4311      	orrs	r1, r2
 8006fce:	62d9      	str	r1, [r3, #44]	; 0x2c
 8006fd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  HAL_GPIO_Init(  USARTX_TX_GPIO_PORT, &GPIO_InitStructure );
 8006fd2:	a903      	add	r1, sp, #12
  USARTX_RX_GPIO_CLK_ENABLE();
 8006fd4:	401a      	ands	r2, r3
 8006fd6:	9202      	str	r2, [sp, #8]
 8006fd8:	9b02      	ldr	r3, [sp, #8]
  GPIO_InitStructure.Mode = GPIO_MODE_ANALOG;
 8006fda:	2303      	movs	r3, #3
 8006fdc:	9304      	str	r3, [sp, #16]
  GPIO_InitStructure.Pin =  USARTX_TX_PIN ;
 8006fde:	3301      	adds	r3, #1
 8006fe0:	9303      	str	r3, [sp, #12]
  HAL_GPIO_Init(  USARTX_TX_GPIO_PORT, &GPIO_InitStructure );
 8006fe2:	f7fc ff79 	bl	8003ed8 <HAL_GPIO_Init>
  
  GPIO_InitStructure.Pin =  USARTX_RX_PIN ;
 8006fe6:	2308      	movs	r3, #8
  HAL_GPIO_Init(  USARTX_RX_GPIO_PORT, &GPIO_InitStructure ); 
 8006fe8:	a903      	add	r1, sp, #12
 8006fea:	0020      	movs	r0, r4
  GPIO_InitStructure.Pin =  USARTX_RX_PIN ;
 8006fec:	9303      	str	r3, [sp, #12]
  HAL_GPIO_Init(  USARTX_RX_GPIO_PORT, &GPIO_InitStructure ); 
 8006fee:	f7fc ff73 	bl	8003ed8 <HAL_GPIO_Init>
}
 8006ff2:	b008      	add	sp, #32
 8006ff4:	bd10      	pop	{r4, pc}
 8006ff6:	46c0      	nop			; (mov r8, r8)
 8006ff8:	40021000 	.word	0x40021000

08006ffc <HAL_UART_MspDeInit>:
  * @brief UART MSP DeInit
  * @param huart: uart handle
  * @retval None
  */
void HAL_UART_MspDeInit(UART_HandleTypeDef *huart)
{
 8006ffc:	b510      	push	{r4, lr}
  vcom_IoDeInit( );
 8006ffe:	f7ff ffd1 	bl	8006fa4 <vcom_IoDeInit>
}
 8007002:	bd10      	pop	{r4, pc}

08007004 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8007004:	480d      	ldr	r0, [pc, #52]	; (800703c <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8007006:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8007008:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800700a:	e003      	b.n	8007014 <LoopCopyDataInit>

0800700c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800700c:	4b0c      	ldr	r3, [pc, #48]	; (8007040 <LoopForever+0x6>)
  ldr  r3, [r3, r1]
 800700e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8007010:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8007012:	3104      	adds	r1, #4

08007014 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 8007014:	480b      	ldr	r0, [pc, #44]	; (8007044 <LoopForever+0xa>)
  ldr  r3, =_edata
 8007016:	4b0c      	ldr	r3, [pc, #48]	; (8007048 <LoopForever+0xe>)
  adds  r2, r0, r1
 8007018:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800701a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800701c:	d3f6      	bcc.n	800700c <CopyDataInit>
  ldr  r2, =_sbss
 800701e:	4a0b      	ldr	r2, [pc, #44]	; (800704c <LoopForever+0x12>)
  b  LoopFillZerobss
 8007020:	e002      	b.n	8007028 <LoopFillZerobss>

08007022 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8007022:	2300      	movs	r3, #0
  str  r3, [r2]
 8007024:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8007026:	3204      	adds	r2, #4

08007028 <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 8007028:	4b09      	ldr	r3, [pc, #36]	; (8007050 <LoopForever+0x16>)
  cmp  r2, r3
 800702a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800702c:	d3f9      	bcc.n	8007022 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800702e:	f7fc fdbd 	bl	8003bac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8007032:	f000 f811 	bl	8007058 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8007036:	f7ff fc4f 	bl	80068d8 <main>

0800703a <LoopForever>:

LoopForever:
    b LoopForever
 800703a:	e7fe      	b.n	800703a <LoopForever>
   ldr   r0, =_estack
 800703c:	20005000 	.word	0x20005000
  ldr  r3, =_sidata
 8007040:	08007fc4 	.word	0x08007fc4
  ldr  r0, =_sdata
 8007044:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8007048:	200000f4 	.word	0x200000f4
  ldr  r2, =_sbss
 800704c:	200000f4 	.word	0x200000f4
  ldr  r3, = _ebss
 8007050:	2000069c 	.word	0x2000069c

08007054 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8007054:	e7fe      	b.n	8007054 <ADC1_COMP_IRQHandler>
	...

08007058 <__libc_init_array>:
 8007058:	b570      	push	{r4, r5, r6, lr}
 800705a:	2600      	movs	r6, #0
 800705c:	4d0c      	ldr	r5, [pc, #48]	; (8007090 <__libc_init_array+0x38>)
 800705e:	4c0d      	ldr	r4, [pc, #52]	; (8007094 <__libc_init_array+0x3c>)
 8007060:	1b64      	subs	r4, r4, r5
 8007062:	10a4      	asrs	r4, r4, #2
 8007064:	42a6      	cmp	r6, r4
 8007066:	d109      	bne.n	800707c <__libc_init_array+0x24>
 8007068:	2600      	movs	r6, #0
 800706a:	f000 fd9f 	bl	8007bac <_init>
 800706e:	4d0a      	ldr	r5, [pc, #40]	; (8007098 <__libc_init_array+0x40>)
 8007070:	4c0a      	ldr	r4, [pc, #40]	; (800709c <__libc_init_array+0x44>)
 8007072:	1b64      	subs	r4, r4, r5
 8007074:	10a4      	asrs	r4, r4, #2
 8007076:	42a6      	cmp	r6, r4
 8007078:	d105      	bne.n	8007086 <__libc_init_array+0x2e>
 800707a:	bd70      	pop	{r4, r5, r6, pc}
 800707c:	00b3      	lsls	r3, r6, #2
 800707e:	58eb      	ldr	r3, [r5, r3]
 8007080:	4798      	blx	r3
 8007082:	3601      	adds	r6, #1
 8007084:	e7ee      	b.n	8007064 <__libc_init_array+0xc>
 8007086:	00b3      	lsls	r3, r6, #2
 8007088:	58eb      	ldr	r3, [r5, r3]
 800708a:	4798      	blx	r3
 800708c:	3601      	adds	r6, #1
 800708e:	e7f2      	b.n	8007076 <__libc_init_array+0x1e>
 8007090:	08007fbc 	.word	0x08007fbc
 8007094:	08007fbc 	.word	0x08007fbc
 8007098:	08007fbc 	.word	0x08007fbc
 800709c:	08007fc0 	.word	0x08007fc0

080070a0 <memcpy>:
 80070a0:	2300      	movs	r3, #0
 80070a2:	b510      	push	{r4, lr}
 80070a4:	429a      	cmp	r2, r3
 80070a6:	d100      	bne.n	80070aa <memcpy+0xa>
 80070a8:	bd10      	pop	{r4, pc}
 80070aa:	5ccc      	ldrb	r4, [r1, r3]
 80070ac:	54c4      	strb	r4, [r0, r3]
 80070ae:	3301      	adds	r3, #1
 80070b0:	e7f8      	b.n	80070a4 <memcpy+0x4>

080070b2 <memset>:
 80070b2:	0003      	movs	r3, r0
 80070b4:	1882      	adds	r2, r0, r2
 80070b6:	4293      	cmp	r3, r2
 80070b8:	d100      	bne.n	80070bc <memset+0xa>
 80070ba:	4770      	bx	lr
 80070bc:	7019      	strb	r1, [r3, #0]
 80070be:	3301      	adds	r3, #1
 80070c0:	e7f9      	b.n	80070b6 <memset+0x4>
	...

080070c4 <_vsiprintf_r>:
 80070c4:	b530      	push	{r4, r5, lr}
 80070c6:	b09b      	sub	sp, #108	; 0x6c
 80070c8:	9100      	str	r1, [sp, #0]
 80070ca:	9104      	str	r1, [sp, #16]
 80070cc:	4908      	ldr	r1, [pc, #32]	; (80070f0 <_vsiprintf_r+0x2c>)
 80070ce:	466d      	mov	r5, sp
 80070d0:	9102      	str	r1, [sp, #8]
 80070d2:	9105      	str	r1, [sp, #20]
 80070d4:	2101      	movs	r1, #1
 80070d6:	2482      	movs	r4, #130	; 0x82
 80070d8:	4249      	negs	r1, r1
 80070da:	81e9      	strh	r1, [r5, #14]
 80070dc:	00a4      	lsls	r4, r4, #2
 80070de:	4669      	mov	r1, sp
 80070e0:	81ac      	strh	r4, [r5, #12]
 80070e2:	f000 f875 	bl	80071d0 <_svfiprintf_r>
 80070e6:	2300      	movs	r3, #0
 80070e8:	9a00      	ldr	r2, [sp, #0]
 80070ea:	7013      	strb	r3, [r2, #0]
 80070ec:	b01b      	add	sp, #108	; 0x6c
 80070ee:	bd30      	pop	{r4, r5, pc}
 80070f0:	7fffffff 	.word	0x7fffffff

080070f4 <vsiprintf>:
 80070f4:	b510      	push	{r4, lr}
 80070f6:	0013      	movs	r3, r2
 80070f8:	000a      	movs	r2, r1
 80070fa:	0001      	movs	r1, r0
 80070fc:	4802      	ldr	r0, [pc, #8]	; (8007108 <vsiprintf+0x14>)
 80070fe:	6800      	ldr	r0, [r0, #0]
 8007100:	f7ff ffe0 	bl	80070c4 <_vsiprintf_r>
 8007104:	bd10      	pop	{r4, pc}
 8007106:	46c0      	nop			; (mov r8, r8)
 8007108:	20000090 	.word	0x20000090

0800710c <__ssputs_r>:
 800710c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800710e:	688e      	ldr	r6, [r1, #8]
 8007110:	b085      	sub	sp, #20
 8007112:	0007      	movs	r7, r0
 8007114:	000c      	movs	r4, r1
 8007116:	9203      	str	r2, [sp, #12]
 8007118:	9301      	str	r3, [sp, #4]
 800711a:	429e      	cmp	r6, r3
 800711c:	d839      	bhi.n	8007192 <__ssputs_r+0x86>
 800711e:	2390      	movs	r3, #144	; 0x90
 8007120:	898a      	ldrh	r2, [r1, #12]
 8007122:	00db      	lsls	r3, r3, #3
 8007124:	421a      	tst	r2, r3
 8007126:	d034      	beq.n	8007192 <__ssputs_r+0x86>
 8007128:	2503      	movs	r5, #3
 800712a:	6909      	ldr	r1, [r1, #16]
 800712c:	6823      	ldr	r3, [r4, #0]
 800712e:	1a5b      	subs	r3, r3, r1
 8007130:	9302      	str	r3, [sp, #8]
 8007132:	6963      	ldr	r3, [r4, #20]
 8007134:	9802      	ldr	r0, [sp, #8]
 8007136:	435d      	muls	r5, r3
 8007138:	0feb      	lsrs	r3, r5, #31
 800713a:	195d      	adds	r5, r3, r5
 800713c:	9b01      	ldr	r3, [sp, #4]
 800713e:	106d      	asrs	r5, r5, #1
 8007140:	3301      	adds	r3, #1
 8007142:	181b      	adds	r3, r3, r0
 8007144:	42ab      	cmp	r3, r5
 8007146:	d900      	bls.n	800714a <__ssputs_r+0x3e>
 8007148:	001d      	movs	r5, r3
 800714a:	0553      	lsls	r3, r2, #21
 800714c:	d532      	bpl.n	80071b4 <__ssputs_r+0xa8>
 800714e:	0029      	movs	r1, r5
 8007150:	0038      	movs	r0, r7
 8007152:	f000 fb31 	bl	80077b8 <_malloc_r>
 8007156:	1e06      	subs	r6, r0, #0
 8007158:	d109      	bne.n	800716e <__ssputs_r+0x62>
 800715a:	230c      	movs	r3, #12
 800715c:	603b      	str	r3, [r7, #0]
 800715e:	2340      	movs	r3, #64	; 0x40
 8007160:	2001      	movs	r0, #1
 8007162:	89a2      	ldrh	r2, [r4, #12]
 8007164:	4240      	negs	r0, r0
 8007166:	4313      	orrs	r3, r2
 8007168:	81a3      	strh	r3, [r4, #12]
 800716a:	b005      	add	sp, #20
 800716c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800716e:	9a02      	ldr	r2, [sp, #8]
 8007170:	6921      	ldr	r1, [r4, #16]
 8007172:	f7ff ff95 	bl	80070a0 <memcpy>
 8007176:	89a3      	ldrh	r3, [r4, #12]
 8007178:	4a14      	ldr	r2, [pc, #80]	; (80071cc <__ssputs_r+0xc0>)
 800717a:	401a      	ands	r2, r3
 800717c:	2380      	movs	r3, #128	; 0x80
 800717e:	4313      	orrs	r3, r2
 8007180:	81a3      	strh	r3, [r4, #12]
 8007182:	9b02      	ldr	r3, [sp, #8]
 8007184:	6126      	str	r6, [r4, #16]
 8007186:	18f6      	adds	r6, r6, r3
 8007188:	6026      	str	r6, [r4, #0]
 800718a:	6165      	str	r5, [r4, #20]
 800718c:	9e01      	ldr	r6, [sp, #4]
 800718e:	1aed      	subs	r5, r5, r3
 8007190:	60a5      	str	r5, [r4, #8]
 8007192:	9b01      	ldr	r3, [sp, #4]
 8007194:	42b3      	cmp	r3, r6
 8007196:	d200      	bcs.n	800719a <__ssputs_r+0x8e>
 8007198:	001e      	movs	r6, r3
 800719a:	0032      	movs	r2, r6
 800719c:	9903      	ldr	r1, [sp, #12]
 800719e:	6820      	ldr	r0, [r4, #0]
 80071a0:	f000 faad 	bl	80076fe <memmove>
 80071a4:	68a3      	ldr	r3, [r4, #8]
 80071a6:	2000      	movs	r0, #0
 80071a8:	1b9b      	subs	r3, r3, r6
 80071aa:	60a3      	str	r3, [r4, #8]
 80071ac:	6823      	ldr	r3, [r4, #0]
 80071ae:	199e      	adds	r6, r3, r6
 80071b0:	6026      	str	r6, [r4, #0]
 80071b2:	e7da      	b.n	800716a <__ssputs_r+0x5e>
 80071b4:	002a      	movs	r2, r5
 80071b6:	0038      	movs	r0, r7
 80071b8:	f000 fb5c 	bl	8007874 <_realloc_r>
 80071bc:	1e06      	subs	r6, r0, #0
 80071be:	d1e0      	bne.n	8007182 <__ssputs_r+0x76>
 80071c0:	6921      	ldr	r1, [r4, #16]
 80071c2:	0038      	movs	r0, r7
 80071c4:	f000 faae 	bl	8007724 <_free_r>
 80071c8:	e7c7      	b.n	800715a <__ssputs_r+0x4e>
 80071ca:	46c0      	nop			; (mov r8, r8)
 80071cc:	fffffb7f 	.word	0xfffffb7f

080071d0 <_svfiprintf_r>:
 80071d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80071d2:	b09f      	sub	sp, #124	; 0x7c
 80071d4:	9002      	str	r0, [sp, #8]
 80071d6:	9305      	str	r3, [sp, #20]
 80071d8:	898b      	ldrh	r3, [r1, #12]
 80071da:	000f      	movs	r7, r1
 80071dc:	0016      	movs	r6, r2
 80071de:	061b      	lsls	r3, r3, #24
 80071e0:	d511      	bpl.n	8007206 <_svfiprintf_r+0x36>
 80071e2:	690b      	ldr	r3, [r1, #16]
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d10e      	bne.n	8007206 <_svfiprintf_r+0x36>
 80071e8:	2140      	movs	r1, #64	; 0x40
 80071ea:	f000 fae5 	bl	80077b8 <_malloc_r>
 80071ee:	6038      	str	r0, [r7, #0]
 80071f0:	6138      	str	r0, [r7, #16]
 80071f2:	2800      	cmp	r0, #0
 80071f4:	d105      	bne.n	8007202 <_svfiprintf_r+0x32>
 80071f6:	230c      	movs	r3, #12
 80071f8:	9a02      	ldr	r2, [sp, #8]
 80071fa:	3801      	subs	r0, #1
 80071fc:	6013      	str	r3, [r2, #0]
 80071fe:	b01f      	add	sp, #124	; 0x7c
 8007200:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007202:	2340      	movs	r3, #64	; 0x40
 8007204:	617b      	str	r3, [r7, #20]
 8007206:	2300      	movs	r3, #0
 8007208:	ad06      	add	r5, sp, #24
 800720a:	616b      	str	r3, [r5, #20]
 800720c:	3320      	adds	r3, #32
 800720e:	766b      	strb	r3, [r5, #25]
 8007210:	3310      	adds	r3, #16
 8007212:	76ab      	strb	r3, [r5, #26]
 8007214:	0034      	movs	r4, r6
 8007216:	7823      	ldrb	r3, [r4, #0]
 8007218:	2b00      	cmp	r3, #0
 800721a:	d147      	bne.n	80072ac <_svfiprintf_r+0xdc>
 800721c:	1ba3      	subs	r3, r4, r6
 800721e:	9304      	str	r3, [sp, #16]
 8007220:	d00d      	beq.n	800723e <_svfiprintf_r+0x6e>
 8007222:	1ba3      	subs	r3, r4, r6
 8007224:	0032      	movs	r2, r6
 8007226:	0039      	movs	r1, r7
 8007228:	9802      	ldr	r0, [sp, #8]
 800722a:	f7ff ff6f 	bl	800710c <__ssputs_r>
 800722e:	1c43      	adds	r3, r0, #1
 8007230:	d100      	bne.n	8007234 <_svfiprintf_r+0x64>
 8007232:	e0b5      	b.n	80073a0 <_svfiprintf_r+0x1d0>
 8007234:	696a      	ldr	r2, [r5, #20]
 8007236:	9b04      	ldr	r3, [sp, #16]
 8007238:	4694      	mov	ip, r2
 800723a:	4463      	add	r3, ip
 800723c:	616b      	str	r3, [r5, #20]
 800723e:	7823      	ldrb	r3, [r4, #0]
 8007240:	2b00      	cmp	r3, #0
 8007242:	d100      	bne.n	8007246 <_svfiprintf_r+0x76>
 8007244:	e0ac      	b.n	80073a0 <_svfiprintf_r+0x1d0>
 8007246:	2201      	movs	r2, #1
 8007248:	2300      	movs	r3, #0
 800724a:	4252      	negs	r2, r2
 800724c:	606a      	str	r2, [r5, #4]
 800724e:	a902      	add	r1, sp, #8
 8007250:	3254      	adds	r2, #84	; 0x54
 8007252:	1852      	adds	r2, r2, r1
 8007254:	3401      	adds	r4, #1
 8007256:	602b      	str	r3, [r5, #0]
 8007258:	60eb      	str	r3, [r5, #12]
 800725a:	60ab      	str	r3, [r5, #8]
 800725c:	7013      	strb	r3, [r2, #0]
 800725e:	65ab      	str	r3, [r5, #88]	; 0x58
 8007260:	4e58      	ldr	r6, [pc, #352]	; (80073c4 <_svfiprintf_r+0x1f4>)
 8007262:	2205      	movs	r2, #5
 8007264:	7821      	ldrb	r1, [r4, #0]
 8007266:	0030      	movs	r0, r6
 8007268:	f000 fa3e 	bl	80076e8 <memchr>
 800726c:	1c62      	adds	r2, r4, #1
 800726e:	2800      	cmp	r0, #0
 8007270:	d120      	bne.n	80072b4 <_svfiprintf_r+0xe4>
 8007272:	6829      	ldr	r1, [r5, #0]
 8007274:	06cb      	lsls	r3, r1, #27
 8007276:	d504      	bpl.n	8007282 <_svfiprintf_r+0xb2>
 8007278:	2353      	movs	r3, #83	; 0x53
 800727a:	ae02      	add	r6, sp, #8
 800727c:	3020      	adds	r0, #32
 800727e:	199b      	adds	r3, r3, r6
 8007280:	7018      	strb	r0, [r3, #0]
 8007282:	070b      	lsls	r3, r1, #28
 8007284:	d504      	bpl.n	8007290 <_svfiprintf_r+0xc0>
 8007286:	2353      	movs	r3, #83	; 0x53
 8007288:	202b      	movs	r0, #43	; 0x2b
 800728a:	ae02      	add	r6, sp, #8
 800728c:	199b      	adds	r3, r3, r6
 800728e:	7018      	strb	r0, [r3, #0]
 8007290:	7823      	ldrb	r3, [r4, #0]
 8007292:	2b2a      	cmp	r3, #42	; 0x2a
 8007294:	d016      	beq.n	80072c4 <_svfiprintf_r+0xf4>
 8007296:	2000      	movs	r0, #0
 8007298:	210a      	movs	r1, #10
 800729a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800729c:	7822      	ldrb	r2, [r4, #0]
 800729e:	3a30      	subs	r2, #48	; 0x30
 80072a0:	2a09      	cmp	r2, #9
 80072a2:	d955      	bls.n	8007350 <_svfiprintf_r+0x180>
 80072a4:	2800      	cmp	r0, #0
 80072a6:	d015      	beq.n	80072d4 <_svfiprintf_r+0x104>
 80072a8:	9309      	str	r3, [sp, #36]	; 0x24
 80072aa:	e013      	b.n	80072d4 <_svfiprintf_r+0x104>
 80072ac:	2b25      	cmp	r3, #37	; 0x25
 80072ae:	d0b5      	beq.n	800721c <_svfiprintf_r+0x4c>
 80072b0:	3401      	adds	r4, #1
 80072b2:	e7b0      	b.n	8007216 <_svfiprintf_r+0x46>
 80072b4:	2301      	movs	r3, #1
 80072b6:	1b80      	subs	r0, r0, r6
 80072b8:	4083      	lsls	r3, r0
 80072ba:	6829      	ldr	r1, [r5, #0]
 80072bc:	0014      	movs	r4, r2
 80072be:	430b      	orrs	r3, r1
 80072c0:	602b      	str	r3, [r5, #0]
 80072c2:	e7cd      	b.n	8007260 <_svfiprintf_r+0x90>
 80072c4:	9b05      	ldr	r3, [sp, #20]
 80072c6:	1d18      	adds	r0, r3, #4
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	9005      	str	r0, [sp, #20]
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	db39      	blt.n	8007344 <_svfiprintf_r+0x174>
 80072d0:	9309      	str	r3, [sp, #36]	; 0x24
 80072d2:	0014      	movs	r4, r2
 80072d4:	7823      	ldrb	r3, [r4, #0]
 80072d6:	2b2e      	cmp	r3, #46	; 0x2e
 80072d8:	d10b      	bne.n	80072f2 <_svfiprintf_r+0x122>
 80072da:	7863      	ldrb	r3, [r4, #1]
 80072dc:	1c62      	adds	r2, r4, #1
 80072de:	2b2a      	cmp	r3, #42	; 0x2a
 80072e0:	d13e      	bne.n	8007360 <_svfiprintf_r+0x190>
 80072e2:	9b05      	ldr	r3, [sp, #20]
 80072e4:	3402      	adds	r4, #2
 80072e6:	1d1a      	adds	r2, r3, #4
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	9205      	str	r2, [sp, #20]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	db34      	blt.n	800735a <_svfiprintf_r+0x18a>
 80072f0:	9307      	str	r3, [sp, #28]
 80072f2:	4e35      	ldr	r6, [pc, #212]	; (80073c8 <_svfiprintf_r+0x1f8>)
 80072f4:	7821      	ldrb	r1, [r4, #0]
 80072f6:	2203      	movs	r2, #3
 80072f8:	0030      	movs	r0, r6
 80072fa:	f000 f9f5 	bl	80076e8 <memchr>
 80072fe:	2800      	cmp	r0, #0
 8007300:	d006      	beq.n	8007310 <_svfiprintf_r+0x140>
 8007302:	2340      	movs	r3, #64	; 0x40
 8007304:	1b80      	subs	r0, r0, r6
 8007306:	4083      	lsls	r3, r0
 8007308:	682a      	ldr	r2, [r5, #0]
 800730a:	3401      	adds	r4, #1
 800730c:	4313      	orrs	r3, r2
 800730e:	602b      	str	r3, [r5, #0]
 8007310:	7821      	ldrb	r1, [r4, #0]
 8007312:	2206      	movs	r2, #6
 8007314:	482d      	ldr	r0, [pc, #180]	; (80073cc <_svfiprintf_r+0x1fc>)
 8007316:	1c66      	adds	r6, r4, #1
 8007318:	7629      	strb	r1, [r5, #24]
 800731a:	f000 f9e5 	bl	80076e8 <memchr>
 800731e:	2800      	cmp	r0, #0
 8007320:	d046      	beq.n	80073b0 <_svfiprintf_r+0x1e0>
 8007322:	4b2b      	ldr	r3, [pc, #172]	; (80073d0 <_svfiprintf_r+0x200>)
 8007324:	2b00      	cmp	r3, #0
 8007326:	d12f      	bne.n	8007388 <_svfiprintf_r+0x1b8>
 8007328:	6829      	ldr	r1, [r5, #0]
 800732a:	9b05      	ldr	r3, [sp, #20]
 800732c:	2207      	movs	r2, #7
 800732e:	05c9      	lsls	r1, r1, #23
 8007330:	d528      	bpl.n	8007384 <_svfiprintf_r+0x1b4>
 8007332:	189b      	adds	r3, r3, r2
 8007334:	4393      	bics	r3, r2
 8007336:	3308      	adds	r3, #8
 8007338:	9305      	str	r3, [sp, #20]
 800733a:	696b      	ldr	r3, [r5, #20]
 800733c:	9a03      	ldr	r2, [sp, #12]
 800733e:	189b      	adds	r3, r3, r2
 8007340:	616b      	str	r3, [r5, #20]
 8007342:	e767      	b.n	8007214 <_svfiprintf_r+0x44>
 8007344:	425b      	negs	r3, r3
 8007346:	60eb      	str	r3, [r5, #12]
 8007348:	2302      	movs	r3, #2
 800734a:	430b      	orrs	r3, r1
 800734c:	602b      	str	r3, [r5, #0]
 800734e:	e7c0      	b.n	80072d2 <_svfiprintf_r+0x102>
 8007350:	434b      	muls	r3, r1
 8007352:	3401      	adds	r4, #1
 8007354:	189b      	adds	r3, r3, r2
 8007356:	2001      	movs	r0, #1
 8007358:	e7a0      	b.n	800729c <_svfiprintf_r+0xcc>
 800735a:	2301      	movs	r3, #1
 800735c:	425b      	negs	r3, r3
 800735e:	e7c7      	b.n	80072f0 <_svfiprintf_r+0x120>
 8007360:	2300      	movs	r3, #0
 8007362:	0014      	movs	r4, r2
 8007364:	200a      	movs	r0, #10
 8007366:	001a      	movs	r2, r3
 8007368:	606b      	str	r3, [r5, #4]
 800736a:	7821      	ldrb	r1, [r4, #0]
 800736c:	3930      	subs	r1, #48	; 0x30
 800736e:	2909      	cmp	r1, #9
 8007370:	d903      	bls.n	800737a <_svfiprintf_r+0x1aa>
 8007372:	2b00      	cmp	r3, #0
 8007374:	d0bd      	beq.n	80072f2 <_svfiprintf_r+0x122>
 8007376:	9207      	str	r2, [sp, #28]
 8007378:	e7bb      	b.n	80072f2 <_svfiprintf_r+0x122>
 800737a:	4342      	muls	r2, r0
 800737c:	3401      	adds	r4, #1
 800737e:	1852      	adds	r2, r2, r1
 8007380:	2301      	movs	r3, #1
 8007382:	e7f2      	b.n	800736a <_svfiprintf_r+0x19a>
 8007384:	3307      	adds	r3, #7
 8007386:	e7d5      	b.n	8007334 <_svfiprintf_r+0x164>
 8007388:	ab05      	add	r3, sp, #20
 800738a:	9300      	str	r3, [sp, #0]
 800738c:	003a      	movs	r2, r7
 800738e:	4b11      	ldr	r3, [pc, #68]	; (80073d4 <_svfiprintf_r+0x204>)
 8007390:	0029      	movs	r1, r5
 8007392:	9802      	ldr	r0, [sp, #8]
 8007394:	e000      	b.n	8007398 <_svfiprintf_r+0x1c8>
 8007396:	bf00      	nop
 8007398:	9003      	str	r0, [sp, #12]
 800739a:	9b03      	ldr	r3, [sp, #12]
 800739c:	3301      	adds	r3, #1
 800739e:	d1cc      	bne.n	800733a <_svfiprintf_r+0x16a>
 80073a0:	89bb      	ldrh	r3, [r7, #12]
 80073a2:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80073a4:	065b      	lsls	r3, r3, #25
 80073a6:	d400      	bmi.n	80073aa <_svfiprintf_r+0x1da>
 80073a8:	e729      	b.n	80071fe <_svfiprintf_r+0x2e>
 80073aa:	2001      	movs	r0, #1
 80073ac:	4240      	negs	r0, r0
 80073ae:	e726      	b.n	80071fe <_svfiprintf_r+0x2e>
 80073b0:	ab05      	add	r3, sp, #20
 80073b2:	9300      	str	r3, [sp, #0]
 80073b4:	003a      	movs	r2, r7
 80073b6:	4b07      	ldr	r3, [pc, #28]	; (80073d4 <_svfiprintf_r+0x204>)
 80073b8:	0029      	movs	r1, r5
 80073ba:	9802      	ldr	r0, [sp, #8]
 80073bc:	f000 f87a 	bl	80074b4 <_printf_i>
 80073c0:	e7ea      	b.n	8007398 <_svfiprintf_r+0x1c8>
 80073c2:	46c0      	nop			; (mov r8, r8)
 80073c4:	08007f80 	.word	0x08007f80
 80073c8:	08007f86 	.word	0x08007f86
 80073cc:	08007f8a 	.word	0x08007f8a
 80073d0:	00000000 	.word	0x00000000
 80073d4:	0800710d 	.word	0x0800710d

080073d8 <_printf_common>:
 80073d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80073da:	0015      	movs	r5, r2
 80073dc:	9301      	str	r3, [sp, #4]
 80073de:	688a      	ldr	r2, [r1, #8]
 80073e0:	690b      	ldr	r3, [r1, #16]
 80073e2:	9000      	str	r0, [sp, #0]
 80073e4:	000c      	movs	r4, r1
 80073e6:	4293      	cmp	r3, r2
 80073e8:	da00      	bge.n	80073ec <_printf_common+0x14>
 80073ea:	0013      	movs	r3, r2
 80073ec:	0022      	movs	r2, r4
 80073ee:	602b      	str	r3, [r5, #0]
 80073f0:	3243      	adds	r2, #67	; 0x43
 80073f2:	7812      	ldrb	r2, [r2, #0]
 80073f4:	2a00      	cmp	r2, #0
 80073f6:	d001      	beq.n	80073fc <_printf_common+0x24>
 80073f8:	3301      	adds	r3, #1
 80073fa:	602b      	str	r3, [r5, #0]
 80073fc:	6823      	ldr	r3, [r4, #0]
 80073fe:	069b      	lsls	r3, r3, #26
 8007400:	d502      	bpl.n	8007408 <_printf_common+0x30>
 8007402:	682b      	ldr	r3, [r5, #0]
 8007404:	3302      	adds	r3, #2
 8007406:	602b      	str	r3, [r5, #0]
 8007408:	2706      	movs	r7, #6
 800740a:	6823      	ldr	r3, [r4, #0]
 800740c:	401f      	ands	r7, r3
 800740e:	d027      	beq.n	8007460 <_printf_common+0x88>
 8007410:	0023      	movs	r3, r4
 8007412:	3343      	adds	r3, #67	; 0x43
 8007414:	781b      	ldrb	r3, [r3, #0]
 8007416:	1e5a      	subs	r2, r3, #1
 8007418:	4193      	sbcs	r3, r2
 800741a:	6822      	ldr	r2, [r4, #0]
 800741c:	0692      	lsls	r2, r2, #26
 800741e:	d430      	bmi.n	8007482 <_printf_common+0xaa>
 8007420:	0022      	movs	r2, r4
 8007422:	9901      	ldr	r1, [sp, #4]
 8007424:	3243      	adds	r2, #67	; 0x43
 8007426:	9800      	ldr	r0, [sp, #0]
 8007428:	9e08      	ldr	r6, [sp, #32]
 800742a:	47b0      	blx	r6
 800742c:	1c43      	adds	r3, r0, #1
 800742e:	d025      	beq.n	800747c <_printf_common+0xa4>
 8007430:	2306      	movs	r3, #6
 8007432:	6820      	ldr	r0, [r4, #0]
 8007434:	682a      	ldr	r2, [r5, #0]
 8007436:	68e1      	ldr	r1, [r4, #12]
 8007438:	4003      	ands	r3, r0
 800743a:	2500      	movs	r5, #0
 800743c:	2b04      	cmp	r3, #4
 800743e:	d103      	bne.n	8007448 <_printf_common+0x70>
 8007440:	1a8d      	subs	r5, r1, r2
 8007442:	43eb      	mvns	r3, r5
 8007444:	17db      	asrs	r3, r3, #31
 8007446:	401d      	ands	r5, r3
 8007448:	68a3      	ldr	r3, [r4, #8]
 800744a:	6922      	ldr	r2, [r4, #16]
 800744c:	4293      	cmp	r3, r2
 800744e:	dd01      	ble.n	8007454 <_printf_common+0x7c>
 8007450:	1a9b      	subs	r3, r3, r2
 8007452:	18ed      	adds	r5, r5, r3
 8007454:	2700      	movs	r7, #0
 8007456:	42bd      	cmp	r5, r7
 8007458:	d120      	bne.n	800749c <_printf_common+0xc4>
 800745a:	2000      	movs	r0, #0
 800745c:	e010      	b.n	8007480 <_printf_common+0xa8>
 800745e:	3701      	adds	r7, #1
 8007460:	68e3      	ldr	r3, [r4, #12]
 8007462:	682a      	ldr	r2, [r5, #0]
 8007464:	1a9b      	subs	r3, r3, r2
 8007466:	429f      	cmp	r7, r3
 8007468:	dad2      	bge.n	8007410 <_printf_common+0x38>
 800746a:	0022      	movs	r2, r4
 800746c:	2301      	movs	r3, #1
 800746e:	3219      	adds	r2, #25
 8007470:	9901      	ldr	r1, [sp, #4]
 8007472:	9800      	ldr	r0, [sp, #0]
 8007474:	9e08      	ldr	r6, [sp, #32]
 8007476:	47b0      	blx	r6
 8007478:	1c43      	adds	r3, r0, #1
 800747a:	d1f0      	bne.n	800745e <_printf_common+0x86>
 800747c:	2001      	movs	r0, #1
 800747e:	4240      	negs	r0, r0
 8007480:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007482:	2030      	movs	r0, #48	; 0x30
 8007484:	18e1      	adds	r1, r4, r3
 8007486:	3143      	adds	r1, #67	; 0x43
 8007488:	7008      	strb	r0, [r1, #0]
 800748a:	0021      	movs	r1, r4
 800748c:	1c5a      	adds	r2, r3, #1
 800748e:	3145      	adds	r1, #69	; 0x45
 8007490:	7809      	ldrb	r1, [r1, #0]
 8007492:	18a2      	adds	r2, r4, r2
 8007494:	3243      	adds	r2, #67	; 0x43
 8007496:	3302      	adds	r3, #2
 8007498:	7011      	strb	r1, [r2, #0]
 800749a:	e7c1      	b.n	8007420 <_printf_common+0x48>
 800749c:	0022      	movs	r2, r4
 800749e:	2301      	movs	r3, #1
 80074a0:	321a      	adds	r2, #26
 80074a2:	9901      	ldr	r1, [sp, #4]
 80074a4:	9800      	ldr	r0, [sp, #0]
 80074a6:	9e08      	ldr	r6, [sp, #32]
 80074a8:	47b0      	blx	r6
 80074aa:	1c43      	adds	r3, r0, #1
 80074ac:	d0e6      	beq.n	800747c <_printf_common+0xa4>
 80074ae:	3701      	adds	r7, #1
 80074b0:	e7d1      	b.n	8007456 <_printf_common+0x7e>
	...

080074b4 <_printf_i>:
 80074b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80074b6:	b08b      	sub	sp, #44	; 0x2c
 80074b8:	9206      	str	r2, [sp, #24]
 80074ba:	000a      	movs	r2, r1
 80074bc:	3243      	adds	r2, #67	; 0x43
 80074be:	9307      	str	r3, [sp, #28]
 80074c0:	9005      	str	r0, [sp, #20]
 80074c2:	9204      	str	r2, [sp, #16]
 80074c4:	7e0a      	ldrb	r2, [r1, #24]
 80074c6:	000c      	movs	r4, r1
 80074c8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80074ca:	2a6e      	cmp	r2, #110	; 0x6e
 80074cc:	d100      	bne.n	80074d0 <_printf_i+0x1c>
 80074ce:	e08f      	b.n	80075f0 <_printf_i+0x13c>
 80074d0:	d817      	bhi.n	8007502 <_printf_i+0x4e>
 80074d2:	2a63      	cmp	r2, #99	; 0x63
 80074d4:	d02c      	beq.n	8007530 <_printf_i+0x7c>
 80074d6:	d808      	bhi.n	80074ea <_printf_i+0x36>
 80074d8:	2a00      	cmp	r2, #0
 80074da:	d100      	bne.n	80074de <_printf_i+0x2a>
 80074dc:	e099      	b.n	8007612 <_printf_i+0x15e>
 80074de:	2a58      	cmp	r2, #88	; 0x58
 80074e0:	d054      	beq.n	800758c <_printf_i+0xd8>
 80074e2:	0026      	movs	r6, r4
 80074e4:	3642      	adds	r6, #66	; 0x42
 80074e6:	7032      	strb	r2, [r6, #0]
 80074e8:	e029      	b.n	800753e <_printf_i+0x8a>
 80074ea:	2a64      	cmp	r2, #100	; 0x64
 80074ec:	d001      	beq.n	80074f2 <_printf_i+0x3e>
 80074ee:	2a69      	cmp	r2, #105	; 0x69
 80074f0:	d1f7      	bne.n	80074e2 <_printf_i+0x2e>
 80074f2:	6821      	ldr	r1, [r4, #0]
 80074f4:	681a      	ldr	r2, [r3, #0]
 80074f6:	0608      	lsls	r0, r1, #24
 80074f8:	d523      	bpl.n	8007542 <_printf_i+0x8e>
 80074fa:	1d11      	adds	r1, r2, #4
 80074fc:	6019      	str	r1, [r3, #0]
 80074fe:	6815      	ldr	r5, [r2, #0]
 8007500:	e025      	b.n	800754e <_printf_i+0x9a>
 8007502:	2a73      	cmp	r2, #115	; 0x73
 8007504:	d100      	bne.n	8007508 <_printf_i+0x54>
 8007506:	e088      	b.n	800761a <_printf_i+0x166>
 8007508:	d808      	bhi.n	800751c <_printf_i+0x68>
 800750a:	2a6f      	cmp	r2, #111	; 0x6f
 800750c:	d029      	beq.n	8007562 <_printf_i+0xae>
 800750e:	2a70      	cmp	r2, #112	; 0x70
 8007510:	d1e7      	bne.n	80074e2 <_printf_i+0x2e>
 8007512:	2220      	movs	r2, #32
 8007514:	6809      	ldr	r1, [r1, #0]
 8007516:	430a      	orrs	r2, r1
 8007518:	6022      	str	r2, [r4, #0]
 800751a:	e003      	b.n	8007524 <_printf_i+0x70>
 800751c:	2a75      	cmp	r2, #117	; 0x75
 800751e:	d020      	beq.n	8007562 <_printf_i+0xae>
 8007520:	2a78      	cmp	r2, #120	; 0x78
 8007522:	d1de      	bne.n	80074e2 <_printf_i+0x2e>
 8007524:	0022      	movs	r2, r4
 8007526:	2178      	movs	r1, #120	; 0x78
 8007528:	3245      	adds	r2, #69	; 0x45
 800752a:	7011      	strb	r1, [r2, #0]
 800752c:	4a6c      	ldr	r2, [pc, #432]	; (80076e0 <_printf_i+0x22c>)
 800752e:	e030      	b.n	8007592 <_printf_i+0xde>
 8007530:	000e      	movs	r6, r1
 8007532:	681a      	ldr	r2, [r3, #0]
 8007534:	3642      	adds	r6, #66	; 0x42
 8007536:	1d11      	adds	r1, r2, #4
 8007538:	6019      	str	r1, [r3, #0]
 800753a:	6813      	ldr	r3, [r2, #0]
 800753c:	7033      	strb	r3, [r6, #0]
 800753e:	2301      	movs	r3, #1
 8007540:	e079      	b.n	8007636 <_printf_i+0x182>
 8007542:	0649      	lsls	r1, r1, #25
 8007544:	d5d9      	bpl.n	80074fa <_printf_i+0x46>
 8007546:	1d11      	adds	r1, r2, #4
 8007548:	6019      	str	r1, [r3, #0]
 800754a:	2300      	movs	r3, #0
 800754c:	5ed5      	ldrsh	r5, [r2, r3]
 800754e:	2d00      	cmp	r5, #0
 8007550:	da03      	bge.n	800755a <_printf_i+0xa6>
 8007552:	232d      	movs	r3, #45	; 0x2d
 8007554:	9a04      	ldr	r2, [sp, #16]
 8007556:	426d      	negs	r5, r5
 8007558:	7013      	strb	r3, [r2, #0]
 800755a:	4b62      	ldr	r3, [pc, #392]	; (80076e4 <_printf_i+0x230>)
 800755c:	270a      	movs	r7, #10
 800755e:	9303      	str	r3, [sp, #12]
 8007560:	e02f      	b.n	80075c2 <_printf_i+0x10e>
 8007562:	6820      	ldr	r0, [r4, #0]
 8007564:	6819      	ldr	r1, [r3, #0]
 8007566:	0605      	lsls	r5, r0, #24
 8007568:	d503      	bpl.n	8007572 <_printf_i+0xbe>
 800756a:	1d08      	adds	r0, r1, #4
 800756c:	6018      	str	r0, [r3, #0]
 800756e:	680d      	ldr	r5, [r1, #0]
 8007570:	e005      	b.n	800757e <_printf_i+0xca>
 8007572:	0640      	lsls	r0, r0, #25
 8007574:	d5f9      	bpl.n	800756a <_printf_i+0xb6>
 8007576:	680d      	ldr	r5, [r1, #0]
 8007578:	1d08      	adds	r0, r1, #4
 800757a:	6018      	str	r0, [r3, #0]
 800757c:	b2ad      	uxth	r5, r5
 800757e:	4b59      	ldr	r3, [pc, #356]	; (80076e4 <_printf_i+0x230>)
 8007580:	2708      	movs	r7, #8
 8007582:	9303      	str	r3, [sp, #12]
 8007584:	2a6f      	cmp	r2, #111	; 0x6f
 8007586:	d018      	beq.n	80075ba <_printf_i+0x106>
 8007588:	270a      	movs	r7, #10
 800758a:	e016      	b.n	80075ba <_printf_i+0x106>
 800758c:	3145      	adds	r1, #69	; 0x45
 800758e:	700a      	strb	r2, [r1, #0]
 8007590:	4a54      	ldr	r2, [pc, #336]	; (80076e4 <_printf_i+0x230>)
 8007592:	9203      	str	r2, [sp, #12]
 8007594:	681a      	ldr	r2, [r3, #0]
 8007596:	6821      	ldr	r1, [r4, #0]
 8007598:	1d10      	adds	r0, r2, #4
 800759a:	6018      	str	r0, [r3, #0]
 800759c:	6815      	ldr	r5, [r2, #0]
 800759e:	0608      	lsls	r0, r1, #24
 80075a0:	d522      	bpl.n	80075e8 <_printf_i+0x134>
 80075a2:	07cb      	lsls	r3, r1, #31
 80075a4:	d502      	bpl.n	80075ac <_printf_i+0xf8>
 80075a6:	2320      	movs	r3, #32
 80075a8:	4319      	orrs	r1, r3
 80075aa:	6021      	str	r1, [r4, #0]
 80075ac:	2710      	movs	r7, #16
 80075ae:	2d00      	cmp	r5, #0
 80075b0:	d103      	bne.n	80075ba <_printf_i+0x106>
 80075b2:	2320      	movs	r3, #32
 80075b4:	6822      	ldr	r2, [r4, #0]
 80075b6:	439a      	bics	r2, r3
 80075b8:	6022      	str	r2, [r4, #0]
 80075ba:	0023      	movs	r3, r4
 80075bc:	2200      	movs	r2, #0
 80075be:	3343      	adds	r3, #67	; 0x43
 80075c0:	701a      	strb	r2, [r3, #0]
 80075c2:	6863      	ldr	r3, [r4, #4]
 80075c4:	60a3      	str	r3, [r4, #8]
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	db5c      	blt.n	8007684 <_printf_i+0x1d0>
 80075ca:	2204      	movs	r2, #4
 80075cc:	6821      	ldr	r1, [r4, #0]
 80075ce:	4391      	bics	r1, r2
 80075d0:	6021      	str	r1, [r4, #0]
 80075d2:	2d00      	cmp	r5, #0
 80075d4:	d158      	bne.n	8007688 <_printf_i+0x1d4>
 80075d6:	9e04      	ldr	r6, [sp, #16]
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d064      	beq.n	80076a6 <_printf_i+0x1f2>
 80075dc:	0026      	movs	r6, r4
 80075de:	9b03      	ldr	r3, [sp, #12]
 80075e0:	3642      	adds	r6, #66	; 0x42
 80075e2:	781b      	ldrb	r3, [r3, #0]
 80075e4:	7033      	strb	r3, [r6, #0]
 80075e6:	e05e      	b.n	80076a6 <_printf_i+0x1f2>
 80075e8:	0648      	lsls	r0, r1, #25
 80075ea:	d5da      	bpl.n	80075a2 <_printf_i+0xee>
 80075ec:	b2ad      	uxth	r5, r5
 80075ee:	e7d8      	b.n	80075a2 <_printf_i+0xee>
 80075f0:	6809      	ldr	r1, [r1, #0]
 80075f2:	681a      	ldr	r2, [r3, #0]
 80075f4:	0608      	lsls	r0, r1, #24
 80075f6:	d505      	bpl.n	8007604 <_printf_i+0x150>
 80075f8:	1d11      	adds	r1, r2, #4
 80075fa:	6019      	str	r1, [r3, #0]
 80075fc:	6813      	ldr	r3, [r2, #0]
 80075fe:	6962      	ldr	r2, [r4, #20]
 8007600:	601a      	str	r2, [r3, #0]
 8007602:	e006      	b.n	8007612 <_printf_i+0x15e>
 8007604:	0649      	lsls	r1, r1, #25
 8007606:	d5f7      	bpl.n	80075f8 <_printf_i+0x144>
 8007608:	1d11      	adds	r1, r2, #4
 800760a:	6019      	str	r1, [r3, #0]
 800760c:	6813      	ldr	r3, [r2, #0]
 800760e:	8aa2      	ldrh	r2, [r4, #20]
 8007610:	801a      	strh	r2, [r3, #0]
 8007612:	2300      	movs	r3, #0
 8007614:	9e04      	ldr	r6, [sp, #16]
 8007616:	6123      	str	r3, [r4, #16]
 8007618:	e054      	b.n	80076c4 <_printf_i+0x210>
 800761a:	681a      	ldr	r2, [r3, #0]
 800761c:	1d11      	adds	r1, r2, #4
 800761e:	6019      	str	r1, [r3, #0]
 8007620:	6816      	ldr	r6, [r2, #0]
 8007622:	2100      	movs	r1, #0
 8007624:	6862      	ldr	r2, [r4, #4]
 8007626:	0030      	movs	r0, r6
 8007628:	f000 f85e 	bl	80076e8 <memchr>
 800762c:	2800      	cmp	r0, #0
 800762e:	d001      	beq.n	8007634 <_printf_i+0x180>
 8007630:	1b80      	subs	r0, r0, r6
 8007632:	6060      	str	r0, [r4, #4]
 8007634:	6863      	ldr	r3, [r4, #4]
 8007636:	6123      	str	r3, [r4, #16]
 8007638:	2300      	movs	r3, #0
 800763a:	9a04      	ldr	r2, [sp, #16]
 800763c:	7013      	strb	r3, [r2, #0]
 800763e:	e041      	b.n	80076c4 <_printf_i+0x210>
 8007640:	6923      	ldr	r3, [r4, #16]
 8007642:	0032      	movs	r2, r6
 8007644:	9906      	ldr	r1, [sp, #24]
 8007646:	9805      	ldr	r0, [sp, #20]
 8007648:	9d07      	ldr	r5, [sp, #28]
 800764a:	47a8      	blx	r5
 800764c:	1c43      	adds	r3, r0, #1
 800764e:	d043      	beq.n	80076d8 <_printf_i+0x224>
 8007650:	6823      	ldr	r3, [r4, #0]
 8007652:	2500      	movs	r5, #0
 8007654:	079b      	lsls	r3, r3, #30
 8007656:	d40f      	bmi.n	8007678 <_printf_i+0x1c4>
 8007658:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800765a:	68e0      	ldr	r0, [r4, #12]
 800765c:	4298      	cmp	r0, r3
 800765e:	da3d      	bge.n	80076dc <_printf_i+0x228>
 8007660:	0018      	movs	r0, r3
 8007662:	e03b      	b.n	80076dc <_printf_i+0x228>
 8007664:	0022      	movs	r2, r4
 8007666:	2301      	movs	r3, #1
 8007668:	3219      	adds	r2, #25
 800766a:	9906      	ldr	r1, [sp, #24]
 800766c:	9805      	ldr	r0, [sp, #20]
 800766e:	9e07      	ldr	r6, [sp, #28]
 8007670:	47b0      	blx	r6
 8007672:	1c43      	adds	r3, r0, #1
 8007674:	d030      	beq.n	80076d8 <_printf_i+0x224>
 8007676:	3501      	adds	r5, #1
 8007678:	68e3      	ldr	r3, [r4, #12]
 800767a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800767c:	1a9b      	subs	r3, r3, r2
 800767e:	429d      	cmp	r5, r3
 8007680:	dbf0      	blt.n	8007664 <_printf_i+0x1b0>
 8007682:	e7e9      	b.n	8007658 <_printf_i+0x1a4>
 8007684:	2d00      	cmp	r5, #0
 8007686:	d0a9      	beq.n	80075dc <_printf_i+0x128>
 8007688:	9e04      	ldr	r6, [sp, #16]
 800768a:	0028      	movs	r0, r5
 800768c:	0039      	movs	r1, r7
 800768e:	f7f8 fdcb 	bl	8000228 <__aeabi_uidivmod>
 8007692:	9b03      	ldr	r3, [sp, #12]
 8007694:	3e01      	subs	r6, #1
 8007696:	5c5b      	ldrb	r3, [r3, r1]
 8007698:	0028      	movs	r0, r5
 800769a:	7033      	strb	r3, [r6, #0]
 800769c:	0039      	movs	r1, r7
 800769e:	f7f8 fd3d 	bl	800011c <__udivsi3>
 80076a2:	1e05      	subs	r5, r0, #0
 80076a4:	d1f1      	bne.n	800768a <_printf_i+0x1d6>
 80076a6:	2f08      	cmp	r7, #8
 80076a8:	d109      	bne.n	80076be <_printf_i+0x20a>
 80076aa:	6823      	ldr	r3, [r4, #0]
 80076ac:	07db      	lsls	r3, r3, #31
 80076ae:	d506      	bpl.n	80076be <_printf_i+0x20a>
 80076b0:	6863      	ldr	r3, [r4, #4]
 80076b2:	6922      	ldr	r2, [r4, #16]
 80076b4:	4293      	cmp	r3, r2
 80076b6:	dc02      	bgt.n	80076be <_printf_i+0x20a>
 80076b8:	2330      	movs	r3, #48	; 0x30
 80076ba:	3e01      	subs	r6, #1
 80076bc:	7033      	strb	r3, [r6, #0]
 80076be:	9b04      	ldr	r3, [sp, #16]
 80076c0:	1b9b      	subs	r3, r3, r6
 80076c2:	6123      	str	r3, [r4, #16]
 80076c4:	9b07      	ldr	r3, [sp, #28]
 80076c6:	aa09      	add	r2, sp, #36	; 0x24
 80076c8:	9300      	str	r3, [sp, #0]
 80076ca:	0021      	movs	r1, r4
 80076cc:	9b06      	ldr	r3, [sp, #24]
 80076ce:	9805      	ldr	r0, [sp, #20]
 80076d0:	f7ff fe82 	bl	80073d8 <_printf_common>
 80076d4:	1c43      	adds	r3, r0, #1
 80076d6:	d1b3      	bne.n	8007640 <_printf_i+0x18c>
 80076d8:	2001      	movs	r0, #1
 80076da:	4240      	negs	r0, r0
 80076dc:	b00b      	add	sp, #44	; 0x2c
 80076de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80076e0:	08007fa2 	.word	0x08007fa2
 80076e4:	08007f91 	.word	0x08007f91

080076e8 <memchr>:
 80076e8:	b2c9      	uxtb	r1, r1
 80076ea:	1882      	adds	r2, r0, r2
 80076ec:	4290      	cmp	r0, r2
 80076ee:	d101      	bne.n	80076f4 <memchr+0xc>
 80076f0:	2000      	movs	r0, #0
 80076f2:	4770      	bx	lr
 80076f4:	7803      	ldrb	r3, [r0, #0]
 80076f6:	428b      	cmp	r3, r1
 80076f8:	d0fb      	beq.n	80076f2 <memchr+0xa>
 80076fa:	3001      	adds	r0, #1
 80076fc:	e7f6      	b.n	80076ec <memchr+0x4>

080076fe <memmove>:
 80076fe:	b510      	push	{r4, lr}
 8007700:	4288      	cmp	r0, r1
 8007702:	d902      	bls.n	800770a <memmove+0xc>
 8007704:	188b      	adds	r3, r1, r2
 8007706:	4298      	cmp	r0, r3
 8007708:	d308      	bcc.n	800771c <memmove+0x1e>
 800770a:	2300      	movs	r3, #0
 800770c:	429a      	cmp	r2, r3
 800770e:	d007      	beq.n	8007720 <memmove+0x22>
 8007710:	5ccc      	ldrb	r4, [r1, r3]
 8007712:	54c4      	strb	r4, [r0, r3]
 8007714:	3301      	adds	r3, #1
 8007716:	e7f9      	b.n	800770c <memmove+0xe>
 8007718:	5c8b      	ldrb	r3, [r1, r2]
 800771a:	5483      	strb	r3, [r0, r2]
 800771c:	3a01      	subs	r2, #1
 800771e:	d2fb      	bcs.n	8007718 <memmove+0x1a>
 8007720:	bd10      	pop	{r4, pc}
	...

08007724 <_free_r>:
 8007724:	b570      	push	{r4, r5, r6, lr}
 8007726:	0005      	movs	r5, r0
 8007728:	2900      	cmp	r1, #0
 800772a:	d010      	beq.n	800774e <_free_r+0x2a>
 800772c:	1f0c      	subs	r4, r1, #4
 800772e:	6823      	ldr	r3, [r4, #0]
 8007730:	2b00      	cmp	r3, #0
 8007732:	da00      	bge.n	8007736 <_free_r+0x12>
 8007734:	18e4      	adds	r4, r4, r3
 8007736:	0028      	movs	r0, r5
 8007738:	f000 f8d4 	bl	80078e4 <__malloc_lock>
 800773c:	4a1d      	ldr	r2, [pc, #116]	; (80077b4 <_free_r+0x90>)
 800773e:	6813      	ldr	r3, [r2, #0]
 8007740:	2b00      	cmp	r3, #0
 8007742:	d105      	bne.n	8007750 <_free_r+0x2c>
 8007744:	6063      	str	r3, [r4, #4]
 8007746:	6014      	str	r4, [r2, #0]
 8007748:	0028      	movs	r0, r5
 800774a:	f000 f8cc 	bl	80078e6 <__malloc_unlock>
 800774e:	bd70      	pop	{r4, r5, r6, pc}
 8007750:	42a3      	cmp	r3, r4
 8007752:	d909      	bls.n	8007768 <_free_r+0x44>
 8007754:	6821      	ldr	r1, [r4, #0]
 8007756:	1860      	adds	r0, r4, r1
 8007758:	4283      	cmp	r3, r0
 800775a:	d1f3      	bne.n	8007744 <_free_r+0x20>
 800775c:	6818      	ldr	r0, [r3, #0]
 800775e:	685b      	ldr	r3, [r3, #4]
 8007760:	1841      	adds	r1, r0, r1
 8007762:	6021      	str	r1, [r4, #0]
 8007764:	e7ee      	b.n	8007744 <_free_r+0x20>
 8007766:	0013      	movs	r3, r2
 8007768:	685a      	ldr	r2, [r3, #4]
 800776a:	2a00      	cmp	r2, #0
 800776c:	d001      	beq.n	8007772 <_free_r+0x4e>
 800776e:	42a2      	cmp	r2, r4
 8007770:	d9f9      	bls.n	8007766 <_free_r+0x42>
 8007772:	6819      	ldr	r1, [r3, #0]
 8007774:	1858      	adds	r0, r3, r1
 8007776:	42a0      	cmp	r0, r4
 8007778:	d10b      	bne.n	8007792 <_free_r+0x6e>
 800777a:	6820      	ldr	r0, [r4, #0]
 800777c:	1809      	adds	r1, r1, r0
 800777e:	1858      	adds	r0, r3, r1
 8007780:	6019      	str	r1, [r3, #0]
 8007782:	4282      	cmp	r2, r0
 8007784:	d1e0      	bne.n	8007748 <_free_r+0x24>
 8007786:	6810      	ldr	r0, [r2, #0]
 8007788:	6852      	ldr	r2, [r2, #4]
 800778a:	1841      	adds	r1, r0, r1
 800778c:	6019      	str	r1, [r3, #0]
 800778e:	605a      	str	r2, [r3, #4]
 8007790:	e7da      	b.n	8007748 <_free_r+0x24>
 8007792:	42a0      	cmp	r0, r4
 8007794:	d902      	bls.n	800779c <_free_r+0x78>
 8007796:	230c      	movs	r3, #12
 8007798:	602b      	str	r3, [r5, #0]
 800779a:	e7d5      	b.n	8007748 <_free_r+0x24>
 800779c:	6821      	ldr	r1, [r4, #0]
 800779e:	1860      	adds	r0, r4, r1
 80077a0:	4282      	cmp	r2, r0
 80077a2:	d103      	bne.n	80077ac <_free_r+0x88>
 80077a4:	6810      	ldr	r0, [r2, #0]
 80077a6:	6852      	ldr	r2, [r2, #4]
 80077a8:	1841      	adds	r1, r0, r1
 80077aa:	6021      	str	r1, [r4, #0]
 80077ac:	6062      	str	r2, [r4, #4]
 80077ae:	605c      	str	r4, [r3, #4]
 80077b0:	e7ca      	b.n	8007748 <_free_r+0x24>
 80077b2:	46c0      	nop			; (mov r8, r8)
 80077b4:	20000560 	.word	0x20000560

080077b8 <_malloc_r>:
 80077b8:	2303      	movs	r3, #3
 80077ba:	b570      	push	{r4, r5, r6, lr}
 80077bc:	1ccd      	adds	r5, r1, #3
 80077be:	439d      	bics	r5, r3
 80077c0:	3508      	adds	r5, #8
 80077c2:	0006      	movs	r6, r0
 80077c4:	2d0c      	cmp	r5, #12
 80077c6:	d21e      	bcs.n	8007806 <_malloc_r+0x4e>
 80077c8:	250c      	movs	r5, #12
 80077ca:	42a9      	cmp	r1, r5
 80077cc:	d81d      	bhi.n	800780a <_malloc_r+0x52>
 80077ce:	0030      	movs	r0, r6
 80077d0:	f000 f888 	bl	80078e4 <__malloc_lock>
 80077d4:	4a25      	ldr	r2, [pc, #148]	; (800786c <_malloc_r+0xb4>)
 80077d6:	6814      	ldr	r4, [r2, #0]
 80077d8:	0021      	movs	r1, r4
 80077da:	2900      	cmp	r1, #0
 80077dc:	d119      	bne.n	8007812 <_malloc_r+0x5a>
 80077de:	4c24      	ldr	r4, [pc, #144]	; (8007870 <_malloc_r+0xb8>)
 80077e0:	6823      	ldr	r3, [r4, #0]
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d103      	bne.n	80077ee <_malloc_r+0x36>
 80077e6:	0030      	movs	r0, r6
 80077e8:	f000 f86a 	bl	80078c0 <_sbrk_r>
 80077ec:	6020      	str	r0, [r4, #0]
 80077ee:	0029      	movs	r1, r5
 80077f0:	0030      	movs	r0, r6
 80077f2:	f000 f865 	bl	80078c0 <_sbrk_r>
 80077f6:	1c43      	adds	r3, r0, #1
 80077f8:	d12c      	bne.n	8007854 <_malloc_r+0x9c>
 80077fa:	230c      	movs	r3, #12
 80077fc:	0030      	movs	r0, r6
 80077fe:	6033      	str	r3, [r6, #0]
 8007800:	f000 f871 	bl	80078e6 <__malloc_unlock>
 8007804:	e003      	b.n	800780e <_malloc_r+0x56>
 8007806:	2d00      	cmp	r5, #0
 8007808:	dadf      	bge.n	80077ca <_malloc_r+0x12>
 800780a:	230c      	movs	r3, #12
 800780c:	6033      	str	r3, [r6, #0]
 800780e:	2000      	movs	r0, #0
 8007810:	bd70      	pop	{r4, r5, r6, pc}
 8007812:	680b      	ldr	r3, [r1, #0]
 8007814:	1b5b      	subs	r3, r3, r5
 8007816:	d41a      	bmi.n	800784e <_malloc_r+0x96>
 8007818:	2b0b      	cmp	r3, #11
 800781a:	d903      	bls.n	8007824 <_malloc_r+0x6c>
 800781c:	600b      	str	r3, [r1, #0]
 800781e:	18cc      	adds	r4, r1, r3
 8007820:	6025      	str	r5, [r4, #0]
 8007822:	e003      	b.n	800782c <_malloc_r+0x74>
 8007824:	428c      	cmp	r4, r1
 8007826:	d10e      	bne.n	8007846 <_malloc_r+0x8e>
 8007828:	6863      	ldr	r3, [r4, #4]
 800782a:	6013      	str	r3, [r2, #0]
 800782c:	0030      	movs	r0, r6
 800782e:	f000 f85a 	bl	80078e6 <__malloc_unlock>
 8007832:	0020      	movs	r0, r4
 8007834:	2207      	movs	r2, #7
 8007836:	300b      	adds	r0, #11
 8007838:	1d23      	adds	r3, r4, #4
 800783a:	4390      	bics	r0, r2
 800783c:	1ac3      	subs	r3, r0, r3
 800783e:	d0e7      	beq.n	8007810 <_malloc_r+0x58>
 8007840:	425a      	negs	r2, r3
 8007842:	50e2      	str	r2, [r4, r3]
 8007844:	e7e4      	b.n	8007810 <_malloc_r+0x58>
 8007846:	684b      	ldr	r3, [r1, #4]
 8007848:	6063      	str	r3, [r4, #4]
 800784a:	000c      	movs	r4, r1
 800784c:	e7ee      	b.n	800782c <_malloc_r+0x74>
 800784e:	000c      	movs	r4, r1
 8007850:	6849      	ldr	r1, [r1, #4]
 8007852:	e7c2      	b.n	80077da <_malloc_r+0x22>
 8007854:	2303      	movs	r3, #3
 8007856:	1cc4      	adds	r4, r0, #3
 8007858:	439c      	bics	r4, r3
 800785a:	42a0      	cmp	r0, r4
 800785c:	d0e0      	beq.n	8007820 <_malloc_r+0x68>
 800785e:	1a21      	subs	r1, r4, r0
 8007860:	0030      	movs	r0, r6
 8007862:	f000 f82d 	bl	80078c0 <_sbrk_r>
 8007866:	1c43      	adds	r3, r0, #1
 8007868:	d1da      	bne.n	8007820 <_malloc_r+0x68>
 800786a:	e7c6      	b.n	80077fa <_malloc_r+0x42>
 800786c:	20000560 	.word	0x20000560
 8007870:	20000564 	.word	0x20000564

08007874 <_realloc_r>:
 8007874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007876:	0007      	movs	r7, r0
 8007878:	000d      	movs	r5, r1
 800787a:	0016      	movs	r6, r2
 800787c:	2900      	cmp	r1, #0
 800787e:	d105      	bne.n	800788c <_realloc_r+0x18>
 8007880:	0011      	movs	r1, r2
 8007882:	f7ff ff99 	bl	80077b8 <_malloc_r>
 8007886:	0004      	movs	r4, r0
 8007888:	0020      	movs	r0, r4
 800788a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800788c:	2a00      	cmp	r2, #0
 800788e:	d103      	bne.n	8007898 <_realloc_r+0x24>
 8007890:	f7ff ff48 	bl	8007724 <_free_r>
 8007894:	0034      	movs	r4, r6
 8007896:	e7f7      	b.n	8007888 <_realloc_r+0x14>
 8007898:	f000 f826 	bl	80078e8 <_malloc_usable_size_r>
 800789c:	002c      	movs	r4, r5
 800789e:	4286      	cmp	r6, r0
 80078a0:	d9f2      	bls.n	8007888 <_realloc_r+0x14>
 80078a2:	0031      	movs	r1, r6
 80078a4:	0038      	movs	r0, r7
 80078a6:	f7ff ff87 	bl	80077b8 <_malloc_r>
 80078aa:	1e04      	subs	r4, r0, #0
 80078ac:	d0ec      	beq.n	8007888 <_realloc_r+0x14>
 80078ae:	0029      	movs	r1, r5
 80078b0:	0032      	movs	r2, r6
 80078b2:	f7ff fbf5 	bl	80070a0 <memcpy>
 80078b6:	0029      	movs	r1, r5
 80078b8:	0038      	movs	r0, r7
 80078ba:	f7ff ff33 	bl	8007724 <_free_r>
 80078be:	e7e3      	b.n	8007888 <_realloc_r+0x14>

080078c0 <_sbrk_r>:
 80078c0:	2300      	movs	r3, #0
 80078c2:	b570      	push	{r4, r5, r6, lr}
 80078c4:	4c06      	ldr	r4, [pc, #24]	; (80078e0 <_sbrk_r+0x20>)
 80078c6:	0005      	movs	r5, r0
 80078c8:	0008      	movs	r0, r1
 80078ca:	6023      	str	r3, [r4, #0]
 80078cc:	f000 f95e 	bl	8007b8c <_sbrk>
 80078d0:	1c43      	adds	r3, r0, #1
 80078d2:	d103      	bne.n	80078dc <_sbrk_r+0x1c>
 80078d4:	6823      	ldr	r3, [r4, #0]
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d000      	beq.n	80078dc <_sbrk_r+0x1c>
 80078da:	602b      	str	r3, [r5, #0]
 80078dc:	bd70      	pop	{r4, r5, r6, pc}
 80078de:	46c0      	nop			; (mov r8, r8)
 80078e0:	20000698 	.word	0x20000698

080078e4 <__malloc_lock>:
 80078e4:	4770      	bx	lr

080078e6 <__malloc_unlock>:
 80078e6:	4770      	bx	lr

080078e8 <_malloc_usable_size_r>:
 80078e8:	1f0b      	subs	r3, r1, #4
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	1f18      	subs	r0, r3, #4
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	da01      	bge.n	80078f6 <_malloc_usable_size_r+0xe>
 80078f2:	580b      	ldr	r3, [r1, r0]
 80078f4:	18c0      	adds	r0, r0, r3
 80078f6:	4770      	bx	lr

080078f8 <ceil>:
 80078f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80078fa:	004b      	lsls	r3, r1, #1
 80078fc:	4a39      	ldr	r2, [pc, #228]	; (80079e4 <ceil+0xec>)
 80078fe:	0d5b      	lsrs	r3, r3, #21
 8007900:	b085      	sub	sp, #20
 8007902:	189e      	adds	r6, r3, r2
 8007904:	9003      	str	r0, [sp, #12]
 8007906:	000c      	movs	r4, r1
 8007908:	0005      	movs	r5, r0
 800790a:	2e13      	cmp	r6, #19
 800790c:	dc32      	bgt.n	8007974 <ceil+0x7c>
 800790e:	2e00      	cmp	r6, #0
 8007910:	da13      	bge.n	800793a <ceil+0x42>
 8007912:	4a35      	ldr	r2, [pc, #212]	; (80079e8 <ceil+0xf0>)
 8007914:	4b35      	ldr	r3, [pc, #212]	; (80079ec <ceil+0xf4>)
 8007916:	f7f8 fedd 	bl	80006d4 <__aeabi_dadd>
 800791a:	2200      	movs	r2, #0
 800791c:	2300      	movs	r3, #0
 800791e:	f7f8 fd9d 	bl	800045c <__aeabi_dcmpgt>
 8007922:	2800      	cmp	r0, #0
 8007924:	d006      	beq.n	8007934 <ceil+0x3c>
 8007926:	2c00      	cmp	r4, #0
 8007928:	db57      	blt.n	80079da <ceil+0xe2>
 800792a:	432c      	orrs	r4, r5
 800792c:	2500      	movs	r5, #0
 800792e:	42ac      	cmp	r4, r5
 8007930:	d000      	beq.n	8007934 <ceil+0x3c>
 8007932:	4c2f      	ldr	r4, [pc, #188]	; (80079f0 <ceil+0xf8>)
 8007934:	0028      	movs	r0, r5
 8007936:	0021      	movs	r1, r4
 8007938:	e026      	b.n	8007988 <ceil+0x90>
 800793a:	4f2e      	ldr	r7, [pc, #184]	; (80079f4 <ceil+0xfc>)
 800793c:	4137      	asrs	r7, r6
 800793e:	003b      	movs	r3, r7
 8007940:	400b      	ands	r3, r1
 8007942:	4303      	orrs	r3, r0
 8007944:	d020      	beq.n	8007988 <ceil+0x90>
 8007946:	9000      	str	r0, [sp, #0]
 8007948:	9101      	str	r1, [sp, #4]
 800794a:	4a27      	ldr	r2, [pc, #156]	; (80079e8 <ceil+0xf0>)
 800794c:	4b27      	ldr	r3, [pc, #156]	; (80079ec <ceil+0xf4>)
 800794e:	9800      	ldr	r0, [sp, #0]
 8007950:	9901      	ldr	r1, [sp, #4]
 8007952:	f7f8 febf 	bl	80006d4 <__aeabi_dadd>
 8007956:	2200      	movs	r2, #0
 8007958:	2300      	movs	r3, #0
 800795a:	f7f8 fd7f 	bl	800045c <__aeabi_dcmpgt>
 800795e:	2800      	cmp	r0, #0
 8007960:	d0e8      	beq.n	8007934 <ceil+0x3c>
 8007962:	2c00      	cmp	r4, #0
 8007964:	dd03      	ble.n	800796e <ceil+0x76>
 8007966:	2380      	movs	r3, #128	; 0x80
 8007968:	035b      	lsls	r3, r3, #13
 800796a:	4133      	asrs	r3, r6
 800796c:	18e4      	adds	r4, r4, r3
 800796e:	43bc      	bics	r4, r7
 8007970:	2500      	movs	r5, #0
 8007972:	e7df      	b.n	8007934 <ceil+0x3c>
 8007974:	2e33      	cmp	r6, #51	; 0x33
 8007976:	dd09      	ble.n	800798c <ceil+0x94>
 8007978:	2380      	movs	r3, #128	; 0x80
 800797a:	00db      	lsls	r3, r3, #3
 800797c:	429e      	cmp	r6, r3
 800797e:	d103      	bne.n	8007988 <ceil+0x90>
 8007980:	0002      	movs	r2, r0
 8007982:	000b      	movs	r3, r1
 8007984:	f7f8 fea6 	bl	80006d4 <__aeabi_dadd>
 8007988:	b005      	add	sp, #20
 800798a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800798c:	2701      	movs	r7, #1
 800798e:	4a1a      	ldr	r2, [pc, #104]	; (80079f8 <ceil+0x100>)
 8007990:	427f      	negs	r7, r7
 8007992:	189b      	adds	r3, r3, r2
 8007994:	40df      	lsrs	r7, r3
 8007996:	4207      	tst	r7, r0
 8007998:	d0f6      	beq.n	8007988 <ceil+0x90>
 800799a:	9000      	str	r0, [sp, #0]
 800799c:	9101      	str	r1, [sp, #4]
 800799e:	4a12      	ldr	r2, [pc, #72]	; (80079e8 <ceil+0xf0>)
 80079a0:	4b12      	ldr	r3, [pc, #72]	; (80079ec <ceil+0xf4>)
 80079a2:	9800      	ldr	r0, [sp, #0]
 80079a4:	9901      	ldr	r1, [sp, #4]
 80079a6:	f7f8 fe95 	bl	80006d4 <__aeabi_dadd>
 80079aa:	2200      	movs	r2, #0
 80079ac:	2300      	movs	r3, #0
 80079ae:	f7f8 fd55 	bl	800045c <__aeabi_dcmpgt>
 80079b2:	2800      	cmp	r0, #0
 80079b4:	d0be      	beq.n	8007934 <ceil+0x3c>
 80079b6:	2c00      	cmp	r4, #0
 80079b8:	dd02      	ble.n	80079c0 <ceil+0xc8>
 80079ba:	2e14      	cmp	r6, #20
 80079bc:	d102      	bne.n	80079c4 <ceil+0xcc>
 80079be:	3401      	adds	r4, #1
 80079c0:	43bd      	bics	r5, r7
 80079c2:	e7b7      	b.n	8007934 <ceil+0x3c>
 80079c4:	2334      	movs	r3, #52	; 0x34
 80079c6:	1b9e      	subs	r6, r3, r6
 80079c8:	3b33      	subs	r3, #51	; 0x33
 80079ca:	40b3      	lsls	r3, r6
 80079cc:	18ed      	adds	r5, r5, r3
 80079ce:	9b03      	ldr	r3, [sp, #12]
 80079d0:	429d      	cmp	r5, r3
 80079d2:	419b      	sbcs	r3, r3
 80079d4:	425b      	negs	r3, r3
 80079d6:	18e4      	adds	r4, r4, r3
 80079d8:	e7f2      	b.n	80079c0 <ceil+0xc8>
 80079da:	2480      	movs	r4, #128	; 0x80
 80079dc:	2500      	movs	r5, #0
 80079de:	0624      	lsls	r4, r4, #24
 80079e0:	e7a8      	b.n	8007934 <ceil+0x3c>
 80079e2:	46c0      	nop			; (mov r8, r8)
 80079e4:	fffffc01 	.word	0xfffffc01
 80079e8:	8800759c 	.word	0x8800759c
 80079ec:	7e37e43c 	.word	0x7e37e43c
 80079f0:	3ff00000 	.word	0x3ff00000
 80079f4:	000fffff 	.word	0x000fffff
 80079f8:	fffffbed 	.word	0xfffffbed

080079fc <floor>:
 80079fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80079fe:	004b      	lsls	r3, r1, #1
 8007a00:	4a39      	ldr	r2, [pc, #228]	; (8007ae8 <floor+0xec>)
 8007a02:	0d5b      	lsrs	r3, r3, #21
 8007a04:	b085      	sub	sp, #20
 8007a06:	189e      	adds	r6, r3, r2
 8007a08:	9003      	str	r0, [sp, #12]
 8007a0a:	000c      	movs	r4, r1
 8007a0c:	0005      	movs	r5, r0
 8007a0e:	2e13      	cmp	r6, #19
 8007a10:	dc34      	bgt.n	8007a7c <floor+0x80>
 8007a12:	2e00      	cmp	r6, #0
 8007a14:	da15      	bge.n	8007a42 <floor+0x46>
 8007a16:	4a35      	ldr	r2, [pc, #212]	; (8007aec <floor+0xf0>)
 8007a18:	4b35      	ldr	r3, [pc, #212]	; (8007af0 <floor+0xf4>)
 8007a1a:	f7f8 fe5b 	bl	80006d4 <__aeabi_dadd>
 8007a1e:	2200      	movs	r2, #0
 8007a20:	2300      	movs	r3, #0
 8007a22:	f7f8 fd1b 	bl	800045c <__aeabi_dcmpgt>
 8007a26:	2800      	cmp	r0, #0
 8007a28:	d008      	beq.n	8007a3c <floor+0x40>
 8007a2a:	2c00      	cmp	r4, #0
 8007a2c:	da59      	bge.n	8007ae2 <floor+0xe6>
 8007a2e:	0063      	lsls	r3, r4, #1
 8007a30:	085b      	lsrs	r3, r3, #1
 8007a32:	432b      	orrs	r3, r5
 8007a34:	2500      	movs	r5, #0
 8007a36:	42ab      	cmp	r3, r5
 8007a38:	d000      	beq.n	8007a3c <floor+0x40>
 8007a3a:	4c2e      	ldr	r4, [pc, #184]	; (8007af4 <floor+0xf8>)
 8007a3c:	0028      	movs	r0, r5
 8007a3e:	0021      	movs	r1, r4
 8007a40:	e026      	b.n	8007a90 <floor+0x94>
 8007a42:	4f2d      	ldr	r7, [pc, #180]	; (8007af8 <floor+0xfc>)
 8007a44:	4137      	asrs	r7, r6
 8007a46:	003b      	movs	r3, r7
 8007a48:	400b      	ands	r3, r1
 8007a4a:	4303      	orrs	r3, r0
 8007a4c:	d020      	beq.n	8007a90 <floor+0x94>
 8007a4e:	9000      	str	r0, [sp, #0]
 8007a50:	9101      	str	r1, [sp, #4]
 8007a52:	4a26      	ldr	r2, [pc, #152]	; (8007aec <floor+0xf0>)
 8007a54:	4b26      	ldr	r3, [pc, #152]	; (8007af0 <floor+0xf4>)
 8007a56:	9800      	ldr	r0, [sp, #0]
 8007a58:	9901      	ldr	r1, [sp, #4]
 8007a5a:	f7f8 fe3b 	bl	80006d4 <__aeabi_dadd>
 8007a5e:	2200      	movs	r2, #0
 8007a60:	2300      	movs	r3, #0
 8007a62:	f7f8 fcfb 	bl	800045c <__aeabi_dcmpgt>
 8007a66:	2800      	cmp	r0, #0
 8007a68:	d0e8      	beq.n	8007a3c <floor+0x40>
 8007a6a:	2c00      	cmp	r4, #0
 8007a6c:	da03      	bge.n	8007a76 <floor+0x7a>
 8007a6e:	2380      	movs	r3, #128	; 0x80
 8007a70:	035b      	lsls	r3, r3, #13
 8007a72:	4133      	asrs	r3, r6
 8007a74:	18e4      	adds	r4, r4, r3
 8007a76:	43bc      	bics	r4, r7
 8007a78:	2500      	movs	r5, #0
 8007a7a:	e7df      	b.n	8007a3c <floor+0x40>
 8007a7c:	2e33      	cmp	r6, #51	; 0x33
 8007a7e:	dd09      	ble.n	8007a94 <floor+0x98>
 8007a80:	2380      	movs	r3, #128	; 0x80
 8007a82:	00db      	lsls	r3, r3, #3
 8007a84:	429e      	cmp	r6, r3
 8007a86:	d103      	bne.n	8007a90 <floor+0x94>
 8007a88:	0002      	movs	r2, r0
 8007a8a:	000b      	movs	r3, r1
 8007a8c:	f7f8 fe22 	bl	80006d4 <__aeabi_dadd>
 8007a90:	b005      	add	sp, #20
 8007a92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007a94:	2701      	movs	r7, #1
 8007a96:	4a19      	ldr	r2, [pc, #100]	; (8007afc <floor+0x100>)
 8007a98:	427f      	negs	r7, r7
 8007a9a:	189b      	adds	r3, r3, r2
 8007a9c:	40df      	lsrs	r7, r3
 8007a9e:	4207      	tst	r7, r0
 8007aa0:	d0f6      	beq.n	8007a90 <floor+0x94>
 8007aa2:	9000      	str	r0, [sp, #0]
 8007aa4:	9101      	str	r1, [sp, #4]
 8007aa6:	4a11      	ldr	r2, [pc, #68]	; (8007aec <floor+0xf0>)
 8007aa8:	4b11      	ldr	r3, [pc, #68]	; (8007af0 <floor+0xf4>)
 8007aaa:	9800      	ldr	r0, [sp, #0]
 8007aac:	9901      	ldr	r1, [sp, #4]
 8007aae:	f7f8 fe11 	bl	80006d4 <__aeabi_dadd>
 8007ab2:	2200      	movs	r2, #0
 8007ab4:	2300      	movs	r3, #0
 8007ab6:	f7f8 fcd1 	bl	800045c <__aeabi_dcmpgt>
 8007aba:	2800      	cmp	r0, #0
 8007abc:	d0be      	beq.n	8007a3c <floor+0x40>
 8007abe:	2c00      	cmp	r4, #0
 8007ac0:	da02      	bge.n	8007ac8 <floor+0xcc>
 8007ac2:	2e14      	cmp	r6, #20
 8007ac4:	d102      	bne.n	8007acc <floor+0xd0>
 8007ac6:	3401      	adds	r4, #1
 8007ac8:	43bd      	bics	r5, r7
 8007aca:	e7b7      	b.n	8007a3c <floor+0x40>
 8007acc:	2334      	movs	r3, #52	; 0x34
 8007ace:	1b9e      	subs	r6, r3, r6
 8007ad0:	3b33      	subs	r3, #51	; 0x33
 8007ad2:	40b3      	lsls	r3, r6
 8007ad4:	18ed      	adds	r5, r5, r3
 8007ad6:	9b03      	ldr	r3, [sp, #12]
 8007ad8:	429d      	cmp	r5, r3
 8007ada:	419b      	sbcs	r3, r3
 8007adc:	425b      	negs	r3, r3
 8007ade:	18e4      	adds	r4, r4, r3
 8007ae0:	e7f2      	b.n	8007ac8 <floor+0xcc>
 8007ae2:	2500      	movs	r5, #0
 8007ae4:	002c      	movs	r4, r5
 8007ae6:	e7a9      	b.n	8007a3c <floor+0x40>
 8007ae8:	fffffc01 	.word	0xfffffc01
 8007aec:	8800759c 	.word	0x8800759c
 8007af0:	7e37e43c 	.word	0x7e37e43c
 8007af4:	bff00000 	.word	0xbff00000
 8007af8:	000fffff 	.word	0x000fffff
 8007afc:	fffffbed 	.word	0xfffffbed

08007b00 <round>:
 8007b00:	b570      	push	{r4, r5, r6, lr}
 8007b02:	004a      	lsls	r2, r1, #1
 8007b04:	4d1d      	ldr	r5, [pc, #116]	; (8007b7c <round+0x7c>)
 8007b06:	0d52      	lsrs	r2, r2, #21
 8007b08:	1955      	adds	r5, r2, r5
 8007b0a:	000e      	movs	r6, r1
 8007b0c:	2d13      	cmp	r5, #19
 8007b0e:	dc18      	bgt.n	8007b42 <round+0x42>
 8007b10:	2d00      	cmp	r5, #0
 8007b12:	da09      	bge.n	8007b28 <round+0x28>
 8007b14:	0fcb      	lsrs	r3, r1, #31
 8007b16:	07db      	lsls	r3, r3, #31
 8007b18:	2200      	movs	r2, #0
 8007b1a:	1c69      	adds	r1, r5, #1
 8007b1c:	d101      	bne.n	8007b22 <round+0x22>
 8007b1e:	4918      	ldr	r1, [pc, #96]	; (8007b80 <round+0x80>)
 8007b20:	430b      	orrs	r3, r1
 8007b22:	0019      	movs	r1, r3
 8007b24:	0010      	movs	r0, r2
 8007b26:	e016      	b.n	8007b56 <round+0x56>
 8007b28:	4a16      	ldr	r2, [pc, #88]	; (8007b84 <round+0x84>)
 8007b2a:	412a      	asrs	r2, r5
 8007b2c:	420a      	tst	r2, r1
 8007b2e:	d101      	bne.n	8007b34 <round+0x34>
 8007b30:	2800      	cmp	r0, #0
 8007b32:	d010      	beq.n	8007b56 <round+0x56>
 8007b34:	2380      	movs	r3, #128	; 0x80
 8007b36:	031b      	lsls	r3, r3, #12
 8007b38:	412b      	asrs	r3, r5
 8007b3a:	199b      	adds	r3, r3, r6
 8007b3c:	4393      	bics	r3, r2
 8007b3e:	2200      	movs	r2, #0
 8007b40:	e7ef      	b.n	8007b22 <round+0x22>
 8007b42:	2d33      	cmp	r5, #51	; 0x33
 8007b44:	dd08      	ble.n	8007b58 <round+0x58>
 8007b46:	2380      	movs	r3, #128	; 0x80
 8007b48:	00db      	lsls	r3, r3, #3
 8007b4a:	429d      	cmp	r5, r3
 8007b4c:	d103      	bne.n	8007b56 <round+0x56>
 8007b4e:	0002      	movs	r2, r0
 8007b50:	000b      	movs	r3, r1
 8007b52:	f7f8 fdbf 	bl	80006d4 <__aeabi_dadd>
 8007b56:	bd70      	pop	{r4, r5, r6, pc}
 8007b58:	4e0b      	ldr	r6, [pc, #44]	; (8007b88 <round+0x88>)
 8007b5a:	1992      	adds	r2, r2, r6
 8007b5c:	2601      	movs	r6, #1
 8007b5e:	4276      	negs	r6, r6
 8007b60:	40d6      	lsrs	r6, r2
 8007b62:	4206      	tst	r6, r0
 8007b64:	d0f7      	beq.n	8007b56 <round+0x56>
 8007b66:	2233      	movs	r2, #51	; 0x33
 8007b68:	1b55      	subs	r5, r2, r5
 8007b6a:	3a32      	subs	r2, #50	; 0x32
 8007b6c:	40aa      	lsls	r2, r5
 8007b6e:	1812      	adds	r2, r2, r0
 8007b70:	4282      	cmp	r2, r0
 8007b72:	41a4      	sbcs	r4, r4
 8007b74:	4264      	negs	r4, r4
 8007b76:	190b      	adds	r3, r1, r4
 8007b78:	43b2      	bics	r2, r6
 8007b7a:	e7d2      	b.n	8007b22 <round+0x22>
 8007b7c:	fffffc01 	.word	0xfffffc01
 8007b80:	3ff00000 	.word	0x3ff00000
 8007b84:	000fffff 	.word	0x000fffff
 8007b88:	fffffbed 	.word	0xfffffbed

08007b8c <_sbrk>:
 8007b8c:	4b05      	ldr	r3, [pc, #20]	; (8007ba4 <_sbrk+0x18>)
 8007b8e:	0002      	movs	r2, r0
 8007b90:	6819      	ldr	r1, [r3, #0]
 8007b92:	2900      	cmp	r1, #0
 8007b94:	d101      	bne.n	8007b9a <_sbrk+0xe>
 8007b96:	4904      	ldr	r1, [pc, #16]	; (8007ba8 <_sbrk+0x1c>)
 8007b98:	6019      	str	r1, [r3, #0]
 8007b9a:	6818      	ldr	r0, [r3, #0]
 8007b9c:	1882      	adds	r2, r0, r2
 8007b9e:	601a      	str	r2, [r3, #0]
 8007ba0:	4770      	bx	lr
 8007ba2:	46c0      	nop			; (mov r8, r8)
 8007ba4:	20000568 	.word	0x20000568
 8007ba8:	200006a0 	.word	0x200006a0

08007bac <_init>:
 8007bac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bae:	46c0      	nop			; (mov r8, r8)
 8007bb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007bb2:	bc08      	pop	{r3}
 8007bb4:	469e      	mov	lr, r3
 8007bb6:	4770      	bx	lr

08007bb8 <_fini>:
 8007bb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bba:	46c0      	nop			; (mov r8, r8)
 8007bbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007bbe:	bc08      	pop	{r3}
 8007bc0:	469e      	mov	lr, r3
 8007bc2:	4770      	bx	lr
